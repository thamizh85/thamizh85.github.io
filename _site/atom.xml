<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.2">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-06-18T07:17:53+08:00</updated><id>http://localhost:4000/</id><title type="html">Ephemeral Electrons</title><author><name>Tamizh</name></author><entry><title type="html">Book Review - Security Automation with Ansible 2</title><link href="http://localhost:4000/security/2018/05/20/2018-05-20-book-review-security-automation-with-ansible-2/" rel="alternate" type="text/html" title="Book Review - Security Automation with Ansible 2" /><published>2018-05-20T12:00:00+08:00</published><updated>2018-05-20T12:00:00+08:00</updated><id>http://localhost:4000/security/2018/05/20/2018-05-20-book-review-security-automation-with-ansible-2</id><content type="html" xml:base="http://localhost:4000/security/2018/05/20/2018-05-20-book-review-security-automation-with-ansible-2/">&lt;p&gt;Security is a huge, complex, rapidly changing field. Advancements in infrastructue hosting, development methodologies has had the most impact on this domain. Thanks to automation, instances are spawned and deleted in a matter of second. Continuous development/Continuous Integration means that an average lifetime of a block of code is ever decreasing. Code review and vulnerability assessments based on static code and IP are hardly affordable at current rate of change. At the same time, the rate of proliferation of technology has seen comparable increase in risk vectors, vulnerabilities and attack methodologies. To keep up with this pace, automation in security operations has become more important than ever.&lt;/p&gt;

&lt;p&gt;Unfortunately even within the CyberSecurity field, this automation domain is quite nascent and has sparse literature. So I was quite excited when I got a chance to review “Security Automation with Ansible 2” by Akash Mahajan and Madhu Akula. Before reading any further, if you are a security engineer struggling with these problems, grab hold of this book. It is quite extensive in scope and examples.&lt;/p&gt;

&lt;p&gt;The book starts with a brief introduction on Ansible, its installation procedures and works its way up to complex workflows, covering all major aspects of security automation. Some of the workflows discussed in the book includes- hardening various types of application deployments, continuous scanning for CICD workflow using Jenkins and OWASP ZAP, automated vulnerability scanning using Nessus, continuous security scans using OpenScap, vulnerability assessments of docker containers and cloud deployments. The book even goes on to discuss peripheral topics such as setup workflows for malware analysis, openstack, debops (Debian-based Data Center), private VPN using algo, anti-censorship software (Streisand) etc., In short you won’t find many tools missing in this book. Even if you are a practising expert on security automation, you will find something new to learn or inspired to use.&lt;/p&gt;

&lt;p&gt;Ansible is the engine for all the examples, acting as Swiss army knife to drive the automation of every aspects of security operations. Despite that, the authors didn’t discriminate against other automation tools and ignore them. For example, tools such Elasticsearch, AWS Lambda are already built for automation. Ansible’s role in these examples is to simplify the deployment of these tools and ensure consistency in deployment of these tools. One might argue this can encourage broader adoption of these tools on disparate workflows.&lt;/p&gt;

&lt;p&gt;If I have any suggestions, I would love to see some of these examples distilled into abstract policies or best practices for DevSec automation. “The practice of System and Network Administration” by Limoncelli is the golden standard for practical IT related writing. In their own words, their book sets out to discuss “those principles and ideas of system administration which do not change on a day-to-day basis”. Too much focus on existing tools can potentially affect the longevity of the book. Admittedly this is somewhat harder to do for a field which is still nascent and unpredictable. Irrespective of this, the book is still a valuable resource and every CyberSecurity professional will find it useful. You can find a copy of the book in &lt;a href=&quot;http://a.co/argCc3H&quot;&gt;Amazon&lt;/a&gt; or &lt;a href=&quot;https://www.packtpub.com/virtualization-and-cloud/security-automation-ansible-2&quot;&gt;Packt&lt;/a&gt;&lt;/p&gt;</content><author><name>thamizh85</name></author><category term="review" /><category term="ansible" /><category term="automation" /><summary type="html">Security is a huge, complex, rapidly changing field. Advancements in infrastructue hosting, development methodologies has had the most impact on this domain. Thanks to automation, instances are spawned and deleted in a matter of second. Continuous development/Continuous Integration means that an average lifetime of a block of code is ever decreasing. Code review and vulnerability assessments based on static code and IP are hardly affordable at current rate of change. At the same time, the rate of proliferation of technology has seen comparable increase in risk vectors, vulnerabilities and attack methodologies. To keep up with this pace, automation in security operations has become more important than ever. Unfortunately even within the CyberSecurity field, this automation domain is quite nascent and has sparse literature. So I was quite excited when I got a chance to review “Security Automation with Ansible 2” by Akash Mahajan and Madhu Akula. Before reading any further, if you are a security engineer struggling with these problems, grab hold of this book. It is quite extensive in scope and examples. The book starts with a brief introduction on Ansible, its installation procedures and works its way up to complex workflows, covering all major aspects of security automation. Some of the workflows discussed in the book includes- hardening various types of application deployments, continuous scanning for CICD workflow using Jenkins and OWASP ZAP, automated vulnerability scanning using Nessus, continuous security scans using OpenScap, vulnerability assessments of docker containers and cloud deployments. The book even goes on to discuss peripheral topics such as setup workflows for malware analysis, openstack, debops (Debian-based Data Center), private VPN using algo, anti-censorship software (Streisand) etc., In short you won’t find many tools missing in this book. Even if you are a practising expert on security automation, you will find something new to learn or inspired to use. Ansible is the engine for all the examples, acting as Swiss army knife to drive the automation of every aspects of security operations. Despite that, the authors didn’t discriminate against other automation tools and ignore them. For example, tools such Elasticsearch, AWS Lambda are already built for automation. Ansible’s role in these examples is to simplify the deployment of these tools and ensure consistency in deployment of these tools. One might argue this can encourage broader adoption of these tools on disparate workflows. If I have any suggestions, I would love to see some of these examples distilled into abstract policies or best practices for DevSec automation. “The practice of System and Network Administration” by Limoncelli is the golden standard for practical IT related writing. In their own words, their book sets out to discuss “those principles and ideas of system administration which do not change on a day-to-day basis”. Too much focus on existing tools can potentially affect the longevity of the book. Admittedly this is somewhat harder to do for a field which is still nascent and unpredictable. Irrespective of this, the book is still a valuable resource and every CyberSecurity professional will find it useful. You can find a copy of the book in Amazon or Packt</summary></entry><entry><title type="html">Predicting the playing role of a cricketer using Machine Learning (Part 2)</title><link href="http://localhost:4000/machine%20learning/2018/04/28/2018-04-28-predicting-the-playing-role-of-a-cricketer-using-machine-learning-part-2/" rel="alternate" type="text/html" title="Predicting the playing role of a cricketer using Machine Learning (Part 2)" /><published>2018-04-28T12:00:00+08:00</published><updated>2018-04-28T12:00:00+08:00</updated><id>http://localhost:4000/machine%20learning/2018/04/28/2018-04-28-predicting-the-playing-role-of-a-cricketer-using-machine-learning-part-2</id><content type="html" xml:base="http://localhost:4000/machine%20learning/2018/04/28/2018-04-28-predicting-the-playing-role-of-a-cricketer-using-machine-learning-part-2/">&lt;p&gt;In the previous &lt;a href=&quot;https://thamizh85.github.io/machine%20learning/2018/04/23/2018-04-23-predicting-the-playing-role-of-a-cricketer-using-machine-learning-part-1/&quot;&gt;post&lt;/a&gt; we saw how to scrape raw data from a content rich webpage. In this post, we will explore how to process that raw data and use Machine Learning tools to predict the playing role of a cricket player just based on his career statistics.&lt;/p&gt;

&lt;p&gt;Here are the tools that we will use for this exercise. For interactive data analysis and number crunching:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Jupyter&lt;/li&gt;
  &lt;li&gt;Pandas&lt;/li&gt;
  &lt;li&gt;Numpy&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For visualizing data:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Seaborn&lt;/li&gt;
  &lt;li&gt;matplotlib&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For running Machine Learning models:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Tensorflow&lt;/li&gt;
  &lt;li&gt;Keras&lt;/li&gt;
  &lt;li&gt;Scikit-learn&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;importing-data&quot;&gt;Importing data&lt;/h2&gt;
&lt;p&gt;First let us load the necessary modules:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;plt&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pd&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;seaborn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sns&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Import the CSV file which we scraped as a pandas data frame and inspect its contents.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'data/players.csv'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dtypes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Bat_100&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bat_4s&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bat_50&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bat_6s&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bat_Ave&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bat_BF&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bat_Ct&lt;/td&gt;
      &lt;td&gt;int64&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bat_HS&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bat_Inns&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bat_Mat&lt;/td&gt;
      &lt;td&gt;int64&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bat_NO&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bat_Runs&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bat_SR&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bat_St&lt;/td&gt;
      &lt;td&gt;int64&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bio_Also_known_as&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bio_Batting_style&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bio_Born&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bio_Bowling_style&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bio_Current_age&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bio_Died&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bio_Education&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bio_Fielding_position&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bio_Full_name&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bio_Height&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bio_In_a_nutshell&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bio_Major_teams&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bio_Nickname&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bio_Other&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bio_Playing_role&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bio_Relation&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bowl_10&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bowl_4w&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bowl_5w&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bowl_Ave&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bowl_BBI&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bowl_BBM&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bowl_Balls&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bowl_Econ&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bowl_Inns&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bowl_Mat&lt;/td&gt;
      &lt;td&gt;int64&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bowl_Runs&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bowl_SR&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bowl_Wkts&lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;dtype: object&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We can see that most of the fields are decoded as &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt; data type which is a generic pandas datatype. It gets assigned if our data consists of mixed types such as characters and numerals. There are some obvious numerical fields which are getting detected as string. But before we recast all of them as string, we need to preprocess some of them to extract numeric value out of them.&lt;/p&gt;

&lt;p&gt;For example, let us inspect &lt;code class=&quot;highlighter-rouge&quot;&gt;Bowl_BBI&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Bowl_BBM&lt;/code&gt; which stands for best bowling figures in an innings and a match respectively.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bowl_BBI'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bowl_BBM'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Bowl_BBI&lt;/th&gt;
      &lt;th&gt;Bowl_BBM&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;3/31&lt;/td&gt;
      &lt;td&gt;3/31&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2/35&lt;/td&gt;
      &lt;td&gt;2/42&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;6/85&lt;/td&gt;
      &lt;td&gt;8/58&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Either fields can be made sense as a combination of two independent variables- Best Bowling Wickets &amp;amp; Best Bowling Runs. Similarly when we cast the field &lt;code class=&quot;highlighter-rouge&quot;&gt;Bat_HS&lt;/code&gt; as integer, the notout values will be lost since they are suffixed with an asterisk which makes them a string data type. Let us go ahead to fix these potential issues.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Best bowling innings wickets&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bbi_df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bowl_BBI'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tolist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bowl_BBIW'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bowl_BBIR'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bbm_df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bowl_BBM'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tolist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bowl_BBMW'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bowl_BBMR'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bbi_df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bbm_df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Identify numeric columns&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;numeric_cols&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bat_100'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bat_4s'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bat_50'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bat_6s'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bat_Ave'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bat_BF'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;'Bat_Ct'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bat_HS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bat_Inns'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bat_Mat'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bat_NO'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bat_Runs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;'Bat_SR'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bat_St'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bowl_10'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bowl_4w'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bowl_5w'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bowl_Ave'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;'Bowl_Balls'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bowl_Econ'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bowl_Inns'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bowl_Mat'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bowl_Runs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;'Bowl_SR'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Bowl_Wkts'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bowl_BBIW'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bowl_BBIR'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bowl_BBMW'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bowl_BBMR'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# regex replace * in High scores&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bat_HS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bat_HS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numeric_cols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numeric_cols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numeric_cols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numeric_cols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_numeric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'coerce'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numeric_cols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numeric_cols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fillna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;If we check the data type again, we will see that all the numerical fields are interpreted as int or float datatype as expected.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Be careful when filling NaN with zeroes. Idea is not to introduce false values in to the dataset. In this case, a value of zero is neutral since it represents the same value as absent numbers. But for certain types of data, such as temperature, zero introduces a false value in to the data set since temperature values can be less than zero.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;pre-processing&quot;&gt;Pre-processing&lt;/h2&gt;

&lt;h3 id=&quot;deriving-new-features&quot;&gt;Deriving new features&lt;/h3&gt;

&lt;p&gt;When using data in our models we have to understand the units in which they are represented. Not all features are directly comparable. For instance, Average &amp;amp; Strike rates are already averaged over the number of matches that a player plays. But other aggregate statistics aren’t. So in effect it would be meaningless to compare run tally of a player who has played only 10 matches with that of another who has played a hundred matches.&lt;/p&gt;

&lt;p&gt;To understand better, let us plot runs scored vs the matches played.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jointplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bat_Runs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bat_Inns&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/2018/04/predicting-the-playing-role-of-a-cricketer-using-machine-learning-part-2/bat-inns-vs-bat-runs.png&quot; alt=&quot;Bat Inns vs Bat Runs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Obviously there is a strong correlation between no. of matches played and no. of runs scored. Ideally we want our features to be as independent of each other as possible. To separate the influence of number of matches played on the batting runs feature, we will divide the aggregate statistics by number of matches played.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# select aggregate stats such as no. of hundreds, runs scored etc.,&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bat_features_raw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bat_100'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Bat_4s'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Bat_50'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Bat_6s'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                    &lt;span class=&quot;s&quot;&gt;'Bat_BF'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Bat_Ct'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Bat_NO'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Bat_Runs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bat_St'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# column names for scaled features&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bat_features_scaled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bat_100_sc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Bat_4s_sc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Bat_50_sc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Bat_6s_sc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                    &lt;span class=&quot;s&quot;&gt;'Bat_BF_sc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Bat_Ct_sc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Bat_NO_sc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Bat_Runs_sc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bat_St_sc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# leave aside match and innings count and other aggregate stats such as best bowling figures, strike rate and average&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bowl_features_raw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bowl_10'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Bowl_4w'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Bowl_5w'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
                     &lt;span class=&quot;s&quot;&gt;'Bowl_Balls'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Bowl_Runs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bowl_Wkts'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# column names for scaled features&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bowl_features_scaled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bowl_10_sc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Bowl_4w_sc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Bowl_5w_sc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
                     &lt;span class=&quot;s&quot;&gt;'Bowl_Balls_sc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Bowl_Runs_sc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bowl_Wkts_sc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# divide by innings count since it is more relevant than match count&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bat_features_scaled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bat_features_raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bat_Inns'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bowl_features_scaled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bowl_features_raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bowl_Inns'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# these are the meaningful features which will be the input for our model. &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;features&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bat_Ave'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bat_HS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Bat_SR'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bat_features_scaled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bowl_Ave'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bowl_Econ'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bowl_SR'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bowl_BBIW'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Bowl_BBIR'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Bowl_BBMW'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Bowl_BBMR'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bowl_features_scaled&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# fill numerical features with zero&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fillna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;It can be argued that averaging the runs scored duplicates the batting average feature. Leaving aside subtle differences in the way in which batting averages are calculated, we would still keep both features to see how our model learns the difference in both the features and assigns weight accordingly.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now let us plot the scaled runs scored value vs the innings played.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jointplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bat_Runs_sc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bat_Inns&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018/04/predicting-the-playing-role-of-a-cricketer-using-machine-learning-part-2/bat-inns-vs-bat-runs-sc.png&quot; alt=&quot;Bat Inns vs Bat Runs Scaled&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Clearly this is a far better representation of batting capabilities of a player. You can see there is less dependency on the number of innings played. It is not hard to imagine how this scaling affects our final prediction. The impact is obvious when we plot batting runs and bowling wickets (likely to be the most important features) in a KDE plot. Here is the KDE plot before scaling:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jointplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bowl_Wkts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bat_Runs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'kde'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/2018/04/predicting-the-playing-role-of-a-cricketer-using-machine-learning-part-2/bat-inns-vs-bat-runs-kde-before.png&quot; alt=&quot;Bowl Wickets vs Bat Runs KDE plot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is no clear clustering indicating that our classification is not going to be effective. In comparison, if we generate the same chart for scaled values, there is a clear grouping.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jointplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bowl_Wkts_sc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bat_Runs_sc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'kde'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018/04/predicting-the-playing-role-of-a-cricketer-using-machine-learning-part-2/bat-inns-vs-bat-runs-kde-after.png&quot; alt=&quot;Bowl Wickets Scaled vs Bat Runs Scaled KDE plot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This much more promising. Remember, your model will only perform as well as the data you feed in. If the input data is already confused, there is very little a mathematical model can do. Now that we have almost all that we need we will extract those records that have &lt;code class=&quot;highlighter-rouge&quot;&gt;playing role&lt;/code&gt; information and use it for our training &amp;amp; testing. To avoid outliers corrupting our model, we will also exclude players who played less than 5 matches.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# remove players who played less than 5 matches&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bio_Playing_role'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notnull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bat_Mat'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;data-transformation&quot;&gt;Data Transformation&lt;/h3&gt;

&lt;p&gt;Next let us look at our target feature which is &lt;code class=&quot;highlighter-rouge&quot;&gt;playing role&lt;/code&gt;. We need to understand the values it can assume. Let us look at the unique values for the player features.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Check the unique playing roles to identify mapping function&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bio_Playing_role'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unique&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;array([nan, 'Top-order batsman', 'Bowler', 'Middle-order batsman',
       'Wicketkeeper batsman', 'Allrounder', 'Batsman', 'Opening batsman',
       'Wicketkeeper', 'Bowling allrounder', 'Batting allrounder'], dtype=object)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The playing role definiton is too granular. We want fewer variety of roles so that each role gets sufficient sample data points to train the model. Also the role tagging done by Cricinfo is not consistent. For e.g., not all opening batsmen have been tagged with the opening batsman role. So we define a mapping function to group playing roles in to 4 different categories &lt;code class=&quot;highlighter-rouge&quot;&gt;['Batsman','Bowler','Wicketkeeper','Allrounder']&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notnull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'keeper'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Wicketkeeper&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'rounder'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Allrounder&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'atsman'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Batsman&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'owler'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Bowler&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
    
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'role'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bio_Playing_role'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Note that this feature is a categorical data. It is different from a numerical data such as height or weight. When we want to use Deep Neural Networks we need to represent the target features as numerical data. We will assign one column for each playing role and set its value to one when that playing role fits the player well. Then the function of our model will be to assign a value close to 1 for one of these columns and a value close to 0 for the rest.&lt;/p&gt;

&lt;p&gt;It is called One-Hot encoding. Turns out this is a frequent task, so pandas has a handy inbuilt function to perform this.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c&quot;&gt;# y is categorical feature&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'role'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Convert categorical data into numerical columns&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y_cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_dummies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# X is the input features. We need to covert it from pandas dataframe to numpy array to feed in to our models&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let us see the new &lt;code class=&quot;highlighter-rouge&quot;&gt;y_cat&lt;/code&gt; dataframe&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;y_cat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Allrounder&lt;/th&gt;
      &lt;th&gt;Batsman&lt;/th&gt;
      &lt;th&gt;Bowler&lt;/th&gt;
      &lt;th&gt;Wicketkeeper&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;19&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;25&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;28&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;One might be tempted to assign unique numbers for each category ( say 1: Batsman, 2: Bowler etc.,) but that will not work. There is no quantitative relation between categories. Assigning raw numbers implies that there is a numerical progression to the categories. Sometimes it can work for contiguous data such as day of the month, but even then one has to be aware of the bounds and circularity of the target variables.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;scaling-data&quot;&gt;Scaling data&lt;/h3&gt;
&lt;p&gt;Some fields vary over a larger range compared to the rest. Remember we did a preliminary scaling by dividing these values with the number of innings. But that is not sufficient since it only made sure that one feature (‘no. of innings’) did not overtly influence another feature (‘runs scored’). But each features themselves lie between different extremities. For e.g, &lt;code class=&quot;highlighter-rouge&quot;&gt;Bowling Wickets Scaled&lt;/code&gt; only ranges from 0 to 5 whereas &lt;code class=&quot;highlighter-rouge&quot;&gt;Batting Runs Scaled&lt;/code&gt; ranges from 0 to 50. Most machine learning models works the best when the features are vary within the same range. If we let these datapoints influence our calculation without modification, wickets taken will have negligible influence.&lt;/p&gt;

&lt;p&gt;So we perform another round of scaling for all input data points. We will use the &lt;code class=&quot;highlighter-rouge&quot;&gt;MinMax Scaler&lt;/code&gt; from Scikit library. This will scale the values such that largest value becomes one and smallest value becomes zero.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn.preprocessing&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MinMaxScaler&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mms&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MinMaxScaler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feature_range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# X_mms will our new input array with all values scaled to be between 0 and 1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;X_mms&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mms&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;training-the-model&quot;&gt;Training the model&lt;/h2&gt;

&lt;h3 id=&quot;deep-neural-network&quot;&gt;Deep Neural Network&lt;/h3&gt;

&lt;p&gt;First we will try to run a Deep Neural Network model on this data. Here are the necessary modules to import.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;keras.models&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sequential&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;keras.layers&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dense&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;keras.optimizers&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SGD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Adam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Adadelta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RMSprop&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;keras.wrappers.scikit_learn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KerasClassifier&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;keras.backend&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;K&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Create the Keras Sequential model. I am using a DNN with 1 hidden layer and 1 output layer. The hidden layer has 15 nodes. The number of nodes in the output layer should as the number of categories. So we will go with 4.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_baseline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# create model&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sequential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_dim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel_initializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'he_normal'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'relu'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel_initializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'he_normal'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'softmax'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Compile model&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'categorical_crossentropy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'adam'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metrics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'accuracy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;softmax&lt;/code&gt; is a popular activation function for classification problems. In simple words, an activation function is a simple function that decides whether to output TRUE or FALSE for each category. This &lt;code class=&quot;highlighter-rouge&quot;&gt;softmax&lt;/code&gt; function receives an array of values from the previous layer and returns a new array which adds up to 1. The category with the largest value is deemed likely match for our data.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Softmax&lt;/code&gt; highlights only the likeliest category for a data. Here for simplicity sake, we assume that our categories are mutually exclusive, i.e, a player can only belong to one category at a time. There are other data types where a single entry can belong to more than one category at a time. We may need to use different activation function for that. Again, know your data before deciding on activation function.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The loss function is &lt;code class=&quot;highlighter-rouge&quot;&gt;categorical_crossentropy&lt;/code&gt;. A Loss Function can be thought of as a course correction function which measures the perceived error as our model navigates to ideal set of weights over multiple iterations. Categorical Cross-Entropy loss function penalizes weights that are sure to be wrong. It is a common loss function used for classification problems.&lt;/p&gt;

&lt;p&gt;These are the important attributes that closely follows our problem definition. Most of the other parameters can be fiddled with.&lt;/p&gt;

&lt;p&gt;Next we will use Keras to train the model. The result is a Keras Classifier function whose weights are trained on our data. We can use this function to predict values for inputs which we haven’t seen so far.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# evaluate model with standardized dataset&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;estimator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KerasClassifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build_fn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_baseline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nb_epoch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;batch_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verbose&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We cannot use all of the data to train our model. The model will closely follow our existing model. It won’t be useful to predict any values we haven’t seen so far. This is called overfitting.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018/04/predicting-the-playing-role-of-a-cricketer-using-machine-learning-part-2/overfitting.png&quot; alt=&quot;Overfitting&quot; /&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;Example of overfitting - Source Wikipedia &lt;/p&gt;

&lt;p&gt;To avoid this, we will split the data into train and test datasets. We will use the former to train the model and compute the scores based on the testing against test data for each iteration of cross-validation. Scikit’s provides a helper function called &lt;code class=&quot;highlighter-rouge&quot;&gt;cross_val_score&lt;/code&gt; to assist in this. &lt;code class=&quot;highlighter-rouge&quot;&gt;StratifiedKFold&lt;/code&gt; is the genertor strategy we will use for selecting this train/test datasets. It splits the data into K folds (set to 10 in our case), trains it on K-1 datasets and tests it against the left out dataset, while preserving the class distribution of the data.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# set the random state to a fixed number for reproducing the results&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kfold&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StratifiedKFold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_splits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shuffle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random_state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cross_val_score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;estimator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X_mms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kfold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Results: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%.2&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%% &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%.2&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;)&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I got a result of 82.2% accuracy. Not bad for the first attempt, particularly since we employed gross simplifications and trained the model with only with around 450 records. The results that you get may be slightly different since we shuffle the data before generating folds.&lt;/p&gt;

&lt;h3 id=&quot;random-forest-classifier&quot;&gt;Random Forest Classifier&lt;/h3&gt;

&lt;p&gt;This time let us try to model the data using &lt;code class=&quot;highlighter-rouge&quot;&gt;Random Forest classifier&lt;/code&gt;. Random Forest Classifier is a much simpler method than neural networks. It relies on building multiple decision trees and assembling the results of these decision trees.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn.ensemble&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RandomForestClassifier&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Instantiate model with 1000 decision trees&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rf_estimator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RandomForestClassifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_estimators&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;rf_results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cross_val_score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rf_estimator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X_mms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kfold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Results: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%.2&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%% &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%.2&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;)&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rf_results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rf_results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You will notice that Random Forest Classifier has performed significantly better than the DNN classifier. I got 87.28% accuracy, which is amazing since Random Forest is several times faster and less resource intensive than the DNN classifier. And I didn’t even have to run it on top of tensorflow and make use of GPU. Decision trees are quite effective at classification tasks but they tend to overfit.&lt;/p&gt;

&lt;h2 id=&quot;reviewing-the-results&quot;&gt;Reviewing the results&lt;/h2&gt;

&lt;p&gt;Since our Random Forest model has performed significantly better, we will use that model to predict the unseen roles of players.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Fit the estimator on available data&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rf_estimator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_mms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# np array to hold all of the input data&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# An ugly hack to drop infinity values introduced as part of some of the pre-processing tasks&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1e308&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Min Max Scaling&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;P_mms&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min_max_scaler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit_transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Prediction based on the Random forest model&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'predicted_role_rf'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rf_estimator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P_mms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;confusion-matrix&quot;&gt;Confusion Matrix&lt;/h3&gt;
&lt;p&gt;A score alone is not a good indicator that our model has performed well. We need to review its performance by plotting &lt;code class=&quot;highlighter-rouge&quot;&gt;Confusion Matrix&lt;/code&gt;. It is a simple matrix plot based on known test data with predicted values plotted against the true value. The diagonal entries represent correct prediction, rest represents confused values. Let us plot Confusin Matrix for our data.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn.metrics&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;confusion_matrix&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;confusion_matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'role'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'role'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; 
                       &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'role'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'predicted_role_rf'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                       &lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Batsman'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bowler'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Allrounder'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Wicketkeeper'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heatmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;annot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'true label'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'predicted label'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018/04/predicting-the-playing-role-of-a-cricketer-using-machine-learning-part-2/confusion-matrix.png&quot; alt=&quot;Confusion Matrix&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see that the model is quite effective in matching the pure roles such as Batsman or Bowler. When it comes to mixed roles such as Allrounder or Wicketkeeper, it fares not that well. Part of the problem lies in our assumption that the roles are mutually exclusive i.e, a player cannot be both Batsman and Bowler at the same time. So we identify only around 37% of the all rounders succesfully. Later we will see that there are other reasons why the predicted role doesn’t match the role marked in cricinfo.&lt;/p&gt;

&lt;h3 id=&quot;reviewing-the-results-1&quot;&gt;Reviewing the results&lt;/h3&gt;

&lt;p&gt;Let us see the cases where our predictions differed from the roles defined in cricinfo:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'role'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'predicted_role_rf'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'role'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bat_Mat'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)][[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bio_Full_name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'predicted_role_rf'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'role'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Bio_Playing_role'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I have extracted the differences for popular players of recent times. Subjectively speaking our model hasn’t performed too bad. There seems to be some merit to the classification offered by the model compared to the playing role assigned in cricinfo bio page.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Bio_Full_name&lt;/th&gt;
      &lt;th&gt;predicted_role_rf&lt;/th&gt;
      &lt;th&gt;role&lt;/th&gt;
      &lt;th&gt;Bio_Playing_role&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;38&lt;/td&gt;
      &lt;td&gt;Stephen Norman John O’Keefe&lt;/td&gt;
      &lt;td&gt;Bowler&lt;/td&gt;
      &lt;td&gt;Allrounder&lt;/td&gt;
      &lt;td&gt;Allrounder&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;44&lt;/td&gt;
      &lt;td&gt;Glenn James Maxwell&lt;/td&gt;
      &lt;td&gt;Batsman&lt;/td&gt;
      &lt;td&gt;Allrounder&lt;/td&gt;
      &lt;td&gt;Batting allrounder&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;88&lt;/td&gt;
      &lt;td&gt;Andrew Symonds&lt;/td&gt;
      &lt;td&gt;Batsman&lt;/td&gt;
      &lt;td&gt;Allrounder&lt;/td&gt;
      &lt;td&gt;Allrounder&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;227&lt;/td&gt;
      &lt;td&gt;Shai Diego Hope&lt;/td&gt;
      &lt;td&gt;Batsman&lt;/td&gt;
      &lt;td&gt;Wicketkeeper&lt;/td&gt;
      &lt;td&gt;Wicketkeeper batsman&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;281&lt;/td&gt;
      &lt;td&gt;Brendon Barrie McCullum&lt;/td&gt;
      &lt;td&gt;Batsman&lt;/td&gt;
      &lt;td&gt;Wicketkeeper&lt;/td&gt;
      &lt;td&gt;Wicketkeeper batsman&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;970&lt;/td&gt;
      &lt;td&gt;Angelo Davis Mathews&lt;/td&gt;
      &lt;td&gt;Batsman&lt;/td&gt;
      &lt;td&gt;Allrounder&lt;/td&gt;
      &lt;td&gt;Allrounder&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1437&lt;/td&gt;
      &lt;td&gt;Abraham Benjamin de Villiers&lt;/td&gt;
      &lt;td&gt;Batsman&lt;/td&gt;
      &lt;td&gt;Wicketkeeper&lt;/td&gt;
      &lt;td&gt;Wicketkeeper batsman&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;In most cases, Cricinfo’s playing role is also based on the ODI and T20 formats. Some of the players like ABD Villiers and Brendon McCullum have donned multiple roles but given up gloves for the games longest format. So we can’t really fault the model here for identifying them as batsman. Then there are other cases of a player being regarded as All rounder based on the role they play in shorter formats.&lt;/p&gt;

&lt;p&gt;Next to the most interesting part- let us see how our model behaves for the data it hasn’t seen i.e., the classification of those players whose playing role is missing in their bio page. For ease of identification, I have filtered only those players who have played 100 matches or more.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'role'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'predicted_role_rf'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'role'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bat_Mat'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)][[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bio_Full_name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'predicted_role_rf'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'role'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Bio_Playing_role'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Bio_Full_name&lt;/th&gt;
      &lt;th&gt;predicted_role_rf&lt;/th&gt;
      &lt;th&gt;role&lt;/th&gt;
      &lt;th&gt;Bio_Playing_role&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;134&lt;/td&gt;
      &lt;td&gt;Mark Edward Waugh&lt;/td&gt;
      &lt;td&gt;Batsman&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;137&lt;/td&gt;
      &lt;td&gt;Mark Anthony Taylor&lt;/td&gt;
      &lt;td&gt;Batsman&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;139&lt;/td&gt;
      &lt;td&gt;Ian Andrew Healy&lt;/td&gt;
      &lt;td&gt;Wicketkeeper&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;599&lt;/td&gt;
      &lt;td&gt;Sourav Chandidas Ganguly&lt;/td&gt;
      &lt;td&gt;Batsman&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;743&lt;/td&gt;
      &lt;td&gt;Anil Kumble&lt;/td&gt;
      &lt;td&gt;Bowler&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;925&lt;/td&gt;
      &lt;td&gt;Brian Charles Lara&lt;/td&gt;
      &lt;td&gt;Batsman&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;929&lt;/td&gt;
      &lt;td&gt;Carl Llewellyn Hooper&lt;/td&gt;
      &lt;td&gt;Batsman&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;937&lt;/td&gt;
      &lt;td&gt;Courtney Andrew Walsh&lt;/td&gt;
      &lt;td&gt;Bowler&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;957&lt;/td&gt;
      &lt;td&gt;Desmond Leo Haynes&lt;/td&gt;
      &lt;td&gt;Batsman&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1072&lt;/td&gt;
      &lt;td&gt;Kapildev Ramlal Nikhanj&lt;/td&gt;
      &lt;td&gt;Bowler&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1074&lt;/td&gt;
      &lt;td&gt;Dilip Balwant Vengsarkar&lt;/td&gt;
      &lt;td&gt;Batsman&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1088&lt;/td&gt;
      &lt;td&gt;Sunil Manohar Gavaskar&lt;/td&gt;
      &lt;td&gt;Batsman&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1257&lt;/td&gt;
      &lt;td&gt;Cuthbert Gordon Greenidge&lt;/td&gt;
      &lt;td&gt;Batsman&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1258&lt;/td&gt;
      &lt;td&gt;Isaac Vivian Alexander Richards&lt;/td&gt;
      &lt;td&gt;Batsman&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1284&lt;/td&gt;
      &lt;td&gt;Clive Hubert Lloyd&lt;/td&gt;
      &lt;td&gt;Batsman&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1326&lt;/td&gt;
      &lt;td&gt;Warnakulasuriya Patabendige Ushantha Joseph Chaminda Vaas&lt;/td&gt;
      &lt;td&gt;Bowler&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1463&lt;/td&gt;
      &lt;td&gt;Makhaya Ntini&lt;/td&gt;
      &lt;td&gt;Bowler&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1474&lt;/td&gt;
      &lt;td&gt;Gary Kirsten&lt;/td&gt;
      &lt;td&gt;Batsman&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1676&lt;/td&gt;
      &lt;td&gt;Alec James Stewart&lt;/td&gt;
      &lt;td&gt;Batsman&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2020&lt;/td&gt;
      &lt;td&gt;Inzamam-ul-Haq&lt;/td&gt;
      &lt;td&gt;Batsman&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2168&lt;/td&gt;
      &lt;td&gt;Graham Alan Gooch&lt;/td&gt;
      &lt;td&gt;Batsman&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2205&lt;/td&gt;
      &lt;td&gt;Wasim Akram&lt;/td&gt;
      &lt;td&gt;Bowler&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2216&lt;/td&gt;
      &lt;td&gt;Saleem Malik&lt;/td&gt;
      &lt;td&gt;Batsman&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2320&lt;/td&gt;
      &lt;td&gt;Geoffrey Boycott&lt;/td&gt;
      &lt;td&gt;Batsman&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2366&lt;/td&gt;
      &lt;td&gt;Michael Colin Cowdrey&lt;/td&gt;
      &lt;td&gt;Batsman&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2381&lt;/td&gt;
      &lt;td&gt;Mohammad Javed Miandad Khan&lt;/td&gt;
      &lt;td&gt;Batsman&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Even a cursory look can tell us that our model worked splendidly. It is surprising how many prominent player bio pages has their playing role information missing. Well, it looks like even a simple ML model can fix that gap.&lt;/p&gt;

&lt;p&gt;Let us see how the two most critical features (&lt;code class=&quot;highlighter-rouge&quot;&gt;Bat_Runs_sc&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Bowl_Wkts_sc&lt;/code&gt;) affects our predicted role.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_palette&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bright&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lmplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bowl_Wkts_sc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bat_Runs_sc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bat_Mat'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;hue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'predicted_role_rf'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fit_reg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;7.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018/04/predicting-the-playing-role-of-a-cricketer-using-machine-learning-part-2/bat-runs-bowl-wkts-roles.png&quot; alt=&quot;Bat Runs vs Bowl Wkts&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I have plotted a diagonal line, below which most of the points are clustered. It represents a kind of pareto-frontier which only exceptional players can breach. Note that there is no statistical basis for my choice of x and y intercepts, I just based it on visual inspection. Let us see the list of players who reside above this threshold.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bat_Mat'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bowl_Wkts_sc*100 + Bat_Runs_sc*7 &amp;gt; 700 '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bio_Full_name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bat_Mat'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'predicted_role_rf'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bowl_Wkts_sc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bat_Runs_sc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Bio_Full_name&lt;/th&gt;
      &lt;th&gt;Bat_Mat&lt;/th&gt;
      &lt;th&gt;predicted_role_rf&lt;/th&gt;
      &lt;th&gt;Bowl_Wkts_sc&lt;/th&gt;
      &lt;th&gt;Bat_Runs_sc&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;62&lt;/td&gt;
      &lt;td&gt;Steven Peter Devereux Smith&lt;/td&gt;
      &lt;td&gt;59&lt;/td&gt;
      &lt;td&gt;Batsman&lt;/td&gt;
      &lt;td&gt;0.288136&lt;/td&gt;
      &lt;td&gt;98.237288&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;377&lt;/td&gt;
      &lt;td&gt;Ravindrasinh Anirudhsinh Jadeja&lt;/td&gt;
      &lt;td&gt;35&lt;/td&gt;
      &lt;td&gt;Bowler&lt;/td&gt;
      &lt;td&gt;4.714286&lt;/td&gt;
      &lt;td&gt;33.600000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;380&lt;/td&gt;
      &lt;td&gt;Ravichandran Ashwin&lt;/td&gt;
      &lt;td&gt;55&lt;/td&gt;
      &lt;td&gt;Bowler&lt;/td&gt;
      &lt;td&gt;5.527273&lt;/td&gt;
      &lt;td&gt;37.363636&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;456&lt;/td&gt;
      &lt;td&gt;Christopher Lance Cairns&lt;/td&gt;
      &lt;td&gt;62&lt;/td&gt;
      &lt;td&gt;Allrounder&lt;/td&gt;
      &lt;td&gt;3.516129&lt;/td&gt;
      &lt;td&gt;53.548387&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;526&lt;/td&gt;
      &lt;td&gt;Shakib Al Hasan&lt;/td&gt;
      &lt;td&gt;51&lt;/td&gt;
      &lt;td&gt;Allrounder&lt;/td&gt;
      &lt;td&gt;3.686275&lt;/td&gt;
      &lt;td&gt;70.470588&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;720&lt;/td&gt;
      &lt;td&gt;Sikandar Raza Butt&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;Allrounder&lt;/td&gt;
      &lt;td&gt;1.444444&lt;/td&gt;
      &lt;td&gt;84.111111&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;832&lt;/td&gt;
      &lt;td&gt;Donald George Bradman&lt;/td&gt;
      &lt;td&gt;52&lt;/td&gt;
      &lt;td&gt;Batsman&lt;/td&gt;
      &lt;td&gt;0.038462&lt;/td&gt;
      &lt;td&gt;134.538462&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1133&lt;/td&gt;
      &lt;td&gt;Herbert Vivian Hordern&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;Bowler&lt;/td&gt;
      &lt;td&gt;6.571429&lt;/td&gt;
      &lt;td&gt;36.285714&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1177&lt;/td&gt;
      &lt;td&gt;Richard John Hadlee&lt;/td&gt;
      &lt;td&gt;86&lt;/td&gt;
      &lt;td&gt;Bowler&lt;/td&gt;
      &lt;td&gt;5.011628&lt;/td&gt;
      &lt;td&gt;36.325581&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1240&lt;/td&gt;
      &lt;td&gt;Yasir Shah&lt;/td&gt;
      &lt;td&gt;28&lt;/td&gt;
      &lt;td&gt;Bowler&lt;/td&gt;
      &lt;td&gt;5.892857&lt;/td&gt;
      &lt;td&gt;15.892857&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1468&lt;/td&gt;
      &lt;td&gt;Jacques Henry Kallis&lt;/td&gt;
      &lt;td&gt;166&lt;/td&gt;
      &lt;td&gt;Allrounder&lt;/td&gt;
      &lt;td&gt;1.759036&lt;/td&gt;
      &lt;td&gt;80.054217&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1548&lt;/td&gt;
      &lt;td&gt;Charles Thomas Biass Turner&lt;/td&gt;
      &lt;td&gt;17&lt;/td&gt;
      &lt;td&gt;Bowler&lt;/td&gt;
      &lt;td&gt;5.941176&lt;/td&gt;
      &lt;td&gt;19.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1748&lt;/td&gt;
      &lt;td&gt;Garfield St Aubrun Sobers&lt;/td&gt;
      &lt;td&gt;93&lt;/td&gt;
      &lt;td&gt;Allrounder&lt;/td&gt;
      &lt;td&gt;2.526882&lt;/td&gt;
      &lt;td&gt;86.365591&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1825&lt;/td&gt;
      &lt;td&gt;Michael John Procter&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;Bowler&lt;/td&gt;
      &lt;td&gt;5.857143&lt;/td&gt;
      &lt;td&gt;32.285714&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1838&lt;/td&gt;
      &lt;td&gt;Robert Graeme Pollock&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
      &lt;td&gt;Batsman&lt;/td&gt;
      &lt;td&gt;0.173913&lt;/td&gt;
      &lt;td&gt;98.086957&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1849&lt;/td&gt;
      &lt;td&gt;Edgar John Barlow&lt;/td&gt;
      &lt;td&gt;30&lt;/td&gt;
      &lt;td&gt;Allrounder&lt;/td&gt;
      &lt;td&gt;1.333333&lt;/td&gt;
      &lt;td&gt;83.866667&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1860&lt;/td&gt;
      &lt;td&gt;Trevor Leslie Goddard&lt;/td&gt;
      &lt;td&gt;41&lt;/td&gt;
      &lt;td&gt;Allrounder&lt;/td&gt;
      &lt;td&gt;3.000000&lt;/td&gt;
      &lt;td&gt;61.365854&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2157&lt;/td&gt;
      &lt;td&gt;Ian Terence Botham&lt;/td&gt;
      &lt;td&gt;102&lt;/td&gt;
      &lt;td&gt;Allrounder&lt;/td&gt;
      &lt;td&gt;3.754902&lt;/td&gt;
      &lt;td&gt;50.980392&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2285&lt;/td&gt;
      &lt;td&gt;Mulvantrai Himmatlal Mankad&lt;/td&gt;
      &lt;td&gt;44&lt;/td&gt;
      &lt;td&gt;Allrounder&lt;/td&gt;
      &lt;td&gt;3.681818&lt;/td&gt;
      &lt;td&gt;47.931818&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2386&lt;/td&gt;
      &lt;td&gt;Imran Khan Niazi&lt;/td&gt;
      &lt;td&gt;88&lt;/td&gt;
      &lt;td&gt;Allrounder&lt;/td&gt;
      &lt;td&gt;4.113636&lt;/td&gt;
      &lt;td&gt;43.261364&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2522&lt;/td&gt;
      &lt;td&gt;George Aubrey Faulkner&lt;/td&gt;
      &lt;td&gt;25&lt;/td&gt;
      &lt;td&gt;Allrounder&lt;/td&gt;
      &lt;td&gt;3.280000&lt;/td&gt;
      &lt;td&gt;70.160000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2741&lt;/td&gt;
      &lt;td&gt;George Joseph Thompson&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;Allrounder&lt;/td&gt;
      &lt;td&gt;3.833333&lt;/td&gt;
      &lt;td&gt;45.500000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2769&lt;/td&gt;
      &lt;td&gt;Sydney Francis Barnes&lt;/td&gt;
      &lt;td&gt;27&lt;/td&gt;
      &lt;td&gt;Bowler&lt;/td&gt;
      &lt;td&gt;7.000000&lt;/td&gt;
      &lt;td&gt;8.962963&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2809&lt;/td&gt;
      &lt;td&gt;Thomas Richardson&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;Bowler&lt;/td&gt;
      &lt;td&gt;6.285714&lt;/td&gt;
      &lt;td&gt;12.642857&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2821&lt;/td&gt;
      &lt;td&gt;John James Ferris&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;Bowler&lt;/td&gt;
      &lt;td&gt;6.777778&lt;/td&gt;
      &lt;td&gt;12.666667&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2845&lt;/td&gt;
      &lt;td&gt;George Alfred Lohmann&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;Bowler&lt;/td&gt;
      &lt;td&gt;6.222222&lt;/td&gt;
      &lt;td&gt;11.833333&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The list is dominated by exceptional all-rounders. Among specialists, bowlers fare better. Perhaps it is my fault that I set the bar for greatness too high. The &lt;code class=&quot;highlighter-rouge&quot;&gt;Bat_Runs_sc&lt;/code&gt; of Bradman is so far ahead of the rest, that it one tends to choose a higher value for y-intercept.&lt;/p&gt;

&lt;p&gt;Finally let us plot &lt;code class=&quot;highlighter-rouge&quot;&gt;Bat_Runs_sc&lt;/code&gt; against predicted playing role using a violin plot. This will shows distribution of runs scored across the multiple categories of playing role. We can see that for batsmen, the bulk of the violin plot is top heavy whereas for the bowlers it is bottom heavy.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;violinplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'predicted_role_rf'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
               &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bat_Runs_sc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'width'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018/04/predicting-the-playing-role-of-a-cricketer-using-machine-learning-part-2/bat-runs-roles-violin-plot.png&quot; alt=&quot;Bat Runs Violin Plot&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;If you review the length of the posts, less than 20% is allocated to running the actual machine learning code. That closely reflects the time spent on this project as well. Bulk of the time is spent in collecting and curating the data. Also the results from RandomForest Classifier is revealing. Right tool for the right job is often more effective than a generic tool which is universally useful.&lt;/p&gt;

&lt;p&gt;Machine Learning and Data science is a vast subject. Despite the length of this post, I have barely touched the surface of this domain. Apart from the knowledge of tools and procedures, one needs to have a good understanding of the data and be conscious of the inherent biases in the numerical models. Errors may creep in during&lt;/p&gt;

&lt;p&gt;Finally, &lt;a href=&quot;http://scikit-learn.org/stable/&quot;&gt;scikit-learn&lt;/a&gt; is an excellent resource for learning and practising Machine learning. It has excellent documentation and helper functions for many of the common tasks. &lt;a href=&quot;https://github.com/jakevdp/PythonDataScienceHandbook/&quot;&gt;Python Data Science Handbook&lt;/a&gt; is another great resource which is available for free.&lt;/p&gt;</content><author><name>thamizh85</name></author><category term="pandas" /><category term="keras" /><category term="machine learning" /><category term="visualization" /><summary type="html">In the previous post we saw how to scrape raw data from a content rich webpage. In this post, we will explore how to process that raw data and use Machine Learning tools to predict the playing role of a cricket player just based on his career statistics. Here are the tools that we will use for this exercise. For interactive data analysis and number crunching: Jupyter Pandas Numpy For visualizing data: Seaborn matplotlib For running Machine Learning models: Tensorflow Keras Scikit-learn Importing data First let us load the necessary modules: import matplotlib.pyplot as plt import pandas as pd import numpy as np import seaborn as sns Import the CSV file which we scraped as a pandas data frame and inspect its contents. data = pd.read_csv('data/players.csv') data.dtypes Bat_100 object Bat_4s object Bat_50 object Bat_6s object Bat_Ave object Bat_BF object Bat_Ct int64 Bat_HS object Bat_Inns object Bat_Mat int64 Bat_NO object Bat_Runs object Bat_SR object Bat_St int64 Bio_Also_known_as object Bio_Batting_style object Bio_Born object Bio_Bowling_style object Bio_Current_age object Bio_Died object Bio_Education object Bio_Fielding_position object Bio_Full_name object Bio_Height object Bio_In_a_nutshell object Bio_Major_teams object Bio_Nickname object Bio_Other object Bio_Playing_role object Bio_Relation object Bowl_10 object Bowl_4w object Bowl_5w object Bowl_Ave object Bowl_BBI object Bowl_BBM object Bowl_Balls object Bowl_Econ object Bowl_Inns object Bowl_Mat int64 Bowl_Runs object Bowl_SR object Bowl_Wkts object dtype: object   We can see that most of the fields are decoded as object data type which is a generic pandas datatype. It gets assigned if our data consists of mixed types such as characters and numerals. There are some obvious numerical fields which are getting detected as string. But before we recast all of them as string, we need to preprocess some of them to extract numeric value out of them. For example, let us inspect Bowl_BBI and Bowl_BBM which stands for best bowling figures in an innings and a match respectively. data[['Bowl_BBI','Bowl_BBM']].head(n=10) Bowl_BBI Bowl_BBM   0 - - 1 3/31 3/31 2 2/35 2/42 3 - - 4 - - 5 - - 6 - - 7 - - 8 6/85 8/58 9 - - Either fields can be made sense as a combination of two independent variables- Best Bowling Wickets &amp;amp; Best Bowling Runs. Similarly when we cast the field Bat_HS as integer, the notout values will be lost since they are suffixed with an asterisk which makes them a string data type. Let us go ahead to fix these potential issues. # Best bowling innings wickets bbi_df = pd.DataFrame(data['Bowl_BBI'].str.replace('-','').str.split('/').tolist(), columns = ['Bowl_BBIW','Bowl_BBIR']) bbm_df = pd.DataFrame(data['Bowl_BBM'].str.replace('-','').str.split('/').tolist(), columns = ['Bowl_BBMW','Bowl_BBMR']) data = data.join([bbi_df,bbm_df]) # Identify numeric columns numeric_cols = ['Bat_100','Bat_4s','Bat_50','Bat_6s','Bat_Ave','Bat_BF', 'Bat_Ct','Bat_HS','Bat_Inns','Bat_Mat','Bat_NO','Bat_Runs', 'Bat_SR','Bat_St','Bowl_10','Bowl_4w','Bowl_5w','Bowl_Ave', 'Bowl_Balls','Bowl_Econ','Bowl_Inns','Bowl_Mat','Bowl_Runs', 'Bowl_SR', 'Bowl_Wkts','Bowl_BBIW','Bowl_BBIR','Bowl_BBMW','Bowl_BBMR'] # regex replace * in High scores data['Bat_HS'] = data['Bat_HS'].replace(r'\*$','',regex=True) data[numeric_cols] = data[numeric_cols].replace('-',0) data[numeric_cols] = data[numeric_cols].apply(pd.to_numeric, errors='coerce') data[numeric_cols] = data[numeric_cols].fillna(0) If we check the data type again, we will see that all the numerical fields are interpreted as int or float datatype as expected. Be careful when filling NaN with zeroes. Idea is not to introduce false values in to the dataset. In this case, a value of zero is neutral since it represents the same value as absent numbers. But for certain types of data, such as temperature, zero introduces a false value in to the data set since temperature values can be less than zero. Pre-processing Deriving new features When using data in our models we have to understand the units in which they are represented. Not all features are directly comparable. For instance, Average &amp;amp; Strike rates are already averaged over the number of matches that a player plays. But other aggregate statistics aren’t. So in effect it would be meaningless to compare run tally of a player who has played only 10 matches with that of another who has played a hundred matches. To understand better, let us plot runs scored vs the matches played. sns.jointplot(x=&quot;Bat_Runs&quot;, y=&quot;Bat_Inns&quot;, data=data) Obviously there is a strong correlation between no. of matches played and no. of runs scored. Ideally we want our features to be as independent of each other as possible. To separate the influence of number of matches played on the batting runs feature, we will divide the aggregate statistics by number of matches played. # select aggregate stats such as no. of hundreds, runs scored etc., bat_features_raw = ['Bat_100', 'Bat_4s', 'Bat_50', 'Bat_6s', 'Bat_BF', 'Bat_Ct', 'Bat_NO', 'Bat_Runs','Bat_St'] # column names for scaled features bat_features_scaled = ['Bat_100_sc', 'Bat_4s_sc', 'Bat_50_sc', 'Bat_6s_sc', 'Bat_BF_sc', 'Bat_Ct_sc', 'Bat_NO_sc', 'Bat_Runs_sc','Bat_St_sc'] # leave aside match and innings count and other aggregate stats such as best bowling figures, strike rate and average bowl_features_raw = ['Bowl_10', 'Bowl_4w', 'Bowl_5w', 'Bowl_Balls', 'Bowl_Runs','Bowl_Wkts'] # column names for scaled features bowl_features_scaled = ['Bowl_10_sc', 'Bowl_4w_sc', 'Bowl_5w_sc', 'Bowl_Balls_sc', 'Bowl_Runs_sc','Bowl_Wkts_sc'] # divide by innings count since it is more relevant than match count data[bat_features_scaled] = data[bat_features_raw].apply(lambda x: x/data['Bat_Inns']) data[bowl_features_scaled] = data[bowl_features_raw].apply(lambda x: x/data['Bowl_Inns']) # these are the meaningful features which will be the input for our model. features = ['Bat_Ave','Bat_HS', 'Bat_SR'] + bat_features_scaled + ['Bowl_Ave','Bowl_Econ','Bowl_SR','Bowl_BBIW', 'Bowl_BBIR', 'Bowl_BBMW', 'Bowl_BBMR'] + bowl_features_scaled # fill numerical features with zero data[features] = data[features].fillna(0) It can be argued that averaging the runs scored duplicates the batting average feature. Leaving aside subtle differences in the way in which batting averages are calculated, we would still keep both features to see how our model learns the difference in both the features and assigns weight accordingly. Now let us plot the scaled runs scored value vs the innings played. sns.jointplot(x=&quot;Bat_Runs_sc&quot;, y=&quot;Bat_Inns&quot;, data=data) Clearly this is a far better representation of batting capabilities of a player. You can see there is less dependency on the number of innings played. It is not hard to imagine how this scaling affects our final prediction. The impact is obvious when we plot batting runs and bowling wickets (likely to be the most important features) in a KDE plot. Here is the KDE plot before scaling: sns.jointplot(x=&quot;Bowl_Wkts&quot;, y=&quot;Bat_Runs&quot;, data=df,kind='kde') There is no clear clustering indicating that our classification is not going to be effective. In comparison, if we generate the same chart for scaled values, there is a clear grouping. sns.jointplot(x=&quot;Bowl_Wkts_sc&quot;, y=&quot;Bat_Runs_sc&quot;, data=df,kind='kde') This much more promising. Remember, your model will only perform as well as the data you feed in. If the input data is already confused, there is very little a mathematical model can do. Now that we have almost all that we need we will extract those records that have playing role information and use it for our training &amp;amp; testing. To avoid outliers corrupting our model, we will also exclude players who played less than 5 matches. # remove players who played less than 5 matches df = data[data['Bio_Playing_role'].notnull() &amp;amp; (data['Bat_Mat'] &amp;gt; 5)] Data Transformation Next let us look at our target feature which is playing role. We need to understand the values it can assume. Let us look at the unique values for the player features. # Check the unique playing roles to identify mapping function data['Bio_Playing_role'].unique() array([nan, 'Top-order batsman', 'Bowler', 'Middle-order batsman', 'Wicketkeeper batsman', 'Allrounder', 'Batsman', 'Opening batsman', 'Wicketkeeper', 'Bowling allrounder', 'Batting allrounder'], dtype=object) The playing role definiton is too granular. We want fewer variety of roles so that each role gets sufficient sample data points to train the model. Also the role tagging done by Cricinfo is not consistent. For e.g., not all opening batsmen have been tagged with the opening batsman role. So we define a mapping function to group playing roles in to 4 different categories ['Batsman','Bowler','Wicketkeeper','Allrounder'] def get_role(role): if pd.notnull(role): if 'keeper' in role: return &quot;Wicketkeeper&quot; elif 'rounder' in role: return &quot;Allrounder&quot; elif 'atsman' in role: return &quot;Batsman&quot; elif 'owler' in role: return &quot;Bowler&quot; else: return &quot;&quot; else: return &quot;&quot; data['role'] = data['Bio_Playing_role'].apply(get_role) Note that this feature is a categorical data. It is different from a numerical data such as height or weight. When we want to use Deep Neural Networks we need to represent the target features as numerical data. We will assign one column for each playing role and set its value to one when that playing role fits the player well. Then the function of our model will be to assign a value close to 1 for one of these columns and a value close to 0 for the rest. It is called One-Hot encoding. Turns out this is a frequent task, so pandas has a handy inbuilt function to perform this. # y is categorical feature y = df['role'] # Convert categorical data into numerical columns y_cat = pd.get_dummies(y) # X is the input features. We need to covert it from pandas dataframe to numpy array to feed in to our models X = df[features].as_matrix() Let us see the new y_cat dataframe y_cat.head()   Allrounder Batsman Bowler Wicketkeeper 19 0 1 0 0 20 0 0 1 0 22 0 0 0 1 25 1 0 0 0 28 0 1 0 0 One might be tempted to assign unique numbers for each category ( say 1: Batsman, 2: Bowler etc.,) but that will not work. There is no quantitative relation between categories. Assigning raw numbers implies that there is a numerical progression to the categories. Sometimes it can work for contiguous data such as day of the month, but even then one has to be aware of the bounds and circularity of the target variables. Scaling data Some fields vary over a larger range compared to the rest. Remember we did a preliminary scaling by dividing these values with the number of innings. But that is not sufficient since it only made sure that one feature (‘no. of innings’) did not overtly influence another feature (‘runs scored’). But each features themselves lie between different extremities. For e.g, Bowling Wickets Scaled only ranges from 0 to 5 whereas Batting Runs Scaled ranges from 0 to 50. Most machine learning models works the best when the features are vary within the same range. If we let these datapoints influence our calculation without modification, wickets taken will have negligible influence. So we perform another round of scaling for all input data points. We will use the MinMax Scaler from Scikit library. This will scale the values such that largest value becomes one and smallest value becomes zero. from sklearn.preprocessing import MinMaxScaler mms = MinMaxScaler(feature_range=(0,1)).fit(X) # X_mms will our new input array with all values scaled to be between 0 and 1 X_mms = mms.transform(X) Training the model Deep Neural Network First we will try to run a Deep Neural Network model on this data. Here are the necessary modules to import. from keras.models import Sequential from keras.layers import Dense from keras.optimizers import SGD, Adam, Adadelta, RMSprop from keras.wrappers.scikit_learn import KerasClassifier import keras.backend as K Create the Keras Sequential model. I am using a DNN with 1 hidden layer and 1 output layer. The hidden layer has 15 nodes. The number of nodes in the output layer should as the number of categories. So we will go with 4. def create_baseline(): # create model model = Sequential() model.add(Dense(15, input_dim=25, kernel_initializer='he_normal', activation='relu')) model.add(Dense(4, kernel_initializer='he_normal', activation='softmax')) # Compile model model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy']) return model The softmax is a popular activation function for classification problems. In simple words, an activation function is a simple function that decides whether to output TRUE or FALSE for each category. This softmax function receives an array of values from the previous layer and returns a new array which adds up to 1. The category with the largest value is deemed likely match for our data. Softmax highlights only the likeliest category for a data. Here for simplicity sake, we assume that our categories are mutually exclusive, i.e, a player can only belong to one category at a time. There are other data types where a single entry can belong to more than one category at a time. We may need to use different activation function for that. Again, know your data before deciding on activation function. The loss function is categorical_crossentropy. A Loss Function can be thought of as a course correction function which measures the perceived error as our model navigates to ideal set of weights over multiple iterations. Categorical Cross-Entropy loss function penalizes weights that are sure to be wrong. It is a common loss function used for classification problems. These are the important attributes that closely follows our problem definition. Most of the other parameters can be fiddled with. Next we will use Keras to train the model. The result is a Keras Classifier function whose weights are trained on our data. We can use this function to predict values for inputs which we haven’t seen so far. # evaluate model with standardized dataset estimator = KerasClassifier(build_fn=create_baseline, nb_epoch=100, batch_size=5, verbose=0) We cannot use all of the data to train our model. The model will closely follow our existing model. It won’t be useful to predict any values we haven’t seen so far. This is called overfitting. Example of overfitting - Source Wikipedia To avoid this, we will split the data into train and test datasets. We will use the former to train the model and compute the scores based on the testing against test data for each iteration of cross-validation. Scikit’s provides a helper function called cross_val_score to assist in this. StratifiedKFold is the genertor strategy we will use for selecting this train/test datasets. It splits the data into K folds (set to 10 in our case), trains it on K-1 datasets and tests it against the left out dataset, while preserving the class distribution of the data. # set the random state to a fixed number for reproducing the results kfold = StratifiedKFold(n_splits=10, shuffle=True,random_state=42) results = cross_val_score(estimator, X_mms, y.values, cv=kfold) print(&quot;Results: %.2f%% (%.2f%%)&quot; % (results.mean()*100, results.std()*100)) I got a result of 82.2% accuracy. Not bad for the first attempt, particularly since we employed gross simplifications and trained the model with only with around 450 records. The results that you get may be slightly different since we shuffle the data before generating folds. Random Forest Classifier This time let us try to model the data using Random Forest classifier. Random Forest Classifier is a much simpler method than neural networks. It relies on building multiple decision trees and assembling the results of these decision trees. from sklearn.ensemble import RandomForestClassifier # Instantiate model with 1000 decision trees rf_estimator = RandomForestClassifier(n_estimators = 1000, random_state = 42) rf_results = cross_val_score(rf_estimator, X_mms, y.values, cv=kfold) print(&quot;Results: %.2f%% (%.2f%%)&quot; % (rf_results.mean()*100, rf_results.std()*100)) You will notice that Random Forest Classifier has performed significantly better than the DNN classifier. I got 87.28% accuracy, which is amazing since Random Forest is several times faster and less resource intensive than the DNN classifier. And I didn’t even have to run it on top of tensorflow and make use of GPU. Decision trees are quite effective at classification tasks but they tend to overfit. Reviewing the results Since our Random Forest model has performed significantly better, we will use that model to predict the unseen roles of players. # Fit the estimator on available data rf_estimator.fit(X_mms, y.values) # np array to hold all of the input data P = data[features].as_matrix() # An ugly hack to drop infinity values introduced as part of some of the pre-processing tasks P[P &amp;gt; 1e308] = 0 # Min Max Scaling P_mms = min_max_scaler.fit_transform(P) # Prediction based on the Random forest model data['predicted_role_rf'] = rf_estimator.predict(P_mms) Confusion Matrix A score alone is not a good indicator that our model has performed well. We need to review its performance by plotting Confusion Matrix. It is a simple matrix plot based on known test data with predicted values plotted against the true value. The diagonal entries represent correct prediction, rest represents confused values. Let us plot Confusin Matrix for our data. from sklearn.metrics import confusion_matrix mat = confusion_matrix(data[(data['role']!='')]['role'], data[(data['role']!='')]['predicted_role_rf'], labels = ['Batsman','Bowler','Allrounder','Wicketkeeper']) sns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False) plt.xlabel('true label') plt.ylabel('predicted label') We can see that the model is quite effective in matching the pure roles such as Batsman or Bowler. When it comes to mixed roles such as Allrounder or Wicketkeeper, it fares not that well. Part of the problem lies in our assumption that the roles are mutually exclusive i.e, a player cannot be both Batsman and Bowler at the same time. So we identify only around 37% of the all rounders succesfully. Later we will see that there are other reasons why the predicted role doesn’t match the role marked in cricinfo. Reviewing the results Let us see the cases where our predictions differed from the roles defined in cricinfo: data[(data['role'] != data['predicted_role_rf']) &amp;amp; (data['role'] != '') &amp;amp; (data['Bat_Mat'] &amp;gt; 5 )][['Bio_Full_name','predicted_role_rf', 'role', 'Bio_Playing_role']] I have extracted the differences for popular players of recent times. Subjectively speaking our model hasn’t performed too bad. There seems to be some merit to the classification offered by the model compared to the playing role assigned in cricinfo bio page.   Bio_Full_name predicted_role_rf role Bio_Playing_role 38 Stephen Norman John O’Keefe Bowler Allrounder Allrounder 44 Glenn James Maxwell Batsman Allrounder Batting allrounder 88 Andrew Symonds Batsman Allrounder Allrounder 227 Shai Diego Hope Batsman Wicketkeeper Wicketkeeper batsman 281 Brendon Barrie McCullum Batsman Wicketkeeper Wicketkeeper batsman 970 Angelo Davis Mathews Batsman Allrounder Allrounder 1437 Abraham Benjamin de Villiers Batsman Wicketkeeper Wicketkeeper batsman In most cases, Cricinfo’s playing role is also based on the ODI and T20 formats. Some of the players like ABD Villiers and Brendon McCullum have donned multiple roles but given up gloves for the games longest format. So we can’t really fault the model here for identifying them as batsman. Then there are other cases of a player being regarded as All rounder based on the role they play in shorter formats. Next to the most interesting part- let us see how our model behaves for the data it hasn’t seen i.e., the classification of those players whose playing role is missing in their bio page. For ease of identification, I have filtered only those players who have played 100 matches or more. data[(data['role'] != data['predicted_role_rf']) &amp;amp; (data['role'] == '') &amp;amp; (data['Bat_Mat'] &amp;gt; 100 )][['Bio_Full_name','predicted_role_rf', 'role', 'Bio_Playing_role']] Bio_Full_name predicted_role_rf role Bio_Playing_role   134 Mark Edward Waugh Batsman   NaN 137 Mark Anthony Taylor Batsman   NaN 139 Ian Andrew Healy Wicketkeeper   NaN 599 Sourav Chandidas Ganguly Batsman   NaN 743 Anil Kumble Bowler   NaN 925 Brian Charles Lara Batsman   NaN 929 Carl Llewellyn Hooper Batsman   NaN 937 Courtney Andrew Walsh Bowler   NaN 957 Desmond Leo Haynes Batsman   NaN 1072 Kapildev Ramlal Nikhanj Bowler   NaN 1074 Dilip Balwant Vengsarkar Batsman   NaN 1088 Sunil Manohar Gavaskar Batsman   NaN 1257 Cuthbert Gordon Greenidge Batsman   NaN 1258 Isaac Vivian Alexander Richards Batsman   NaN 1284 Clive Hubert Lloyd Batsman   NaN 1326 Warnakulasuriya Patabendige Ushantha Joseph Chaminda Vaas Bowler   NaN 1463 Makhaya Ntini Bowler   NaN 1474 Gary Kirsten Batsman   NaN 1676 Alec James Stewart Batsman   NaN 2020 Inzamam-ul-Haq Batsman   NaN 2168 Graham Alan Gooch Batsman   NaN 2205 Wasim Akram Bowler   NaN 2216 Saleem Malik Batsman   NaN 2320 Geoffrey Boycott Batsman   NaN 2366 Michael Colin Cowdrey Batsman   NaN 2381 Mohammad Javed Miandad Khan Batsman   NaN Even a cursory look can tell us that our model worked splendidly. It is surprising how many prominent player bio pages has their playing role information missing. Well, it looks like even a simple ML model can fix that gap. Let us see how the two most critical features (Bat_Runs_sc and Bowl_Wkts_sc) affects our predicted role. sns.set_palette(&quot;bright&quot;) sns.lmplot('Bowl_Wkts_sc','Bat_Runs_sc',data[data['Bat_Mat'] &amp;gt; 5 ], hue='predicted_role_rf', fit_reg=False, size=10) plt.plot([0,7.0],[100,0]) I have plotted a diagonal line, below which most of the points are clustered. It represents a kind of pareto-frontier which only exceptional players can breach. Note that there is no statistical basis for my choice of x and y intercepts, I just based it on visual inspection. Let us see the list of players who reside above this threshold. data[data['Bat_Mat'] &amp;gt; 5].query('Bowl_Wkts_sc*100 + Bat_Runs_sc*7 &amp;gt; 700 ')[['Bio_Full_name','Bat_Mat','predicted_role_rf','Bowl_Wkts_sc','Bat_Runs_sc']] Bio_Full_name Bat_Mat predicted_role_rf Bowl_Wkts_sc Bat_Runs_sc   62 Steven Peter Devereux Smith 59 Batsman 0.288136 98.237288 377 Ravindrasinh Anirudhsinh Jadeja 35 Bowler 4.714286 33.600000 380 Ravichandran Ashwin 55 Bowler 5.527273 37.363636 456 Christopher Lance Cairns 62 Allrounder 3.516129 53.548387 526 Shakib Al Hasan 51 Allrounder 3.686275 70.470588 720 Sikandar Raza Butt 9 Allrounder 1.444444 84.111111 832 Donald George Bradman 52 Batsman 0.038462 134.538462 1133 Herbert Vivian Hordern 7 Bowler 6.571429 36.285714 1177 Richard John Hadlee 86 Bowler 5.011628 36.325581 1240 Yasir Shah 28 Bowler 5.892857 15.892857 1468 Jacques Henry Kallis 166 Allrounder 1.759036 80.054217 1548 Charles Thomas Biass Turner 17 Bowler 5.941176 19.000000 1748 Garfield St Aubrun Sobers 93 Allrounder 2.526882 86.365591 1825 Michael John Procter 7 Bowler 5.857143 32.285714 1838 Robert Graeme Pollock 23 Batsman 0.173913 98.086957 1849 Edgar John Barlow 30 Allrounder 1.333333 83.866667 1860 Trevor Leslie Goddard 41 Allrounder 3.000000 61.365854 2157 Ian Terence Botham 102 Allrounder 3.754902 50.980392 2285 Mulvantrai Himmatlal Mankad 44 Allrounder 3.681818 47.931818 2386 Imran Khan Niazi 88 Allrounder 4.113636 43.261364 2522 George Aubrey Faulkner 25 Allrounder 3.280000 70.160000 2741 George Joseph Thompson 6 Allrounder 3.833333 45.500000 2769 Sydney Francis Barnes 27 Bowler 7.000000 8.962963 2809 Thomas Richardson 14 Bowler 6.285714 12.642857 2821 John James Ferris 9 Bowler 6.777778 12.666667 2845 George Alfred Lohmann 18 Bowler 6.222222 11.833333 The list is dominated by exceptional all-rounders. Among specialists, bowlers fare better. Perhaps it is my fault that I set the bar for greatness too high. The Bat_Runs_sc of Bradman is so far ahead of the rest, that it one tends to choose a higher value for y-intercept. Finally let us plot Bat_Runs_sc against predicted playing role using a violin plot. This will shows distribution of runs scored across the multiple categories of playing role. We can see that for batsmen, the bulk of the violin plot is top heavy whereas for the bowlers it is bottom heavy. sns.violinplot(x='predicted_role_rf', y='Bat_Runs_sc', data=data, scale='width') Conclusion If you review the length of the posts, less than 20% is allocated to running the actual machine learning code. That closely reflects the time spent on this project as well. Bulk of the time is spent in collecting and curating the data. Also the results from RandomForest Classifier is revealing. Right tool for the right job is often more effective than a generic tool which is universally useful. Machine Learning and Data science is a vast subject. Despite the length of this post, I have barely touched the surface of this domain. Apart from the knowledge of tools and procedures, one needs to have a good understanding of the data and be conscious of the inherent biases in the numerical models. Errors may creep in during Finally, scikit-learn is an excellent resource for learning and practising Machine learning. It has excellent documentation and helper functions for many of the common tasks. Python Data Science Handbook is another great resource which is available for free.</summary></entry><entry><title type="html">Predicting the playing role of a cricketer using Machine Learning (Part 1)</title><link href="http://localhost:4000/machine%20learning/2018/04/23/2018-04-23-predicting-the-playing-role-of-a-cricketer-using-machine-learning-part-1/" rel="alternate" type="text/html" title="Predicting the playing role of a cricketer using Machine Learning (Part 1)" /><published>2018-04-23T12:00:00+08:00</published><updated>2018-04-23T12:00:00+08:00</updated><id>http://localhost:4000/machine%20learning/2018/04/23/2018-04-23-predicting-the-playing-role-of-a-cricketer-using-machine-learning-part-1</id><content type="html" xml:base="http://localhost:4000/machine%20learning/2018/04/23/2018-04-23-predicting-the-playing-role-of-a-cricketer-using-machine-learning-part-1/">&lt;p&gt;In this project, we will apply Machine Learning techniques to predict whether a particular cricket player is a batsman or bowler based on his career stats. First we will use Deep Neural Networks (DNN) model and later compare the results with a simpler classifier algorithm such as Random Forest Classifier.&lt;/p&gt;

&lt;p&gt;For the uninitiated, Cricket is a game of bat and ball, much similar to baseball. Cricket players have different roles to play in a game. Batsman’s role is to score runs while not losing their wicket, bowlers role is to get the batsman’s wicket while restricting their run score in due process. Allrounders can do both batting and bowling role well. A wicketkeeper is a specialist role whose purpose is to catch behind the wickets during the bowling innings. If you really intend to understand tne data behind this exercise, my half-baked explanations are barely sufficient. I suggest to refer to better reference such as &lt;a href=&quot;https://www.britannica.com/sports/cricket-sport&quot;&gt;this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For the sake of consistency, we will consider only test players. Apart from being a puritan choice, the playing role of a player may differ from format to format and so we can’t expect a consistent prediction. The cricinfo player bio page has this &lt;code class=&quot;highlighter-rouge&quot;&gt;playing role&lt;/code&gt; information, but that covers only around 20% of the test players. For vast majority of players we only have numerical stats but no description whether the player is a batsman or a bowler.&lt;/p&gt;

&lt;p&gt;This is a perfect problem for ML to assist. We have a decent amount of training data (600+ players) and good amount of features (statistics) to base our prediction on. It would also be interesting to observe which features are relevant to our consideration of a player as batsman or bowler.&lt;/p&gt;

&lt;p&gt;This is by no means a comprehensive tutorial for ML. The goal of this post is to serve as gentle introduction and wet the appetite for newcomers. So in the process, I would cover the following areas:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Data collection&lt;/li&gt;
  &lt;li&gt;Data processing&lt;/li&gt;
  &lt;li&gt;Machine Learning&lt;/li&gt;
  &lt;li&gt;Data visualization&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;data-collection&quot;&gt;Data Collection&lt;/h2&gt;
&lt;p&gt;Most ML examples work with pre-processed data but in reality data is seldom available prepackaged. For this problem, we will have to scrape the data off cricinfo website. We will use Scrapy for getting this info off cricinfo website.&lt;/p&gt;

&lt;p&gt;The Scrapy tool is well-documented and has some nice tutorials to get started. However I will attempt my own brief introduction.&lt;/p&gt;

&lt;p&gt;To start we create a project as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scrapy startproject &amp;lt;project_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will create the necessary folder structure. It will also create some boilerplate code which we can customize to our will later on.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The default folder structure creates a parent folder and child folder with the same name. Do not get confused. All Scrapy commands are executed in the parent folder (where )&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ultimately our objective is to perform a web scraping using &lt;code class=&quot;highlighter-rouge&quot;&gt;scrapy crawl&lt;/code&gt; command which looks like the one below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd &amp;lt;project_name&amp;gt;
Scrapy crawl &amp;lt;spider_name&amp;gt; -o &amp;lt;file_name&amp;gt;.csv
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In this command, the &lt;code class=&quot;highlighter-rouge&quot;&gt;spider_name&lt;/code&gt; is the name attribute of a spider class. This spider class file should be located under the spiders directory (&lt;project_name&gt;/&lt;project_name&gt;/spiders/*.py). The `file_name` is the output file name, csv being our chosen export format. Let us see the steps involved in reaching to this stage.&lt;/project_name&gt;&lt;/project_name&gt;&lt;/p&gt;

&lt;h3 id=&quot;spider-class&quot;&gt;Spider class&lt;/h3&gt;
&lt;p&gt;Start with the skeleton code required for scraping. Here is the skeleton spider class file we will use:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Scrapy&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CricinfoSpider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scrapy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Spider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;players&quot;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;start_urls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# list of starting urls&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# do some fancy web scraping&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;The file name of this python class is arbitrary&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The spiders directory can contain multiple python file each implementing its own spider logic. The spider name attribute should be unique across all these files.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A Spider class should contain the following:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;name attribute to be called from the Scrapy command line&lt;/li&gt;
  &lt;li&gt;start_urls is a list holding the URLS which act as the starting pages of our scraping.&lt;/li&gt;
  &lt;li&gt;parse function which performs the grunt of scraping the data. The parse function can also recursively call itself to scrape more pages or it can also have a callback function which can be further customized.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The starting page for our scraping should be the one containing links to all player profile pages. In cricinfo, there is no such global directory. However there is a page for players who represented a country. The URL is like this&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://www.espncricinfo.com/ci/content/player/caps.html?country=1;class=1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice the &lt;a href=&quot;http://www.ronstauffer.com/blog/understanding-a-url/&quot;&gt;parameters&lt;/a&gt; in the URL which we can manipulate to enumerate all test playing nations. The class parameter represents the game type- for test matches it is 1. Since the list of test playing nations is only a handful, I manually determined that the country code for test playing nations are 1 to 10 and 25 (25 is for Bangladesh, the latest addition to test playing nations). Armed with this info, we can define our start_urls as follows:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;start_urls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'http://www.espncricinfo.com/ci/content/player/caps.html?country={0};class=1'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;During a scraping process, Scrapy will issue a GET request to each one of these start_urls. If we get a valid HTTP 200 response, the response body will be passed on to parse function.&lt;/p&gt;

&lt;h3 id=&quot;parse-function&quot;&gt;Parse function:&lt;/h3&gt;
&lt;p&gt;The parse function receives the response object and extracts useful info from it. Our starting page doesn’t have the data that we need but contains the links to the player stats page which is what we want. So we will extract the links to player stats page and define another parse function to extract the statistics.&lt;/p&gt;

&lt;p&gt;To extract the links, we will use CSS selectors. Looking at the source code of the page, we can see that all links to player stats has a class name of &lt;code class=&quot;highlighter-rouge&quot;&gt;ColumnistSmry&lt;/code&gt;. But that is not enough to uniquely identify player links since match links also has the same class name. We can further filter by matching the target URL which is expected to contain the string “player”. So our CSS selector for extracting relevant URLs would be:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;response.css('a.ColumnistSmry[href*=&quot;player&quot;]::attr(href)') 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once we extract the link, Scrapy provides a handy &lt;code class=&quot;highlighter-rouge&quot;&gt;response.follow&lt;/code&gt; function which navigates to the extracted link and can execute a callback function. This callback function will handle all our stats extraction since it will work directly with the player stats page. At this point, rest of the code is just a matter of studying the source code and extracting features using css selectors.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#follow player links&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;href&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a.ColumnistSmry[href*=&quot;player&quot;]::attr(href)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;follow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse_player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;player&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PlayerItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.ciPlayerinformationtxt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tables&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'.engineTable'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'span::text'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'b::text'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;batting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;batting_keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;batting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'th::text'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;batting_values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;batting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'tr.data1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'td::text'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;batting_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;bowling&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bowling_keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bowling&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'th::text'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bowling_values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bowling&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'tr.data1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'td::text'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bowling_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Bio_'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title_clean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;batting_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;batting_values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Bat_'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title_clean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bowling_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bowling_values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Bowl_'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title_clean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;player&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you find it difficult to define appropriate CSS selector for any element, you can always use inspector tool from Developer tools in Chrome or firefox. You can right click on the interesting code block and copy CSS selector or Xpath (Xpath is also supported in Scrapy)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;items-class&quot;&gt;Items Class:&lt;/h3&gt;
&lt;p&gt;In the parse function, you can note that I am updating the parsed information in to a class called &lt;code class=&quot;highlighter-rouge&quot;&gt;PlayerItem()&lt;/code&gt;. It is an instance of Scrapy.Item class and its attributes are defined in items.py file. Here is a brief snippet of my &lt;code class=&quot;highlighter-rouge&quot;&gt;items.py&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Scrapy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Field&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PlayerItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# define the fields for your item here like:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Bio_Full_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Bio_Born&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Bio_Current_age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Bio_Major_teams&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Bio_Playing_role&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You don’t have to always use a Item class. One can simply yield the values from parse function and it will output to CSV just fine. However without an Item class, the fields of the CSV file is determined by the fields in the first record processed. Any new field that may appear in subsequent scraped records will be silently dropped. For that reason, it is preferrable to define the structure of our parsed data ahead using an Item class.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Finally we can save the result of our hardwork to a precocious CSV file and guard it (Just kidding… If you lose or corrupt the file, just delete it and scrape again! ).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scrapy crawl players -o players.csv
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In the next post we will look at pre-processing this data for our machine learning work. To learn more about Scrapy, do head to its official site. The documentation is excellent and once you grasp hold of the structure, rest falls in to place quite easily.&lt;/p&gt;</content><author><name>thamizh85</name></author><category term="python" /><category term="Scrapy" /><category term="web-scraping" /><summary type="html">In this project, we will apply Machine Learning techniques to predict whether a particular cricket player is a batsman or bowler based on his career stats. First we will use Deep Neural Networks (DNN) model and later compare the results with a simpler classifier algorithm such as Random Forest Classifier. For the uninitiated, Cricket is a game of bat and ball, much similar to baseball. Cricket players have different roles to play in a game. Batsman’s role is to score runs while not losing their wicket, bowlers role is to get the batsman’s wicket while restricting their run score in due process. Allrounders can do both batting and bowling role well. A wicketkeeper is a specialist role whose purpose is to catch behind the wickets during the bowling innings. If you really intend to understand tne data behind this exercise, my half-baked explanations are barely sufficient. I suggest to refer to better reference such as this. For the sake of consistency, we will consider only test players. Apart from being a puritan choice, the playing role of a player may differ from format to format and so we can’t expect a consistent prediction. The cricinfo player bio page has this playing role information, but that covers only around 20% of the test players. For vast majority of players we only have numerical stats but no description whether the player is a batsman or a bowler. This is a perfect problem for ML to assist. We have a decent amount of training data (600+ players) and good amount of features (statistics) to base our prediction on. It would also be interesting to observe which features are relevant to our consideration of a player as batsman or bowler. This is by no means a comprehensive tutorial for ML. The goal of this post is to serve as gentle introduction and wet the appetite for newcomers. So in the process, I would cover the following areas: Data collection Data processing Machine Learning Data visualization Data Collection Most ML examples work with pre-processed data but in reality data is seldom available prepackaged. For this problem, we will have to scrape the data off cricinfo website. We will use Scrapy for getting this info off cricinfo website. The Scrapy tool is well-documented and has some nice tutorials to get started. However I will attempt my own brief introduction. To start we create a project as follows: scrapy startproject &amp;lt;project_name&amp;gt; This will create the necessary folder structure. It will also create some boilerplate code which we can customize to our will later on. The default folder structure creates a parent folder and child folder with the same name. Do not get confused. All Scrapy commands are executed in the parent folder (where ) Ultimately our objective is to perform a web scraping using scrapy crawl command which looks like the one below: cd &amp;lt;project_name&amp;gt; Scrapy crawl &amp;lt;spider_name&amp;gt; -o &amp;lt;file_name&amp;gt;.csv In this command, the spider_name is the name attribute of a spider class. This spider class file should be located under the spiders directory (//spiders/*.py). The `file_name` is the output file name, csv being our chosen export format. Let us see the steps involved in reaching to this stage. Spider class Start with the skeleton code required for scraping. Here is the skeleton spider class file we will use: import Scrapy class CricinfoSpider(Scrapy.Spider): name = &quot;players&quot; start_urls = [ # list of starting urls ] def parse(self, response): # do some fancy web scraping pass The file name of this python class is arbitrary The spiders directory can contain multiple python file each implementing its own spider logic. The spider name attribute should be unique across all these files. A Spider class should contain the following: name attribute to be called from the Scrapy command line start_urls is a list holding the URLS which act as the starting pages of our scraping. parse function which performs the grunt of scraping the data. The parse function can also recursively call itself to scrape more pages or it can also have a callback function which can be further customized. The starting page for our scraping should be the one containing links to all player profile pages. In cricinfo, there is no such global directory. However there is a page for players who represented a country. The URL is like this http://www.espncricinfo.com/ci/content/player/caps.html?country=1;class=1 Notice the parameters in the URL which we can manipulate to enumerate all test playing nations. The class parameter represents the game type- for test matches it is 1. Since the list of test playing nations is only a handful, I manually determined that the country code for test playing nations are 1 to 10 and 25 (25 is for Bangladesh, the latest addition to test playing nations). Armed with this info, we can define our start_urls as follows: start_urls = ['http://www.espncricinfo.com/ci/content/player/caps.html?country={0};class=1'.format(str(x)) for x in list(range(1,10))+[25]] During a scraping process, Scrapy will issue a GET request to each one of these start_urls. If we get a valid HTTP 200 response, the response body will be passed on to parse function. Parse function: The parse function receives the response object and extracts useful info from it. Our starting page doesn’t have the data that we need but contains the links to the player stats page which is what we want. So we will extract the links to player stats page and define another parse function to extract the statistics. To extract the links, we will use CSS selectors. Looking at the source code of the page, we can see that all links to player stats has a class name of ColumnistSmry. But that is not enough to uniquely identify player links since match links also has the same class name. We can further filter by matching the target URL which is expected to contain the string “player”. So our CSS selector for extracting relevant URLs would be: response.css('a.ColumnistSmry[href*=&quot;player&quot;]::attr(href)') Once we extract the link, Scrapy provides a handy response.follow function which navigates to the extracted link and can execute a callback function. This callback function will handle all our stats extraction since it will work directly with the player stats page. At this point, rest of the code is just a matter of studying the source code and extracting features using css selectors. def parse(self,response): #follow player links for href in response.css('a.ColumnistSmry[href*=&quot;player&quot;]::attr(href)'): yield response.follow(href, self.parse_player) def parse_player(self, response): player = PlayerItem() d = {} info = response.css(&quot;.ciPlayerinformationtxt&quot;) tables = response.css('.engineTable') values = [i.css('span::text').extract() for i in info] keys = [i.css('b::text').extract() for i in info] batting = tables[0] batting_keys = batting.css('th::text').extract() batting_values = batting.css('tr.data1')[0].css('td::text').extract()[-len(batting_keys):] bowling = tables[1] bowling_keys = bowling.css('th::text').extract() bowling_values = bowling.css('tr.data1')[0].css('td::text').extract()[-len(bowling_keys):] for item in zip(keys, values): key = 'Bio_' + self.title_clean(item[0][0]) player[key] = self.clean(item[1]) for item in zip(batting_keys, batting_values): key = 'Bat_' + self.title_clean(item[0]) player[key] = self.clean(item[1]) for item in zip(bowling_keys, bowling_values): key = 'Bowl_' + self.title_clean(item[0]) player[key] = self.clean(item[1]) return player If you find it difficult to define appropriate CSS selector for any element, you can always use inspector tool from Developer tools in Chrome or firefox. You can right click on the interesting code block and copy CSS selector or Xpath (Xpath is also supported in Scrapy) Items Class: In the parse function, you can note that I am updating the parsed information in to a class called PlayerItem(). It is an instance of Scrapy.Item class and its attributes are defined in items.py file. Here is a brief snippet of my items.py file. from Scrapy import Item, Field class PlayerItem(Item): # define the fields for your item here like: Bio_Full_name = Field() Bio_Born = Field() Bio_Current_age = Field() Bio_Major_teams = Field() Bio_Playing_role = Field() You don’t have to always use a Item class. One can simply yield the values from parse function and it will output to CSV just fine. However without an Item class, the fields of the CSV file is determined by the fields in the first record processed. Any new field that may appear in subsequent scraped records will be silently dropped. For that reason, it is preferrable to define the structure of our parsed data ahead using an Item class. Conclusion Finally we can save the result of our hardwork to a precocious CSV file and guard it (Just kidding… If you lose or corrupt the file, just delete it and scrape again! ). scrapy crawl players -o players.csv In the next post we will look at pre-processing this data for our machine learning work. To learn more about Scrapy, do head to its official site. The documentation is excellent and once you grasp hold of the structure, rest falls in to place quite easily.</summary></entry><entry><title type="html">Introduction to OpenStack Networking for Network Engineers</title><link href="http://localhost:4000/networking/2018/03/22/2018-03-22-introduction-to-openstack-networking-for-network-engineers/" rel="alternate" type="text/html" title="Introduction to OpenStack Networking for Network Engineers" /><published>2018-03-22T12:00:00+08:00</published><updated>2018-03-22T12:00:00+08:00</updated><id>http://localhost:4000/networking/2018/03/22/2018-03-22-introduction-to-openstack-networking-for-network-engineers</id><content type="html" xml:base="http://localhost:4000/networking/2018/03/22/2018-03-22-introduction-to-openstack-networking-for-network-engineers/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This post is a gentle introduction to networking with Openstack using the Neutron module. Being an introduction, we will not focus on setting up OpenStack from scratch. Instead we will familiarize ourselves with core concepts of Neutron and common administrative tasks. We will use the latest release of Openstack, &lt;strong&gt;Queens&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For ease of setup, we will make use of pre-packaged Devstack environment. Devstack is a set of scripts from official OpenStack community that allows us to quickly build an Openstack instance with latest versions of all modules. It is very useful for testing and training purposes.&lt;/p&gt;

&lt;h2 id=&quot;neutron-concepts&quot;&gt;Neutron Concepts&lt;/h2&gt;
&lt;p&gt;Let us go through the important terms first:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Network&lt;/strong&gt; - A Network is a logical container of entities. To think of it in physical networking terms, it can represent a site, a DC, a campus- or anything else termed as a single network. In AWS terms, a network is similar to a VPC. Note that the definition of a Network is not entirely arbitrary as we may encounter some design choices when deciding CIDR, load balancers, routers, external gateway etc.,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Subnet&lt;/strong&gt; - Subnet is similar to a vlan in traditional networking. All hosts in the same Subnet can talk to each other and share the same address space. For beginners, it is possible to confuse a Subnet with Network since both terms are used interchangeably in traditional networking. But keep in mind that one network can contain many subnets. The concept of a Subnet is similar both in OpenStack and AWS.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Port&lt;/strong&gt; - A port is a virtual NIC card which is used by resources to access network. A port is tied to a subnet and assigned with a Security group (introduced below). In AWS terms, it is similar to ENI (Elastic Network Interface)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Security Group&lt;/strong&gt; - Security groups are like port ACL in traditional networking, except that the filtering happens at the hypervisor level. Multiple ports can share the same security group. By default, entities assigned to the same Security Group can talk to each other. It is also similar in scope and function to the Security Group in AWS.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Floating IP&lt;/strong&gt; - This is similar to elastic IP in AWS. These are not tied to any port and can be re-assigned to other ports dynamically. The closest feature in traditional networking would be a static NAT. In AWS terms, it is called Elastic IP.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;objective&quot;&gt;Objective&lt;/h2&gt;

&lt;p&gt;We will create the below topology on Openstack. Hosts &lt;code class=&quot;highlighter-rouge&quot;&gt;host-1&lt;/code&gt; &amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;host-2&lt;/code&gt; will be on same subnet while &lt;code class=&quot;highlighter-rouge&quot;&gt;host-3&lt;/code&gt; will be on another subnet. We will enable reachability between all 3 hosts. Finally, we will also enable bi-directional connectivity to &lt;code class=&quot;highlighter-rouge&quot;&gt;host-1&lt;/code&gt; from internet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018/04/introduction-to-openstack-networking-for-network-engineers/topology.png&quot; alt=&quot;topology&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;preparing-the-environment&quot;&gt;Preparing the environment&lt;/h2&gt;

&lt;p&gt;Make home directory for our devstack installation and download the latest copy of DevStack there. I am using Ubuntu 16.04 for my environment.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo mkdir -p /opt/stack &amp;amp;&amp;amp; cd /opt/stack
$ sudo git clone https://git.openstack.org/openstack-dev/devstack

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Switch to devstack folder and create a user account using the pre-built script. The script grants passwordless root privilege to this account. Switch to the stack account to proceed with rest of the steps.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd devstack
$ sudo bash tools/create-stack-user.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Switch to &lt;code class=&quot;highlighter-rouge&quot;&gt;stack&lt;/code&gt; user and create a config file. Provide your preferred password which will be used for rest of the setup. The local.conf should be present in the root directory of devstack (same location as stack.sh)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo su stack
$ vi local.conf
[[local|localrc]]
ADMIN_PASSWORD=password
DATABASE_PASSWORD=$ADMIN_PASSWORD
RABBIT_PASSWORD=$ADMIN_PASSWORD
SERVICE_PASSWORD=$ADMIN_PASSWORD
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Run the setup script &lt;code class=&quot;highlighter-rouge&quot;&gt;stack.sh&lt;/code&gt; and watch the magic happen. It takes a while since the script installs almost every component of Openstack.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./stack.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;DevStack also provides convenient script to tear down the environment and start from scratch. So once we are done with our testing, we can run &lt;code class=&quot;highlighter-rouge&quot;&gt;unstack.sh&lt;/code&gt; to bring the environment back to a blank state.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After the installation is complete, source the openrc file to import openstack commands in your searchpath.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;source openrc
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;building-subnets&quot;&gt;Building subnets&lt;/h2&gt;

&lt;p&gt;Before we create new subnets, let us list the set of pre-built subnets that were setup as part of devstack deployment.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  stack@openstack-instance-2:~/devstack$ openstack network list -f yaml
  - ID: 1fe4e71c-d94e-400c-bcee-8067b621c827
    Name: public
    Subnets: c0718110-7493-46bf-ba48-720762e47934, fab15575-ae4f-4528-bf0d-ac40d2000484
  - ID: 2ebe2084-6dae-40dd-8704-7954944238d7
    Name: private
    Subnets: 244ed014-8b9f-4e4d-ab12-9931ecec4238, 265de598-d881-4d58-a185-1a69be39b2fd
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;The default output format is table. To simplify horizontal scrolling, I have selected yaml output using the -f switch.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Create a new network called &lt;code class=&quot;highlighter-rouge&quot;&gt;inside&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  stack@openstack-instance-2:~/devstack$ openstack network create inside
  +---------------------------+--------------------------------------+
  | Field                     | Value                                |
  +---------------------------+--------------------------------------+
  | admin_state_up            | UP                                   |
  | availability_zone_hints   |                                      |
  | availability_zones        |                                      |
  | created_at                | 2018-04-01T09:14:41Z                 |
  | description               |                                      |
  | dns_domain                | None                                 |
  | id                        | a0fc23dd-f1a5-4e9b-9d58-ea63b30d076b |
  | ipv4_address_scope        | None                                 |
  | ipv6_address_scope        | None                                 |
  | is_default                | False                                |
  | is_vlan_transparent       | None                                 |
  | mtu                       | 1450                                 |
  | name                      | inside                               |
  | port_security_enabled     | True                                 |
  | project_id                | 9d390c83cc4e46c7a40167dee68075f0     |
  | provider:network_type     | None                                 |
  | provider:physical_network | None                                 |
  | provider:segmentation_id  | None                                 |
  | qos_policy_id             | None                                 |
  | revision_number           | 2                                    |
  | router:external           | Internal                             |
  | segments                  | None                                 |
  | shared                    | False                                |
  | status                    | ACTIVE                               |
  | subnets                   |                                      |
  | tags                      |                                      |
  | updated_at                | 2018-04-01T09:14:41Z                 |
  +---------------------------+--------------------------------------+
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Next we will create new subnets. Before that, let us list down the existing subnets for reference.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;stack@openstack-instance-2:~/devstack$ openstack subnet list -f yaml
- ID: 244ed014-8b9f-4e4d-ab12-9931ecec4238
  Name: private-subnet
  Network: 2ebe2084-6dae-40dd-8704-7954944238d7
  Subnet: 10.0.0.0/26
- ID: 265de598-d881-4d58-a185-1a69be39b2fd
  Name: ipv6-private-subnet
  Network: 2ebe2084-6dae-40dd-8704-7954944238d7
  Subnet: fd7b:34b0:9a57::/64
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Create a new subnet within the network. We will call it &lt;code class=&quot;highlighter-rouge&quot;&gt;net-01&lt;/code&gt; and assign a subnet range of &lt;code class=&quot;highlighter-rouge&quot;&gt;10.1.1.0/24&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  stack@openstack-instance-2:~/devstack$ openstack subnet create net-01 --network inside --subnet-range 10.1.1.0/24
  +-------------------+--------------------------------------+
  | Field             | Value                                |
  +-------------------+--------------------------------------+
  | allocation_pools  | 10.1.1.2-10.1.1.254                  |
  | cidr              | 10.1.1.0/24                          |
  | created_at        | 2018-04-01T09:20:13Z                 |
  | description       |                                      |
  | dns_nameservers   |                                      |
  | enable_dhcp       | True                                 |
  | gateway_ip        | 10.1.1.1                             |
  | host_routes       |                                      |
  | id                | 0317aa4a-84d3-44df-8781-3f04d558a473 |
  | ip_version        | 4                                    |
  | ipv6_address_mode | None                                 |
  | ipv6_ra_mode      | None                                 |
  | name              | net-01                               |
  | network_id        | a0fc23dd-f1a5-4e9b-9d58-ea63b30d076b |
  | project_id        | 9d390c83cc4e46c7a40167dee68075f0     |
  | revision_number   | 0                                    |
  | segment_id        | None                                 |
  | service_types     |                                      |
  | subnetpool_id     | None                                 |
  | tags              |                                      |
  | updated_at        | 2018-04-01T09:20:13Z                 |
  +-------------------+--------------------------------------+
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As mentioned earlier, the relation between subnet and network is many-to-one. So we can create another subnet &lt;code class=&quot;highlighter-rouge&quot;&gt;net-02&lt;/code&gt; within the same &lt;code class=&quot;highlighter-rouge&quot;&gt;inside&lt;/code&gt; network.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  stack@openstack-instance-2:~/devstack$ openstack subnet create net-02 --network inside --subnet-range 10.1.2.0/24
  +-------------------+--------------------------------------+
  | Field             | Value                                |
  +-------------------+--------------------------------------+
  | allocation_pools  | 10.1.2.2-10.1.2.254                  |
  | cidr              | 10.1.2.0/24                          |
  | created_at        | 2018-04-01T09:21:07Z                 |
  | description       |                                      |
  | dns_nameservers   |                                      |
  | enable_dhcp       | True                                 |
  | gateway_ip        | 10.1.2.1                             |
  | host_routes       |                                      |
  | id                | 6e5f2220-29da-4679-962f-22934f2c3d49 |
  | ip_version        | 4                                    |
  | ipv6_address_mode | None                                 |
  | ipv6_ra_mode      | None                                 |
  | name              | net-02                               |
  | network_id        | a0fc23dd-f1a5-4e9b-9d58-ea63b30d076b |
  | project_id        | 9d390c83cc4e46c7a40167dee68075f0     |
  | revision_number   | 0                                    |
  | segment_id        | None                                 |
  | service_types     |                                      |
  | subnetpool_id     | None                                 |
  | tags              |                                      |
  | updated_at        | 2018-04-01T09:21:07Z                 |
  +-------------------+--------------------------------------+
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;creating-nova-compute-instances&quot;&gt;Creating nova compute instances&lt;/h2&gt;

&lt;p&gt;We need to know the image names available before creating an instance. List the images available.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  stack@openstack-instance-2:~/devstack$ openstack image list -f yaml
  - ID: 2a5fbb6b-b694-4f76-ac19-4af358d1c7e8
    Name: cirros-0.3.5-x86_64-disk
    Status: active
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Cirros is a tiny image available as part of devstack, useful for testing purpose. Let us create two instances under inside network running cirros image.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  stack@openstack-instance-2:~/devstack$ openstack server create /
  --flavor m1.tiny --image cirros-0.3.5-x86_64-disk --network inside host --min 2 --max 2
  +-----------------------------+-----------------------------------------------------------------+
  | Field                       | Value                                                           |
  +-----------------------------+-----------------------------------------------------------------+
  | OS-DCF:diskConfig           | MANUAL                                                          |
  | OS-EXT-AZ:availability_zone |                                                                 |
  | OS-EXT-STS:power_state      | NOSTATE                                                         |
  | OS-EXT-STS:task_state       | scheduling                                                      |
  | OS-EXT-STS:vm_state         | building                                                        |
  | OS-SRV-USG:launched_at      | None                                                            |
  | OS-SRV-USG:terminated_at    | None                                                            |
  | accessIPv4                  |                                                                 |
  | accessIPv6                  |                                                                 |
  | addresses                   |                                                                 |
  | adminPass                   | odJy58yPdHnz                                                    |
  | config_drive                |                                                                 |
  | created                     | 2018-04-01T09:25:55Z                                            |
  | flavor                      | m1.tiny (1)                                                     |
  | hostId                      |                                                                 |
  | id                          | dbda4926-4ca6-40be-b673-d0c811ae43c2                            |
  | image                       | cirros-0.3.5-x86_64-disk (2a5fbb6b-b694-4f76-ac19-4af358d1c7e8) |
  | key_name                    | None                                                            |
  | name                        | host-1                                                          |
  | progress                    | 0                                                               |
  | project_id                  | 9d390c83cc4e46c7a40167dee68075f0                                |
  | properties                  |                                                                 |
  | security_groups             | name='default'                                                  |
  | status                      | BUILD                                                           |
  | updated                     | 2018-04-01T09:25:55Z                                            |
  | user_id                     | dfd4e794f59f48549016de1263c30dbb                                |
  | volumes_attached            |                                                                 |
  +-----------------------------+-----------------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Either min or max parameter is necessary. or else server build fails miserably with no clue as to what went wrong.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note that in the above command we specified only the network and not subnet. But this network has two subnets. So let us see which subnet is chosen to run the nova compute instances.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  stack@openstack-instance-2:~/devstack$ openstack server list -f yaml
  - Flavor: m1.tiny
    ID: 5ea3d968-aa29-4911-b658-e0b6498b09f4
    Image: cirros-0.3.5-x86_64-disk
    Name: host-2
    Networks: inside=10.1.1.9
    Status: ACTIVE
  - Flavor: m1.tiny
    ID: dbda4926-4ca6-40be-b673-d0c811ae43c2
    Image: cirros-0.3.5-x86_64-disk
    Name: host-1
    Networks: inside=10.1.1.10
    Status: ACTIVE
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It turns out the first subnet &lt;code class=&quot;highlighter-rouge&quot;&gt;net-01&lt;/code&gt; we created is being used. But if we want to specify &lt;code class=&quot;highlighter-rouge&quot;&gt;net-02&lt;/code&gt; for instance creation, it is more tricky. We need to create a port in that subnet and attach its nic during instance creation.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  stack@openstack-instance-2:~/devstack$ openstack port create \
  --network a0fc23dd-f1a5-4e9b-9d58-ea63b30d076b --fixed-ip subnet=6e5f2220-29da-4679-962f-22934f2c3d49 if-host-02
  +-----------------------+-------------------------------------------------------------------------+
  | Field                 | Value                                                                   |
  +-----------------------+-------------------------------------------------------------------------+
  | admin_state_up        | UP                                                                      |
  | allowed_address_pairs |                                                                         |
  | binding_host_id       | None                                                                    |
  | binding_profile       | None                                                                    |
  | binding_vif_details   | None                                                                    |
  | binding_vif_type      | None                                                                    |
  | binding_vnic_type     | normal                                                                  |
  | created_at            | 2018-04-01T09:32:31Z                                                    |
  | data_plane_status     | None                                                                    |
  | description           |                                                                         |
  | device_id             |                                                                         |
  | device_owner          |                                                                         |
  | dns_assignment        | None                                                                    |
  | dns_domain            | None                                                                    |
  | dns_name              | None                                                                    |
  | extra_dhcp_opts       |                                                                         |
  | fixed_ips             | ip_address='10.1.2.5', subnet_id='6e5f2220-29da-4679-962f-22934f2c3d49' |
  | id                    | 2b9635bf-8f93-4663-9c6d-f40f0492195c                                    |
  | ip_address            | None                                                                    |
  | mac_address           | fa:16:3e:40:08:73                                                       |
  | name                  | if-host-02                                                              |
  | network_id            | a0fc23dd-f1a5-4e9b-9d58-ea63b30d076b                                    |
  | option_name           | None                                                                    |
  | option_value          | None                                                                    |
  | port_security_enabled | True                                                                    |
  | project_id            | 9d390c83cc4e46c7a40167dee68075f0                                        |
  | qos_policy_id         | None                                                                    |
  | revision_number       | 6                                                                       |
  | security_group_ids    | bd41b78c-974c-4854-b808-dec11575964b                                    |
  | status                | DOWN                                                                    |
  | subnet_id             | None                                                                    |
  | tags                  |                                                                         |
  | trunk_details         | None                                                                    |
  | updated_at            | 2018-04-01T09:32:31Z                                                    |
  +-----------------------+-------------------------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now create an instance in this subnet. Use the port id from above output to specify the nic.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  stack@openstack-instance-2:~/devstack$ openstack server create --flavor m1.tiny \
  --image cirros-0.3.5-x86_64-disk --nic port-id=2b9635bf-8f93-4663-9c6d-f40f0492195c  host-3 --max 1
  +-----------------------------+-----------------------------------------------------------------+
  | Field                       | Value                                                           |
  +-----------------------------+-----------------------------------------------------------------+
  | OS-DCF:diskConfig           | MANUAL                                                          |
  | OS-EXT-AZ:availability_zone |                                                                 |
  | OS-EXT-STS:power_state      | NOSTATE                                                         |
  | OS-EXT-STS:task_state       | scheduling                                                      |
  | OS-EXT-STS:vm_state         | building                                                        |
  | OS-SRV-USG:launched_at      | None                                                            |
  | OS-SRV-USG:terminated_at    | None                                                            |
  | accessIPv4                  |                                                                 |
  | accessIPv6                  |                                                                 |
  | addresses                   |                                                                 |
  | adminPass                   | hnN294KgUTrY                                                    |
  | config_drive                |                                                                 |
  | created                     | 2018-04-01T09:52:23Z                                            |
  | flavor                      | m1.tiny (1)                                                     |
  | hostId                      |                                                                 |
  | id                          | 376c3d59-f74c-4b3b-a4c7-5b9fb9d3eef7                            |
  | image                       | cirros-0.3.5-x86_64-disk (2a5fbb6b-b694-4f76-ac19-4af358d1c7e8) |
  | key_name                    | None                                                            |
  | name                        | host-3                                                          |
  | progress                    | 0                                                               |
  | project_id                  | 9d390c83cc4e46c7a40167dee68075f0                                |
  | properties                  |                                                                 |
  | security_groups             | name='default'                                                  |
  | status                      | BUILD                                                           |
  | updated                     | 2018-04-01T09:52:23Z                                            |
  | user_id                     | dfd4e794f59f48549016de1263c30dbb                                |
  | volumes_attached            |                                                                 |
  +-----------------------------+-----------------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Before we move on to next section, tet us check the server instances we have created so far.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  stack@openstack-instance-2:~/devstack$ openstack server list -f yaml
  - Flavor: m1.tiny
    ID: 376c3d59-f74c-4b3b-a4c7-5b9fb9d3eef7
    Image: cirros-0.3.5-x86_64-disk
    Name: host-3
    Networks: inside=10.1.2.5
    Status: ACTIVE
  - Flavor: m1.tiny
    ID: 5ea3d968-aa29-4911-b658-e0b6498b09f4
    Image: cirros-0.3.5-x86_64-disk
    Name: host-2
    Networks: inside=10.1.1.9
    Status: ACTIVE
  - Flavor: m1.tiny
    ID: dbda4926-4ca6-40be-b673-d0c811ae43c2
    Image: cirros-0.3.5-x86_64-disk
    Name: host-1
    Networks: inside=10.1.1.10
    Status: ACTIVE
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;neutron-networking-between-hosts&quot;&gt;Neutron networking between hosts&lt;/h2&gt;

&lt;p&gt;Let us see the subnet membership of each ports.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  stack@openstack-instance-2:~/devstack$ openstack port list -f yaml --fixed-ip subnet=net-01
  - Fixed IP Addresses: 'ip_address=''10.1.1.2'', subnet_id=''0317aa4a-84d3-44df-8781-3f04d558a473''

      ip_address=''10.1.2.2'', subnet_id=''6e5f2220-29da-4679-962f-22934f2c3d49'''
    ID: 6764de9f-deec-494b-a9b4-0903bfbfefea
    MAC Address: fa:16:3e:8f:47:41
    Name: ''
    Status: ACTIVE
  - Fixed IP Addresses: ip_address='10.1.1.9', subnet_id='0317aa4a-84d3-44df-8781-3f04d558a473'
    ID: ab283b4a-5738-48c9-8a53-343a1e5c795d
    MAC Address: fa:16:3e:9d:b6:7f
    Name: ''
    Status: ACTIVE
  - Fixed IP Addresses: ip_address='10.1.1.10', subnet_id='0317aa4a-84d3-44df-8781-3f04d558a473'
    ID: de7ee5de-e694-4ff3-9763-d7fb86e0038c
    MAC Address: fa:16:3e:7a:ce:84
    Name: ''
    Status: ACTIVE

  stack@openstack-instance-2:~/devstack$ openstack port list -f yaml --fixed-ip subnet=net-02
  - Fixed IP Addresses: ip_address='10.1.2.5', subnet_id='6e5f2220-29da-4679-962f-22934f2c3d49'
    ID: 2b9635bf-8f93-4663-9c6d-f40f0492195c
    MAC Address: fa:16:3e:40:08:73
    Name: if-host-02
    Status: ACTIVE
  - Fixed IP Addresses: 'ip_address=''10.1.1.2'', subnet_id=''0317aa4a-84d3-44df-8781-3f04d558a473''

      ip_address=''10.1.2.2'', subnet_id=''6e5f2220-29da-4679-962f-22934f2c3d49'''
    ID: 6764de9f-deec-494b-a9b4-0903bfbfefea
    MAC Address: fa:16:3e:8f:47:41
    Name: ''
    Status: ACTIVE
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can see that one port appears in both the subnets (MAC address: &lt;code class=&quot;highlighter-rouge&quot;&gt;fa:16:3e:8f:47:41&lt;/code&gt;). This is the default DNS server of the network and gets attached to the subnet automatically unless we explicitly specify otherwise.&lt;/p&gt;

&lt;p&gt;To test connectivity we need to console in to the hosts. We will use &lt;code class=&quot;highlighter-rouge&quot;&gt;virsh&lt;/code&gt; to console in to the instances. First let us list the hosts.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  stack@openstack-instance-2:~/devstack$ sudo virsh list
   Id    Name                           State
  ----------------------------------------------------
   1     instance-00000001              running
   2     instance-00000002              running
   3     instance-00000003              running
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Console to the first instance &lt;code class=&quot;highlighter-rouge&quot;&gt;host-1&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  stack@openstack-instance-2:~/devstack$ sudo virsh console 1
  Connected to domain instance-00000001
  Escape character is ^]

  login as 'cirros' user. default password: 'cubswin:)'. use 'sudo' for root.
  cirros login: cirros
  Password: 
  $ ip add | grep 'inet.*10'
      inet 10.1.1.10/24 brd 10.1.1.255 scope global eth0
  $ sudo hostname cirros-1-1-1-10
  $ export PS1=&quot;\h$ &quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We will see that this host can talk to other host &lt;code class=&quot;highlighter-rouge&quot;&gt;host-2&lt;/code&gt; within the same subnet.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cirros-1-1-1-10$ ping 10.1.1.9
PING 10.1.1.9 (10.1.1.9): 56 data bytes
64 bytes from 10.1.1.9: seq=0 ttl=64 time=4.409 ms
64 bytes from 10.1.1.9: seq=1 ttl=64 time=1.070 ms
64 bytes from 10.1.1.9: seq=2 ttl=64 time=1.437 ms

--- 10.1.1.9 ping statistics ---
3 packets transmitted, 3 packets received, 0% packet loss
round-trip min/avg/max = 1.070/2.305/4.409 ms
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But it cannot reach host-3 which is a different subnet (&lt;code class=&quot;highlighter-rouge&quot;&gt;net-02&lt;/code&gt;)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cirros-1-1-1-10$ ping 10.1.2.5
PING 10.1.2.5 (10.1.2.5): 56 data bytes

--- 10.1.2.5 ping statistics ---
3 packets transmitted, 0 packets received, 100% packet loss
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Likewise, the host cannot reach external network such as internet.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cirros-1-1-1-10$ ping 8.8.8.8
PING 8.8.8.8 (8.8.8.8): 56 data bytes

--- 8.8.8.8 ping statistics ---
3 packets transmitted, 0 packets received, 100% packet loss
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Like in any tradional network, we need a router to allow traffic between different subnets. OpenStack Neutron provides a software defined router which can attach to multiple subnets and provide the same functionality.&lt;/p&gt;

&lt;p&gt;Let us go ahead and create a router.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;stack@openstack-instance-2:~/devstack$ openstack router create demo_router
+-------------------------+--------------------------------------+
| Field                   | Value                                |
+-------------------------+--------------------------------------+
| admin_state_up          | UP                                   |
| availability_zone_hints |                                      |
| availability_zones      |                                      |
| created_at              | 2018-04-02T00:14:29Z                 |
| description             |                                      |
| distributed             | False                                |
| external_gateway_info   | None                                 |
| flavor_id               | None                                 |
| ha                      | False                                |
| id                      | f36a24b0-e4a3-41de-9fdd-73f85df9dbaa |
| name                    | demo_router                          |
| project_id              | 9d390c83cc4e46c7a40167dee68075f0     |
| revision_number         | 1                                    |
| routes                  |                                      |
| status                  | ACTIVE                               |
| tags                    |                                      |
| updated_at              | 2018-04-02T00:14:29Z                 |
+-------------------------+--------------------------------------+
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;List the routers visible to validate the result. You can see an existing pre-built router and the one we created just now.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  stack@openstack-instance-2:~/devstack$ openstack router list -f yaml
  - Distributed: false
    HA: false
    ID: 58cc905f-4c8b-4641-ba92-a1a491d818ab
    Name: router1
    Project: 9d390c83cc4e46c7a40167dee68075f0
    State: UP
    Status: ACTIVE
  - Distributed: false
    HA: false
    ID: f36a24b0-e4a3-41de-9fdd-73f85df9dbaa
    Name: demo_router
    Project: 9d390c83cc4e46c7a40167dee68075f0
    State: UP
    Status: ACTIVE
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we will attach our subnets to the router.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  stack@openstack-instance-2:~/devstack$ openstack router add subnet demo_router net-01
  stack@openstack-instance-2:~/devstack$ openstack router add subnet demo_router net-02
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can see one new port from each subnet getting attached to the router.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  stack@openstack-instance-2:~/devstack$ openstack port list -f yaml --router demo_router
  - Fixed IP Addresses: ip_address='10.1.1.1', subnet_id='0317aa4a-84d3-44df-8781-3f04d558a473'
    ID: 468ff846-fb1d-4ef2-85b0-3957885c59a8
    MAC Address: fa:16:3e:b1:31:fa
    Name: ''
    Status: ACTIVE
  - Fixed IP Addresses: ip_address='10.1.2.1', subnet_id='6e5f2220-29da-4679-962f-22934f2c3d49'
    ID: ee15064b-26f2-46ae-bc09-02db440edd3b
    MAC Address: fa:16:3e:7c:62:28
    Name: ''
    Status: ACTIVE
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;To reduce the output I have filtered the port list with an argument –router &lt;router name=&quot;&quot;&gt;. Most list commands have ability to filter output like this. Use the interactive help menu to figure out the filter options.&lt;/router&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let us try to reach the host on the other network.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  cirros-1-1-1-10$ ping 10.1.2.5
  PING 10.1.2.5 (10.1.2.5): 56 data bytes
  64 bytes from 10.1.2.5: seq=0 ttl=63 time=4.141 ms
  64 bytes from 10.1.2.5: seq=1 ttl=63 time=1.499 ms

  --- 10.1.2.5 ping statistics ---
  2 packets transmitted, 2 packets received, 0% packet loss
  round-trip min/avg/max = 1.499/2.820/4.141 ms
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Success! As expected, the host is one hop away.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  cirros-1-1-1-10$ traceroute 10.1.2.5
  traceroute to 10.1.2.5 (10.1.2.5), 30 hops max, 46 byte packets
   1  host-10-1-1-1.openstacklocal (10.1.1.1)  2.217 ms  0.360 ms  0.301 ms
   2  host-10-1-2-5.openstacklocal (10.1.2.5)  1.568 ms  1.155 ms  0.803 ms
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But the outside world connection is not ready yet. For that we need to attach it to a public network. Recall that there was a pre-built public network as part of devstack setup. We will use this network to communicate to outside world.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  stack@openstack-instance-2:~/devstack$ openstack router set --external-gateway public demo_router
  stack@openstack-instance-2:~/devstack$ openstack router show demo_router -f yaml
  admin_state_up: UP
  availability_zone_hints: ''
  availability_zones: nova
  created_at: '2018-04-02T00:14:29Z'
  description: ''
  distributed: false
  external_gateway_info: '{&quot;network_id&quot;: &quot;1fe4e71c-d94e-400c-bcee-8067b621c827&quot;, &quot;enable_snat&quot;:
    true, &quot;external_fixed_ips&quot;: [{&quot;subnet_id&quot;: &quot;c0718110-7493-46bf-ba48-720762e47934&quot;,
    &quot;ip_address&quot;: &quot;172.24.4.3&quot;}, {&quot;subnet_id&quot;: &quot;fab15575-ae4f-4528-bf0d-ac40d2000484&quot;,
    &quot;ip_address&quot;: &quot;2001:db8::6&quot;}]}'
  flavor_id: null
  ha: false
  id: f36a24b0-e4a3-41de-9fdd-73f85df9dbaa
  interfaces_info: '[{&quot;subnet_id&quot;: &quot;0317aa4a-84d3-44df-8781-3f04d558a473&quot;, &quot;ip_address&quot;:
    &quot;10.1.1.1&quot;, &quot;port_id&quot;: &quot;468ff846-fb1d-4ef2-85b0-3957885c59a8&quot;}, {&quot;subnet_id&quot;: &quot;6e5f2220-29da-4679-962f-22934f2c3d49&quot;,
    &quot;ip_address&quot;: &quot;10.1.2.1&quot;, &quot;port_id&quot;: &quot;ee15064b-26f2-46ae-bc09-02db440edd3b&quot;}]'
  name: demo_router
  project_id: 9d390c83cc4e46c7a40167dee68075f0
  revision_number: 5
  routes: ''
  status: ACTIVE
  tags: ''
  updated_at: '2018-04-02T00:32:54Z'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;The show command is similar to list command, but can show more detailed information about a single resource. As expected, it requires an additional unique identifier argument to identify the resource which we want to display.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;See that there is a new external_gateway_info section. Now let us try to reach the internet.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  stack@openstack-instance-2:~/devstack$ sudo virsh console 1
  Connected to domain instance-00000001
  Escape character is ^]

  cirros-1-1-1-10$ ping 8.8.8.8
  PING 8.8.8.8 (8.8.8.8): 56 data bytes
  64 bytes from 8.8.8.8: seq=0 ttl=50 time=7.129 ms
  64 bytes from 8.8.8.8: seq=1 ttl=51 time=1.483 ms
  64 bytes from 8.8.8.8: seq=2 ttl=51 time=1.137 ms
  
  --- 8.8.8.8 ping statistics ---
  3 packets transmitted, 3 packets received, 0% packet loss
  round-trip min/avg/max = 1.137/3.249/7.129 ms
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Success! To see how this traffic reaches out to internet, we will do tcpdump on the hypervisor.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  stack@openstack-instance-2:~/ sudo tcpdump 'host 8.8.8.8' -X
  tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
  listening on br-ex, link-type EN10MB (Ethernet), capture size 262144 bytes
  00:37:14.019550 IP 172.24.4.3 &amp;gt; google-public-dns-a.google.com: ICMP echo request, id 49153, seq 0, length 64
    0x0000:  4500 0054 0979 4000 3f01 7205 ac18 0403  E..T.y@.?.r.....
    0x0010:  0808 0808 0800 5076 c001 0000 73cd 73ba  ......Pv....s.s.
    0x0020:  0000 0000 0000 0000 0000 0000 0000 0000  ................
    0x0030:  0000 0000 0000 0000 0000 0000 0000 0000  ................
    0x0040:  0000 0000 0000 0000 0000 0000 0000 0000  ................
    0x0050:  0000 0000                                ....
  00:37:14.020493 IP google-public-dns-a.google.com &amp;gt; 172.24.4.3: ICMP echo reply, id 49153, seq 0, length 64
    0x0000:  4500 0054 0000 0000 3401 c67e 0808 0808  E..T....4..~....
    0x0010:  ac18 0403 0000 5876 c001 0000 73cd 73ba  ......Xv....s.s.
    0x0020:  0000 0000 0000 0000 0000 0000 0000 0000  ................
    0x0030:  0000 0000 0000 0000 0000 0000 0000 0000  ................
    0x0040:  0000 0000 0000 0000 0000 0000 0000 0000  ................
    0x0050:  0000 0000    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The traffic from the host is being source NAT by the router to go out to the internet (recall from the earlier output that 172.24.4.3 belongs to the external gateway of the router). In traditional networking term this is called NAT overloading. This can provide only outbound connectivity for the host.&lt;/p&gt;

&lt;p&gt;In order to provide inbound connectivity to the host, we need to create a floating ip. This is similar to elastic IP in AWS or staic NAT in traditional networking.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  stack@openstack-instance-2:~/devstack$ openstack floating ip create public
  +---------------------+--------------------------------------+
  | Field               | Value                                |
  +---------------------+--------------------------------------+
  | created_at          | 2018-04-02T00:44:14Z                 |
  | description         |                                      |
  | fixed_ip_address    | None                                 |
  | floating_ip_address | 172.24.4.5                           |
  | floating_network_id | 1fe4e71c-d94e-400c-bcee-8067b621c827 |
  | id                  | e2ff37e4-f8f5-4413-98aa-e0df516c1a3b |
  | name                | 172.24.4.5                           |
  | port_id             | None                                 |
  | project_id          | 9d390c83cc4e46c7a40167dee68075f0     |
  | qos_policy_id       | None                                 |
  | revision_number     | 0                                    |
  | router_id           | None                                 |
  | status              | DOWN                                 |
  | subnet_id           | None                                 |
  | tags                | []                                   |
  | updated_at          | 2018-04-02T00:44:14Z                 |
  +---------------------+--------------------------------------+
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Attach this to our &lt;code class=&quot;highlighter-rouge&quot;&gt;host-1&lt;/code&gt; instance. You can now see the floating IP also listed in the &lt;code class=&quot;highlighter-rouge&quot;&gt;openstack server list&lt;/code&gt; output.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  stack@openstack-instance-2:~/devstack$ openstack server add floating ip host-1 172.24.4.5
  stack@openstack-instance-2:~/devstack$ openstack server list --name host-1 -f yaml
  - Flavor: m1.tiny
    ID: dbda4926-4ca6-40be-b673-d0c811ae43c2
    Image: cirros-0.3.5-x86_64-disk
    Name: host-1
    Networks: inside=10.1.1.10, 172.24.4.5
    Status: ACTIVE
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here you can see the floating ip is mapped to our port-id.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  stack@openstack-instance-2:~/devstack$ openstack floating ip show 172.24.4.5
  +---------------------+--------------------------------------+
  | Field               | Value                                |
  +---------------------+--------------------------------------+
  | created_at          | 2018-04-02T00:44:14Z                 |
  | description         |                                      |
  | fixed_ip_address    | 10.1.1.10                            |
  | floating_ip_address | 172.24.4.5                           |
  | floating_network_id | 1fe4e71c-d94e-400c-bcee-8067b621c827 |
  | id                  | e2ff37e4-f8f5-4413-98aa-e0df516c1a3b |
  | name                | 172.24.4.5                           |
  | port_id             | de7ee5de-e694-4ff3-9763-d7fb86e0038c |
  | project_id          | 9d390c83cc4e46c7a40167dee68075f0     |
  | qos_policy_id       | None                                 |
  | revision_number     | 2                                    |
  | router_id           | f36a24b0-e4a3-41de-9fdd-73f85df9dbaa |
  | status              | ACTIVE                               |
  | subnet_id           | None                                 |
  | tags                | []                                   |
  | updated_at          | 2018-04-02T00:47:14Z                 |
  +---------------------+--------------------------------------+
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We require one last step to initiate inbound connections to the host. Recall that each ports are assigned with a security group. Since this is an inbound connection, we need to explicitly permit access in security group.&lt;/p&gt;

&lt;p&gt;Check the Security Group assigned to our port.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  stack@openstack-instance-2:~/devstack$ openstack port 
    \show de7ee5de-e694-4ff3-9763-d7fb86e0038c -c 'security_group_ids' -f yaml
  security_group_ids: bd41b78c-974c-4854-b808-dec11575964b
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let us see the rules which are permitted by this security group.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  stack@openstack-instance-2:~/devstack$ openstack security group show bd41b78c-974c-4854-b808-dec11575964b  -f yaml
  created_at: '2018-04-01T09:01:20Z'
  description: Default security group
  id: bd41b78c-974c-4854-b808-dec11575964b
  name: default
  project_id: 9d390c83cc4e46c7a40167dee68075f0
  revision_number: 6
  rules: 'created_at=''2018-04-01T09:01:20Z'', direction=''ingress'', ethertype=''IPv4'',
    id=''2ab4f8a5-43ed-4f3e-8c43-cc854bc8feb3'', remote_group_id=''bd41b78c-974c-4854-b808-dec11575964b'',
    updated_at=''2018-04-01T09:01:20Z''

    created_at=''2018-04-01T09:01:20Z'', direction=''egress'', ethertype=''IPv6'', id=''5c33d0ac-8ee9-4bd7-951c-dca998931828'',
    updated_at=''2018-04-01T09:01:20Z''

    created_at=''2018-04-01T09:01:20Z'', direction=''ingress'', ethertype=''IPv6'',
    id=''d7c7a642-485b-482e-8d26-a958aaafa19e'', remote_group_id=''bd41b78c-974c-4854-b808-dec11575964b'',
    updated_at=''2018-04-01T09:01:20Z''

    created_at=''2018-04-01T09:01:20Z'', direction=''egress'', ethertype=''IPv4'', id=''f41405df-d0c9-4427-ba11-f0a26b025c3e'',
    updated_at=''2018-04-01T09:01:20Z'''
  tags: []
  updated_at: '2018-04-02T01:56:25Z'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here you can see 4 rules, two each for IPv4 and IPv6. For egress rules, you can see that there is no remote prefix or group id configured. It means all outbound connections are permitted. For ingress traffic, you can see that the remote_group_id references to self. It means that all ports assigned to the same security group can send inbound traffic unhindered.&lt;/p&gt;

&lt;p&gt;Let us add more rules to permit ICMP and SSH&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  stack@openstack-instance-2:~/devstack$ openstack security group rule create \
  --protocol icmp --ingress --remote-ip 0.0.0.0/0 default
  +-------------------+--------------------------------------+
  | Field             | Value                                |
  +-------------------+--------------------------------------+
  | created_at        | 2018-04-02T01:54:12Z                 |
  | description       |                                      |
  | direction         | ingress                              |
  | ether_type        | IPv4                                 |
  | id                | df23fec9-b87a-47ef-8f38-67472de46071 |
  | name              | None                                 |
  | port_range_max    | None                                 |
  | port_range_min    | None                                 |
  | project_id        | 9d390c83cc4e46c7a40167dee68075f0     |
  | protocol          | icmp                                 |
  | remote_group_id   | None                                 |
  | remote_ip_prefix  | 0.0.0.0/0                            |
  | revision_number   | 0                                    |
  | security_group_id | bd41b78c-974c-4854-b808-dec11575964b |
  | updated_at        | 2018-04-02T01:54:12Z                 |
  +-------------------+--------------------------------------+

  stack@openstack-instance-2:~/devstack$ openstack security group rule create \
  --protocol tcp --dst-port 22 --ingress --remote-ip 0.0.0.0/0 default
  +-------------------+--------------------------------------+
  | Field             | Value                                |
  +-------------------+--------------------------------------+
  | created_at        | 2018-04-02T01:56:25Z                 |
  | description       |                                      |
  | direction         | ingress                              |
  | ether_type        | IPv4                                 |
  | id                | adee3f3f-a5a0-497f-a12d-644e64c7015e |
  | name              | None                                 |
  | port_range_max    | 22                                   |
  | port_range_min    | 22                                   |
  | project_id        | 9d390c83cc4e46c7a40167dee68075f0     |
  | protocol          | tcp                                  |
  | remote_group_id   | None                                 |
  | remote_ip_prefix  | 0.0.0.0/0                            |
  | revision_number   | 0                                    |
  | security_group_id | bd41b78c-974c-4854-b808-dec11575964b |
  | updated_at        | 2018-04-02T01:56:25Z                 |
  +-------------------+--------------------------------------+
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;Note that I am using the security group name &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; as argument instead of security group id. As with most other arguments, we can use either name or the id. We can find the name from the output of previous show command.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now you can see 2 new rules added to the group&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  stack@openstack-instance-2:~/devstack$ openstack security group rule list -c 'IP Protocol' -c 'IP Range' -c 'Port Range' -f yaml
  - IP Protocol: null
    IP Range: null
    Port Range: ''
  - IP Protocol: null
    IP Range: null
    Port Range: ''
  - IP Protocol: tcp
    IP Range: 0.0.0.0/0
    Port Range: '22:22'
  - IP Protocol: null
    IP Range: null
    Port Range: ''
  - IP Protocol: icmp
    IP Range: 0.0.0.0/0
    Port Range: ''
  - IP Protocol: null
    IP Range: null
    Port Range: ''
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;Note that in the previous list command output, there were lot of fields. Here I have used -c argument to select the interesting fields. To select multiple columns, we have to repeat this -c argument.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we can initiate SSH and ICMP connections to this VM host using floating ip address.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  stack@openstack-instance-2:~/devstack$ ping 172.24.4.5
  PING 172.24.4.5 (172.24.4.5) 56(84) bytes of data.
  64 bytes from 172.24.4.5: icmp_seq=1 ttl=63 time=0.628 ms
  64 bytes from 172.24.4.5: icmp_seq=2 ttl=63 time=0.529 ms
  ^C
  --- 172.24.4.5 ping statistics ---
  2 packets transmitted, 2 received, 0% packet loss, time 1003ms
  rtt min/avg/max/mdev = 0.529/0.578/0.628/0.055 ms
  stack@openstack-instance-2:~/devstack$ ssh cirros@172.24.4.5
  cirros@172.24.4.5's password:
  cirros-1-1-1-10$ 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;Recall that the hosts were able to ping each other even before we updated the security group. It is because all the ports were assigned to the default security group and hosts on security group can talk to each other by virtue of an implicit rule.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I have barely scratched the surface of things possible with Openstack. However, this post should give a good idea about the general command structure and operation procedures in Openstack. For further learning, dig around the &lt;a href=&quot;https://docs.openstack.org/neutron/queens/admin/&quot;&gt;official documentation&lt;/a&gt; (pay attention to openstack version in the docs, there can be major differences between each versions) or setup a lab environment and play around.&lt;/p&gt;

&lt;p&gt;On the Neutron front, there are a lot of topics to explore such as ML2 network types, virtual switch types, L3 agents etc., Redhat’s &lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_openstack_platform/9/html-single/networking_guide/&quot;&gt;official documentation&lt;/a&gt; provides a good introduction to many of these components.&lt;/p&gt;</content><author><name>thamizh85</name></author><category term="openstack" /><category term="software defined networking" /><category term="networking" /><summary type="html">Introduction This post is a gentle introduction to networking with Openstack using the Neutron module. Being an introduction, we will not focus on setting up OpenStack from scratch. Instead we will familiarize ourselves with core concepts of Neutron and common administrative tasks. We will use the latest release of Openstack, Queens. For ease of setup, we will make use of pre-packaged Devstack environment. Devstack is a set of scripts from official OpenStack community that allows us to quickly build an Openstack instance with latest versions of all modules. It is very useful for testing and training purposes. Neutron Concepts Let us go through the important terms first: Network - A Network is a logical container of entities. To think of it in physical networking terms, it can represent a site, a DC, a campus- or anything else termed as a single network. In AWS terms, a network is similar to a VPC. Note that the definition of a Network is not entirely arbitrary as we may encounter some design choices when deciding CIDR, load balancers, routers, external gateway etc., Subnet - Subnet is similar to a vlan in traditional networking. All hosts in the same Subnet can talk to each other and share the same address space. For beginners, it is possible to confuse a Subnet with Network since both terms are used interchangeably in traditional networking. But keep in mind that one network can contain many subnets. The concept of a Subnet is similar both in OpenStack and AWS. Port - A port is a virtual NIC card which is used by resources to access network. A port is tied to a subnet and assigned with a Security group (introduced below). In AWS terms, it is similar to ENI (Elastic Network Interface) Security Group - Security groups are like port ACL in traditional networking, except that the filtering happens at the hypervisor level. Multiple ports can share the same security group. By default, entities assigned to the same Security Group can talk to each other. It is also similar in scope and function to the Security Group in AWS. Floating IP - This is similar to elastic IP in AWS. These are not tied to any port and can be re-assigned to other ports dynamically. The closest feature in traditional networking would be a static NAT. In AWS terms, it is called Elastic IP. Objective We will create the below topology on Openstack. Hosts host-1 &amp;amp; host-2 will be on same subnet while host-3 will be on another subnet. We will enable reachability between all 3 hosts. Finally, we will also enable bi-directional connectivity to host-1 from internet. Preparing the environment Make home directory for our devstack installation and download the latest copy of DevStack there. I am using Ubuntu 16.04 for my environment. $ sudo mkdir -p /opt/stack &amp;amp;&amp;amp; cd /opt/stack $ sudo git clone https://git.openstack.org/openstack-dev/devstack Switch to devstack folder and create a user account using the pre-built script. The script grants passwordless root privilege to this account. Switch to the stack account to proceed with rest of the steps. $ cd devstack $ sudo bash tools/create-stack-user.sh Switch to stack user and create a config file. Provide your preferred password which will be used for rest of the setup. The local.conf should be present in the root directory of devstack (same location as stack.sh) $ sudo su stack $ vi local.conf [[local|localrc]] ADMIN_PASSWORD=password DATABASE_PASSWORD=$ADMIN_PASSWORD RABBIT_PASSWORD=$ADMIN_PASSWORD SERVICE_PASSWORD=$ADMIN_PASSWORD Run the setup script stack.sh and watch the magic happen. It takes a while since the script installs almost every component of Openstack. ./stack.sh DevStack also provides convenient script to tear down the environment and start from scratch. So once we are done with our testing, we can run unstack.sh to bring the environment back to a blank state. After the installation is complete, source the openrc file to import openstack commands in your searchpath. source openrc Building subnets Before we create new subnets, let us list the set of pre-built subnets that were setup as part of devstack deployment. stack@openstack-instance-2:~/devstack$ openstack network list -f yaml - ID: 1fe4e71c-d94e-400c-bcee-8067b621c827 Name: public Subnets: c0718110-7493-46bf-ba48-720762e47934, fab15575-ae4f-4528-bf0d-ac40d2000484 - ID: 2ebe2084-6dae-40dd-8704-7954944238d7 Name: private Subnets: 244ed014-8b9f-4e4d-ab12-9931ecec4238, 265de598-d881-4d58-a185-1a69be39b2fd The default output format is table. To simplify horizontal scrolling, I have selected yaml output using the -f switch. Create a new network called inside. stack@openstack-instance-2:~/devstack$ openstack network create inside +---------------------------+--------------------------------------+ | Field | Value | +---------------------------+--------------------------------------+ | admin_state_up | UP | | availability_zone_hints | | | availability_zones | | | created_at | 2018-04-01T09:14:41Z | | description | | | dns_domain | None | | id | a0fc23dd-f1a5-4e9b-9d58-ea63b30d076b | | ipv4_address_scope | None | | ipv6_address_scope | None | | is_default | False | | is_vlan_transparent | None | | mtu | 1450 | | name | inside | | port_security_enabled | True | | project_id | 9d390c83cc4e46c7a40167dee68075f0 | | provider:network_type | None | | provider:physical_network | None | | provider:segmentation_id | None | | qos_policy_id | None | | revision_number | 2 | | router:external | Internal | | segments | None | | shared | False | | status | ACTIVE | | subnets | | | tags | | | updated_at | 2018-04-01T09:14:41Z | +---------------------------+--------------------------------------+ Next we will create new subnets. Before that, let us list down the existing subnets for reference. stack@openstack-instance-2:~/devstack$ openstack subnet list -f yaml - ID: 244ed014-8b9f-4e4d-ab12-9931ecec4238 Name: private-subnet Network: 2ebe2084-6dae-40dd-8704-7954944238d7 Subnet: 10.0.0.0/26 - ID: 265de598-d881-4d58-a185-1a69be39b2fd Name: ipv6-private-subnet Network: 2ebe2084-6dae-40dd-8704-7954944238d7 Subnet: fd7b:34b0:9a57::/64 Create a new subnet within the network. We will call it net-01 and assign a subnet range of 10.1.1.0/24 stack@openstack-instance-2:~/devstack$ openstack subnet create net-01 --network inside --subnet-range 10.1.1.0/24 +-------------------+--------------------------------------+ | Field | Value | +-------------------+--------------------------------------+ | allocation_pools | 10.1.1.2-10.1.1.254 | | cidr | 10.1.1.0/24 | | created_at | 2018-04-01T09:20:13Z | | description | | | dns_nameservers | | | enable_dhcp | True | | gateway_ip | 10.1.1.1 | | host_routes | | | id | 0317aa4a-84d3-44df-8781-3f04d558a473 | | ip_version | 4 | | ipv6_address_mode | None | | ipv6_ra_mode | None | | name | net-01 | | network_id | a0fc23dd-f1a5-4e9b-9d58-ea63b30d076b | | project_id | 9d390c83cc4e46c7a40167dee68075f0 | | revision_number | 0 | | segment_id | None | | service_types | | | subnetpool_id | None | | tags | | | updated_at | 2018-04-01T09:20:13Z | +-------------------+--------------------------------------+ As mentioned earlier, the relation between subnet and network is many-to-one. So we can create another subnet net-02 within the same inside network. stack@openstack-instance-2:~/devstack$ openstack subnet create net-02 --network inside --subnet-range 10.1.2.0/24 +-------------------+--------------------------------------+ | Field | Value | +-------------------+--------------------------------------+ | allocation_pools | 10.1.2.2-10.1.2.254 | | cidr | 10.1.2.0/24 | | created_at | 2018-04-01T09:21:07Z | | description | | | dns_nameservers | | | enable_dhcp | True | | gateway_ip | 10.1.2.1 | | host_routes | | | id | 6e5f2220-29da-4679-962f-22934f2c3d49 | | ip_version | 4 | | ipv6_address_mode | None | | ipv6_ra_mode | None | | name | net-02 | | network_id | a0fc23dd-f1a5-4e9b-9d58-ea63b30d076b | | project_id | 9d390c83cc4e46c7a40167dee68075f0 | | revision_number | 0 | | segment_id | None | | service_types | | | subnetpool_id | None | | tags | | | updated_at | 2018-04-01T09:21:07Z | +-------------------+--------------------------------------+ Creating nova compute instances We need to know the image names available before creating an instance. List the images available. stack@openstack-instance-2:~/devstack$ openstack image list -f yaml - ID: 2a5fbb6b-b694-4f76-ac19-4af358d1c7e8 Name: cirros-0.3.5-x86_64-disk Status: active Cirros is a tiny image available as part of devstack, useful for testing purpose. Let us create two instances under inside network running cirros image. stack@openstack-instance-2:~/devstack$ openstack server create / --flavor m1.tiny --image cirros-0.3.5-x86_64-disk --network inside host --min 2 --max 2 +-----------------------------+-----------------------------------------------------------------+ | Field | Value | +-----------------------------+-----------------------------------------------------------------+ | OS-DCF:diskConfig | MANUAL | | OS-EXT-AZ:availability_zone | | | OS-EXT-STS:power_state | NOSTATE | | OS-EXT-STS:task_state | scheduling | | OS-EXT-STS:vm_state | building | | OS-SRV-USG:launched_at | None | | OS-SRV-USG:terminated_at | None | | accessIPv4 | | | accessIPv6 | | | addresses | | | adminPass | odJy58yPdHnz | | config_drive | | | created | 2018-04-01T09:25:55Z | | flavor | m1.tiny (1) | | hostId | | | id | dbda4926-4ca6-40be-b673-d0c811ae43c2 | | image | cirros-0.3.5-x86_64-disk (2a5fbb6b-b694-4f76-ac19-4af358d1c7e8) | | key_name | None | | name | host-1 | | progress | 0 | | project_id | 9d390c83cc4e46c7a40167dee68075f0 | | properties | | | security_groups | name='default' | | status | BUILD | | updated | 2018-04-01T09:25:55Z | | user_id | dfd4e794f59f48549016de1263c30dbb | | volumes_attached | | +-----------------------------+-----------------------------------------------------------------+ Either min or max parameter is necessary. or else server build fails miserably with no clue as to what went wrong. Note that in the above command we specified only the network and not subnet. But this network has two subnets. So let us see which subnet is chosen to run the nova compute instances. stack@openstack-instance-2:~/devstack$ openstack server list -f yaml - Flavor: m1.tiny ID: 5ea3d968-aa29-4911-b658-e0b6498b09f4 Image: cirros-0.3.5-x86_64-disk Name: host-2 Networks: inside=10.1.1.9 Status: ACTIVE - Flavor: m1.tiny ID: dbda4926-4ca6-40be-b673-d0c811ae43c2 Image: cirros-0.3.5-x86_64-disk Name: host-1 Networks: inside=10.1.1.10 Status: ACTIVE It turns out the first subnet net-01 we created is being used. But if we want to specify net-02 for instance creation, it is more tricky. We need to create a port in that subnet and attach its nic during instance creation. stack@openstack-instance-2:~/devstack$ openstack port create \ --network a0fc23dd-f1a5-4e9b-9d58-ea63b30d076b --fixed-ip subnet=6e5f2220-29da-4679-962f-22934f2c3d49 if-host-02 +-----------------------+-------------------------------------------------------------------------+ | Field | Value | +-----------------------+-------------------------------------------------------------------------+ | admin_state_up | UP | | allowed_address_pairs | | | binding_host_id | None | | binding_profile | None | | binding_vif_details | None | | binding_vif_type | None | | binding_vnic_type | normal | | created_at | 2018-04-01T09:32:31Z | | data_plane_status | None | | description | | | device_id | | | device_owner | | | dns_assignment | None | | dns_domain | None | | dns_name | None | | extra_dhcp_opts | | | fixed_ips | ip_address='10.1.2.5', subnet_id='6e5f2220-29da-4679-962f-22934f2c3d49' | | id | 2b9635bf-8f93-4663-9c6d-f40f0492195c | | ip_address | None | | mac_address | fa:16:3e:40:08:73 | | name | if-host-02 | | network_id | a0fc23dd-f1a5-4e9b-9d58-ea63b30d076b | | option_name | None | | option_value | None | | port_security_enabled | True | | project_id | 9d390c83cc4e46c7a40167dee68075f0 | | qos_policy_id | None | | revision_number | 6 | | security_group_ids | bd41b78c-974c-4854-b808-dec11575964b | | status | DOWN | | subnet_id | None | | tags | | | trunk_details | None | | updated_at | 2018-04-01T09:32:31Z | +-----------------------+-------------------------------------------------------------------------+ Now create an instance in this subnet. Use the port id from above output to specify the nic. stack@openstack-instance-2:~/devstack$ openstack server create --flavor m1.tiny \ --image cirros-0.3.5-x86_64-disk --nic port-id=2b9635bf-8f93-4663-9c6d-f40f0492195c host-3 --max 1 +-----------------------------+-----------------------------------------------------------------+ | Field | Value | +-----------------------------+-----------------------------------------------------------------+ | OS-DCF:diskConfig | MANUAL | | OS-EXT-AZ:availability_zone | | | OS-EXT-STS:power_state | NOSTATE | | OS-EXT-STS:task_state | scheduling | | OS-EXT-STS:vm_state | building | | OS-SRV-USG:launched_at | None | | OS-SRV-USG:terminated_at | None | | accessIPv4 | | | accessIPv6 | | | addresses | | | adminPass | hnN294KgUTrY | | config_drive | | | created | 2018-04-01T09:52:23Z | | flavor | m1.tiny (1) | | hostId | | | id | 376c3d59-f74c-4b3b-a4c7-5b9fb9d3eef7 | | image | cirros-0.3.5-x86_64-disk (2a5fbb6b-b694-4f76-ac19-4af358d1c7e8) | | key_name | None | | name | host-3 | | progress | 0 | | project_id | 9d390c83cc4e46c7a40167dee68075f0 | | properties | | | security_groups | name='default' | | status | BUILD | | updated | 2018-04-01T09:52:23Z | | user_id | dfd4e794f59f48549016de1263c30dbb | | volumes_attached | | +-----------------------------+-----------------------------------------------------------------+ Before we move on to next section, tet us check the server instances we have created so far. stack@openstack-instance-2:~/devstack$ openstack server list -f yaml - Flavor: m1.tiny ID: 376c3d59-f74c-4b3b-a4c7-5b9fb9d3eef7 Image: cirros-0.3.5-x86_64-disk Name: host-3 Networks: inside=10.1.2.5 Status: ACTIVE - Flavor: m1.tiny ID: 5ea3d968-aa29-4911-b658-e0b6498b09f4 Image: cirros-0.3.5-x86_64-disk Name: host-2 Networks: inside=10.1.1.9 Status: ACTIVE - Flavor: m1.tiny ID: dbda4926-4ca6-40be-b673-d0c811ae43c2 Image: cirros-0.3.5-x86_64-disk Name: host-1 Networks: inside=10.1.1.10 Status: ACTIVE Neutron networking between hosts Let us see the subnet membership of each ports. stack@openstack-instance-2:~/devstack$ openstack port list -f yaml --fixed-ip subnet=net-01 - Fixed IP Addresses: 'ip_address=''10.1.1.2'', subnet_id=''0317aa4a-84d3-44df-8781-3f04d558a473'' ip_address=''10.1.2.2'', subnet_id=''6e5f2220-29da-4679-962f-22934f2c3d49''' ID: 6764de9f-deec-494b-a9b4-0903bfbfefea MAC Address: fa:16:3e:8f:47:41 Name: '' Status: ACTIVE - Fixed IP Addresses: ip_address='10.1.1.9', subnet_id='0317aa4a-84d3-44df-8781-3f04d558a473' ID: ab283b4a-5738-48c9-8a53-343a1e5c795d MAC Address: fa:16:3e:9d:b6:7f Name: '' Status: ACTIVE - Fixed IP Addresses: ip_address='10.1.1.10', subnet_id='0317aa4a-84d3-44df-8781-3f04d558a473' ID: de7ee5de-e694-4ff3-9763-d7fb86e0038c MAC Address: fa:16:3e:7a:ce:84 Name: '' Status: ACTIVE stack@openstack-instance-2:~/devstack$ openstack port list -f yaml --fixed-ip subnet=net-02 - Fixed IP Addresses: ip_address='10.1.2.5', subnet_id='6e5f2220-29da-4679-962f-22934f2c3d49' ID: 2b9635bf-8f93-4663-9c6d-f40f0492195c MAC Address: fa:16:3e:40:08:73 Name: if-host-02 Status: ACTIVE - Fixed IP Addresses: 'ip_address=''10.1.1.2'', subnet_id=''0317aa4a-84d3-44df-8781-3f04d558a473'' ip_address=''10.1.2.2'', subnet_id=''6e5f2220-29da-4679-962f-22934f2c3d49''' ID: 6764de9f-deec-494b-a9b4-0903bfbfefea MAC Address: fa:16:3e:8f:47:41 Name: '' Status: ACTIVE We can see that one port appears in both the subnets (MAC address: fa:16:3e:8f:47:41). This is the default DNS server of the network and gets attached to the subnet automatically unless we explicitly specify otherwise. To test connectivity we need to console in to the hosts. We will use virsh to console in to the instances. First let us list the hosts. stack@openstack-instance-2:~/devstack$ sudo virsh list Id Name State ---------------------------------------------------- 1 instance-00000001 running 2 instance-00000002 running 3 instance-00000003 running Console to the first instance host-1. stack@openstack-instance-2:~/devstack$ sudo virsh console 1 Connected to domain instance-00000001 Escape character is ^] login as 'cirros' user. default password: 'cubswin:)'. use 'sudo' for root. cirros login: cirros Password: $ ip add | grep 'inet.*10' inet 10.1.1.10/24 brd 10.1.1.255 scope global eth0 $ sudo hostname cirros-1-1-1-10 $ export PS1=&quot;\h$ &quot; We will see that this host can talk to other host host-2 within the same subnet. cirros-1-1-1-10$ ping 10.1.1.9 PING 10.1.1.9 (10.1.1.9): 56 data bytes 64 bytes from 10.1.1.9: seq=0 ttl=64 time=4.409 ms 64 bytes from 10.1.1.9: seq=1 ttl=64 time=1.070 ms 64 bytes from 10.1.1.9: seq=2 ttl=64 time=1.437 ms --- 10.1.1.9 ping statistics --- 3 packets transmitted, 3 packets received, 0% packet loss round-trip min/avg/max = 1.070/2.305/4.409 ms But it cannot reach host-3 which is a different subnet (net-02) cirros-1-1-1-10$ ping 10.1.2.5 PING 10.1.2.5 (10.1.2.5): 56 data bytes --- 10.1.2.5 ping statistics --- 3 packets transmitted, 0 packets received, 100% packet loss Likewise, the host cannot reach external network such as internet. cirros-1-1-1-10$ ping 8.8.8.8 PING 8.8.8.8 (8.8.8.8): 56 data bytes --- 8.8.8.8 ping statistics --- 3 packets transmitted, 0 packets received, 100% packet loss Like in any tradional network, we need a router to allow traffic between different subnets. OpenStack Neutron provides a software defined router which can attach to multiple subnets and provide the same functionality. Let us go ahead and create a router. stack@openstack-instance-2:~/devstack$ openstack router create demo_router +-------------------------+--------------------------------------+ | Field | Value | +-------------------------+--------------------------------------+ | admin_state_up | UP | | availability_zone_hints | | | availability_zones | | | created_at | 2018-04-02T00:14:29Z | | description | | | distributed | False | | external_gateway_info | None | | flavor_id | None | | ha | False | | id | f36a24b0-e4a3-41de-9fdd-73f85df9dbaa | | name | demo_router | | project_id | 9d390c83cc4e46c7a40167dee68075f0 | | revision_number | 1 | | routes | | | status | ACTIVE | | tags | | | updated_at | 2018-04-02T00:14:29Z | +-------------------------+--------------------------------------+ List the routers visible to validate the result. You can see an existing pre-built router and the one we created just now. stack@openstack-instance-2:~/devstack$ openstack router list -f yaml - Distributed: false HA: false ID: 58cc905f-4c8b-4641-ba92-a1a491d818ab Name: router1 Project: 9d390c83cc4e46c7a40167dee68075f0 State: UP Status: ACTIVE - Distributed: false HA: false ID: f36a24b0-e4a3-41de-9fdd-73f85df9dbaa Name: demo_router Project: 9d390c83cc4e46c7a40167dee68075f0 State: UP Status: ACTIVE Now we will attach our subnets to the router. stack@openstack-instance-2:~/devstack$ openstack router add subnet demo_router net-01 stack@openstack-instance-2:~/devstack$ openstack router add subnet demo_router net-02 You can see one new port from each subnet getting attached to the router. stack@openstack-instance-2:~/devstack$ openstack port list -f yaml --router demo_router - Fixed IP Addresses: ip_address='10.1.1.1', subnet_id='0317aa4a-84d3-44df-8781-3f04d558a473' ID: 468ff846-fb1d-4ef2-85b0-3957885c59a8 MAC Address: fa:16:3e:b1:31:fa Name: '' Status: ACTIVE - Fixed IP Addresses: ip_address='10.1.2.1', subnet_id='6e5f2220-29da-4679-962f-22934f2c3d49' ID: ee15064b-26f2-46ae-bc09-02db440edd3b MAC Address: fa:16:3e:7c:62:28 Name: '' Status: ACTIVE To reduce the output I have filtered the port list with an argument –router . Most list commands have ability to filter output like this. Use the interactive help menu to figure out the filter options. Let us try to reach the host on the other network. cirros-1-1-1-10$ ping 10.1.2.5 PING 10.1.2.5 (10.1.2.5): 56 data bytes 64 bytes from 10.1.2.5: seq=0 ttl=63 time=4.141 ms 64 bytes from 10.1.2.5: seq=1 ttl=63 time=1.499 ms --- 10.1.2.5 ping statistics --- 2 packets transmitted, 2 packets received, 0% packet loss round-trip min/avg/max = 1.499/2.820/4.141 ms Success! As expected, the host is one hop away. cirros-1-1-1-10$ traceroute 10.1.2.5 traceroute to 10.1.2.5 (10.1.2.5), 30 hops max, 46 byte packets 1 host-10-1-1-1.openstacklocal (10.1.1.1) 2.217 ms 0.360 ms 0.301 ms 2 host-10-1-2-5.openstacklocal (10.1.2.5) 1.568 ms 1.155 ms 0.803 ms But the outside world connection is not ready yet. For that we need to attach it to a public network. Recall that there was a pre-built public network as part of devstack setup. We will use this network to communicate to outside world. stack@openstack-instance-2:~/devstack$ openstack router set --external-gateway public demo_router stack@openstack-instance-2:~/devstack$ openstack router show demo_router -f yaml admin_state_up: UP availability_zone_hints: '' availability_zones: nova created_at: '2018-04-02T00:14:29Z' description: '' distributed: false external_gateway_info: '{&quot;network_id&quot;: &quot;1fe4e71c-d94e-400c-bcee-8067b621c827&quot;, &quot;enable_snat&quot;: true, &quot;external_fixed_ips&quot;: [{&quot;subnet_id&quot;: &quot;c0718110-7493-46bf-ba48-720762e47934&quot;, &quot;ip_address&quot;: &quot;172.24.4.3&quot;}, {&quot;subnet_id&quot;: &quot;fab15575-ae4f-4528-bf0d-ac40d2000484&quot;, &quot;ip_address&quot;: &quot;2001:db8::6&quot;}]}' flavor_id: null ha: false id: f36a24b0-e4a3-41de-9fdd-73f85df9dbaa interfaces_info: '[{&quot;subnet_id&quot;: &quot;0317aa4a-84d3-44df-8781-3f04d558a473&quot;, &quot;ip_address&quot;: &quot;10.1.1.1&quot;, &quot;port_id&quot;: &quot;468ff846-fb1d-4ef2-85b0-3957885c59a8&quot;}, {&quot;subnet_id&quot;: &quot;6e5f2220-29da-4679-962f-22934f2c3d49&quot;, &quot;ip_address&quot;: &quot;10.1.2.1&quot;, &quot;port_id&quot;: &quot;ee15064b-26f2-46ae-bc09-02db440edd3b&quot;}]' name: demo_router project_id: 9d390c83cc4e46c7a40167dee68075f0 revision_number: 5 routes: '' status: ACTIVE tags: '' updated_at: '2018-04-02T00:32:54Z' The show command is similar to list command, but can show more detailed information about a single resource. As expected, it requires an additional unique identifier argument to identify the resource which we want to display. See that there is a new external_gateway_info section. Now let us try to reach the internet. stack@openstack-instance-2:~/devstack$ sudo virsh console 1 Connected to domain instance-00000001 Escape character is ^] cirros-1-1-1-10$ ping 8.8.8.8 PING 8.8.8.8 (8.8.8.8): 56 data bytes 64 bytes from 8.8.8.8: seq=0 ttl=50 time=7.129 ms 64 bytes from 8.8.8.8: seq=1 ttl=51 time=1.483 ms 64 bytes from 8.8.8.8: seq=2 ttl=51 time=1.137 ms  --- 8.8.8.8 ping statistics --- 3 packets transmitted, 3 packets received, 0% packet loss round-trip min/avg/max = 1.137/3.249/7.129 ms Success! To see how this traffic reaches out to internet, we will do tcpdump on the hypervisor. stack@openstack-instance-2:~/ sudo tcpdump 'host 8.8.8.8' -X tcpdump: verbose output suppressed, use -v or -vv for full protocol decode listening on br-ex, link-type EN10MB (Ethernet), capture size 262144 bytes 00:37:14.019550 IP 172.24.4.3 &amp;gt; google-public-dns-a.google.com: ICMP echo request, id 49153, seq 0, length 64 0x0000: 4500 0054 0979 4000 3f01 7205 ac18 0403 E..T.y@.?.r..... 0x0010: 0808 0808 0800 5076 c001 0000 73cd 73ba ......Pv....s.s. 0x0020: 0000 0000 0000 0000 0000 0000 0000 0000 ................ 0x0030: 0000 0000 0000 0000 0000 0000 0000 0000 ................ 0x0040: 0000 0000 0000 0000 0000 0000 0000 0000 ................ 0x0050: 0000 0000 .... 00:37:14.020493 IP google-public-dns-a.google.com &amp;gt; 172.24.4.3: ICMP echo reply, id 49153, seq 0, length 64 0x0000: 4500 0054 0000 0000 3401 c67e 0808 0808 E..T....4..~.... 0x0010: ac18 0403 0000 5876 c001 0000 73cd 73ba ......Xv....s.s. 0x0020: 0000 0000 0000 0000 0000 0000 0000 0000 ................ 0x0030: 0000 0000 0000 0000 0000 0000 0000 0000 ................ 0x0040: 0000 0000 0000 0000 0000 0000 0000 0000 ................ 0x0050: 0000 0000 The traffic from the host is being source NAT by the router to go out to the internet (recall from the earlier output that 172.24.4.3 belongs to the external gateway of the router). In traditional networking term this is called NAT overloading. This can provide only outbound connectivity for the host. In order to provide inbound connectivity to the host, we need to create a floating ip. This is similar to elastic IP in AWS or staic NAT in traditional networking. stack@openstack-instance-2:~/devstack$ openstack floating ip create public +---------------------+--------------------------------------+ | Field | Value | +---------------------+--------------------------------------+ | created_at | 2018-04-02T00:44:14Z | | description | | | fixed_ip_address | None | | floating_ip_address | 172.24.4.5 | | floating_network_id | 1fe4e71c-d94e-400c-bcee-8067b621c827 | | id | e2ff37e4-f8f5-4413-98aa-e0df516c1a3b | | name | 172.24.4.5 | | port_id | None | | project_id | 9d390c83cc4e46c7a40167dee68075f0 | | qos_policy_id | None | | revision_number | 0 | | router_id | None | | status | DOWN | | subnet_id | None | | tags | [] | | updated_at | 2018-04-02T00:44:14Z | +---------------------+--------------------------------------+ Attach this to our host-1 instance. You can now see the floating IP also listed in the openstack server list output. stack@openstack-instance-2:~/devstack$ openstack server add floating ip host-1 172.24.4.5 stack@openstack-instance-2:~/devstack$ openstack server list --name host-1 -f yaml - Flavor: m1.tiny ID: dbda4926-4ca6-40be-b673-d0c811ae43c2 Image: cirros-0.3.5-x86_64-disk Name: host-1 Networks: inside=10.1.1.10, 172.24.4.5 Status: ACTIVE Here you can see the floating ip is mapped to our port-id. stack@openstack-instance-2:~/devstack$ openstack floating ip show 172.24.4.5 +---------------------+--------------------------------------+ | Field | Value | +---------------------+--------------------------------------+ | created_at | 2018-04-02T00:44:14Z | | description | | | fixed_ip_address | 10.1.1.10 | | floating_ip_address | 172.24.4.5 | | floating_network_id | 1fe4e71c-d94e-400c-bcee-8067b621c827 | | id | e2ff37e4-f8f5-4413-98aa-e0df516c1a3b | | name | 172.24.4.5 | | port_id | de7ee5de-e694-4ff3-9763-d7fb86e0038c | | project_id | 9d390c83cc4e46c7a40167dee68075f0 | | qos_policy_id | None | | revision_number | 2 | | router_id | f36a24b0-e4a3-41de-9fdd-73f85df9dbaa | | status | ACTIVE | | subnet_id | None | | tags | [] | | updated_at | 2018-04-02T00:47:14Z | +---------------------+--------------------------------------+ We require one last step to initiate inbound connections to the host. Recall that each ports are assigned with a security group. Since this is an inbound connection, we need to explicitly permit access in security group. Check the Security Group assigned to our port. stack@openstack-instance-2:~/devstack$ openstack port \show de7ee5de-e694-4ff3-9763-d7fb86e0038c -c 'security_group_ids' -f yaml security_group_ids: bd41b78c-974c-4854-b808-dec11575964b Let us see the rules which are permitted by this security group. stack@openstack-instance-2:~/devstack$ openstack security group show bd41b78c-974c-4854-b808-dec11575964b -f yaml created_at: '2018-04-01T09:01:20Z' description: Default security group id: bd41b78c-974c-4854-b808-dec11575964b name: default project_id: 9d390c83cc4e46c7a40167dee68075f0 revision_number: 6 rules: 'created_at=''2018-04-01T09:01:20Z'', direction=''ingress'', ethertype=''IPv4'', id=''2ab4f8a5-43ed-4f3e-8c43-cc854bc8feb3'', remote_group_id=''bd41b78c-974c-4854-b808-dec11575964b'', updated_at=''2018-04-01T09:01:20Z'' created_at=''2018-04-01T09:01:20Z'', direction=''egress'', ethertype=''IPv6'', id=''5c33d0ac-8ee9-4bd7-951c-dca998931828'', updated_at=''2018-04-01T09:01:20Z'' created_at=''2018-04-01T09:01:20Z'', direction=''ingress'', ethertype=''IPv6'', id=''d7c7a642-485b-482e-8d26-a958aaafa19e'', remote_group_id=''bd41b78c-974c-4854-b808-dec11575964b'', updated_at=''2018-04-01T09:01:20Z'' created_at=''2018-04-01T09:01:20Z'', direction=''egress'', ethertype=''IPv4'', id=''f41405df-d0c9-4427-ba11-f0a26b025c3e'', updated_at=''2018-04-01T09:01:20Z''' tags: [] updated_at: '2018-04-02T01:56:25Z' Here you can see 4 rules, two each for IPv4 and IPv6. For egress rules, you can see that there is no remote prefix or group id configured. It means all outbound connections are permitted. For ingress traffic, you can see that the remote_group_id references to self. It means that all ports assigned to the same security group can send inbound traffic unhindered. Let us add more rules to permit ICMP and SSH stack@openstack-instance-2:~/devstack$ openstack security group rule create \ --protocol icmp --ingress --remote-ip 0.0.0.0/0 default +-------------------+--------------------------------------+ | Field | Value | +-------------------+--------------------------------------+ | created_at | 2018-04-02T01:54:12Z | | description | | | direction | ingress | | ether_type | IPv4 | | id | df23fec9-b87a-47ef-8f38-67472de46071 | | name | None | | port_range_max | None | | port_range_min | None | | project_id | 9d390c83cc4e46c7a40167dee68075f0 | | protocol | icmp | | remote_group_id | None | | remote_ip_prefix | 0.0.0.0/0 | | revision_number | 0 | | security_group_id | bd41b78c-974c-4854-b808-dec11575964b | | updated_at | 2018-04-02T01:54:12Z | +-------------------+--------------------------------------+ stack@openstack-instance-2:~/devstack$ openstack security group rule create \ --protocol tcp --dst-port 22 --ingress --remote-ip 0.0.0.0/0 default +-------------------+--------------------------------------+ | Field | Value | +-------------------+--------------------------------------+ | created_at | 2018-04-02T01:56:25Z | | description | | | direction | ingress | | ether_type | IPv4 | | id | adee3f3f-a5a0-497f-a12d-644e64c7015e | | name | None | | port_range_max | 22 | | port_range_min | 22 | | project_id | 9d390c83cc4e46c7a40167dee68075f0 | | protocol | tcp | | remote_group_id | None | | remote_ip_prefix | 0.0.0.0/0 | | revision_number | 0 | | security_group_id | bd41b78c-974c-4854-b808-dec11575964b | | updated_at | 2018-04-02T01:56:25Z | +-------------------+--------------------------------------+ Note that I am using the security group name default as argument instead of security group id. As with most other arguments, we can use either name or the id. We can find the name from the output of previous show command. Now you can see 2 new rules added to the group stack@openstack-instance-2:~/devstack$ openstack security group rule list -c 'IP Protocol' -c 'IP Range' -c 'Port Range' -f yaml - IP Protocol: null IP Range: null Port Range: '' - IP Protocol: null IP Range: null Port Range: '' - IP Protocol: tcp IP Range: 0.0.0.0/0 Port Range: '22:22' - IP Protocol: null IP Range: null Port Range: '' - IP Protocol: icmp IP Range: 0.0.0.0/0 Port Range: '' - IP Protocol: null IP Range: null Port Range: '' Note that in the previous list command output, there were lot of fields. Here I have used -c argument to select the interesting fields. To select multiple columns, we have to repeat this -c argument. Now we can initiate SSH and ICMP connections to this VM host using floating ip address. stack@openstack-instance-2:~/devstack$ ping 172.24.4.5 PING 172.24.4.5 (172.24.4.5) 56(84) bytes of data. 64 bytes from 172.24.4.5: icmp_seq=1 ttl=63 time=0.628 ms 64 bytes from 172.24.4.5: icmp_seq=2 ttl=63 time=0.529 ms ^C --- 172.24.4.5 ping statistics --- 2 packets transmitted, 2 received, 0% packet loss, time 1003ms rtt min/avg/max/mdev = 0.529/0.578/0.628/0.055 ms stack@openstack-instance-2:~/devstack$ ssh cirros@172.24.4.5 cirros@172.24.4.5's password: cirros-1-1-1-10$ Recall that the hosts were able to ping each other even before we updated the security group. It is because all the ports were assigned to the default security group and hosts on security group can talk to each other by virtue of an implicit rule. Conclusion I have barely scratched the surface of things possible with Openstack. However, this post should give a good idea about the general command structure and operation procedures in Openstack. For further learning, dig around the official documentation (pay attention to openstack version in the docs, there can be major differences between each versions) or setup a lab environment and play around. On the Neutron front, there are a lot of topics to explore such as ML2 network types, virtual switch types, L3 agents etc., Redhat’s official documentation provides a good introduction to many of these components.</summary></entry><entry><title type="html">Solving an ancient Chinese math puzzle with Constraint Programming using Google’s OR-Tools</title><link href="http://localhost:4000/modelling/2017/12/09/2017-12-09-solving-an-ancient-chinese-math-puzzle-with-constraint-programming-using-googles-or-tools/" rel="alternate" type="text/html" title="Solving an ancient Chinese math puzzle with Constraint Programming using Google's OR-Tools" /><published>2017-12-09T12:00:00+08:00</published><updated>2017-12-09T12:00:00+08:00</updated><id>http://localhost:4000/modelling/2017/12/09/2017-12-09-solving-an-ancient-chinese-math-puzzle-with-constraint-programming-using-googles-or-tools</id><content type="html" xml:base="http://localhost:4000/modelling/2017/12/09/2017-12-09-solving-an-ancient-chinese-math-puzzle-with-constraint-programming-using-googles-or-tools/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.wikiwand.com/en/Constraint_programming&quot;&gt;Constraint programming (CP)&lt;/a&gt; is a subset of Operations Research (OR) where our task is to identify all feasible solutions to a given problem that satisfies a set of constraints. This is different from an optimization problem, where an objective function is defined and we arrive at solutions that either maximizes or minimizes an objective function.&lt;/p&gt;

&lt;p&gt;CP is mostly well suited for solving logic puzzles, since most logic puzzles are based on constraints and enumerating feasible solutions. But apart from recreational maths, CP also has a lot of practical applications in Scheduling, Resource allocation, Manufacturing etc.,&lt;/p&gt;

&lt;p&gt;Recently I came across &lt;a href=&quot;https://developers.google.com/optimization/&quot;&gt;or-tools&lt;/a&gt; from Google github repo. It is a suite of libraries for solving Operations Research problems. I wanted to give it a try by solving a simple logic puzzle. The puzzle I chose is called &lt;a href=&quot;https://www.wikiwand.com/en/Hundred_Fowls_Problem&quot;&gt;Hundred Fowls Problem&lt;/a&gt;. Let us see how it goes.&lt;/p&gt;

&lt;h2 id=&quot;hundred-fowls-problem&quot;&gt;Hundred Fowls problem&lt;/h2&gt;
&lt;p&gt;This puzzle found in the sixth-century work of mathematician Chang Chiu-chen called the “hundred fowls” problem asks:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If a rooster is worth five coins, a hen three coins, and three chickens together are worth one coin, how many roosters, hens, and chicks totalling 100 can be bought for 100 coins?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This translates to solving a set of 2 algebraic equations with 3 variables. In real numbers, there are infinite solutions to this puzzle since we are short by one non-equivalent equation to bind values to 3 variables. However, buying non-integer number of fowls can get tricky, so we can safely assume that we are dealing with 3 integer valued variables here. This reduces the solution space to a finite count, but still there are more than one feasible solution. This is a perfect candidate for constraint programming since we need to identify all feasible solutions and not maximize/minimize an objective function.&lt;/p&gt;

&lt;h3 id=&quot;components-of-an-or-model&quot;&gt;Components of an OR model&lt;/h3&gt;
&lt;p&gt;A model for an optimization problem can be thought to have 3 components:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Decision variables&lt;/li&gt;
  &lt;li&gt;Constraints&lt;/li&gt;
  &lt;li&gt;Objectives&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Decision variables are the answer an OR problem tries to solve. In our case, it is the valid number of fowls of each type that we can buy. Constraints are the limits imposed on the problem. Here we have total cost and total bird count imposed as limits. An objective is the goal of an OR problem such as maximize profit or minimize project time etc., Most often in Constraint Programming, we don’t need to work with objectives and we don’t have one for our problem as well.&lt;/p&gt;

&lt;h3 id=&quot;setting-up-the-code&quot;&gt;Setting up the code&lt;/h3&gt;
&lt;p&gt;Let us first import the necessary modules and create a Solver and define our parameters.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ortools.constraint_solver&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pywrapcp&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pywrapcp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Solver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hundred_fowls&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ROOSTER_COST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;HEN_COST&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;THREE_CHICK_COST&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;total_cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;total_fowls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;decision-variables&quot;&gt;Decision Variables&lt;/h4&gt;
&lt;p&gt;Let us first try to define the limits our decision variables can take i.e., the maximum number of roosters, hens or chicks that we need to consider. One can enumerate each fowl type up to the total count (100) but this increases the search domain unnecessarily. For e.g, we cannot buy more than 20 roosters since we would exceed 100 coins nor can we buy 300 chicks for 100 coins. So, we try to establish the upper limit for each of our decision variables as below:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;math&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;floor&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;max_rooster&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total_fowls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total_cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ROOSTER_COST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;max_hen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total_fowls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total_cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HEN_COST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;max_chick_set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total_fowls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total_cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;THREE_CHICK_COST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# a set of 3 chickens &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Notice that for chick count, we are grouping them in sets of three. This is because the unit cost of a chick is a fraction (1/3) and the solver doesn’t allow us to multiply float numbers with IntVar object (which we will come to know later). This is perfectly acceptable for our scenario since chick count always needs to be a multiple of 3 or else the total cost will never be an integer (100 in this case). Besides, this also reduces the search space for chick count by a factor of 3, eliminating obvious non-solutions.&lt;/p&gt;

&lt;p&gt;We now have to spec out our decision variables. OR-Tools supports different types of decision variables such as Integers, Intervals etc., In our current challenge the decision variable is an integer so we assign it by using IntVar method. The first two values gives the lower and upper bounds for the variables. The last value is an arbitrary string handle for output representation. I am not sure under which scenarios the last variable will come to use, but likely it is an object name required for the underlying C++ code. The python module we use for or-tools is actually a wrapper for the core C++ code.&lt;/p&gt;

&lt;p&gt;For our problem the decision variables can be defined as below:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# since the puzzle requires us to buy atleast one fowl &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# of each type we will start enumerating from one&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rooster_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IntVar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_rooster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Rooster&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hen_count&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IntVar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_hen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hen&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;chick_set_count&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IntVar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_chick_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Chick&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;constraints&quot;&gt;Constraints&lt;/h4&gt;
&lt;p&gt;Next we add the constraints for our model. It is done using the “Add” method of Solver object.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rooster_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; 
           &lt;span class=&quot;n&quot;&gt;hen_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; 
           &lt;span class=&quot;n&quot;&gt;chick_set_count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total_fowls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rooster_count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ROOSTER_COST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; 
           &lt;span class=&quot;n&quot;&gt;hen_count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HEN_COST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; 
           &lt;span class=&quot;n&quot;&gt;chick_set_count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;THREE_CHICK_COST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total_cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;navigating-the-search-space&quot;&gt;Navigating the search space&lt;/h4&gt;
&lt;p&gt;Next we create a decision builder which specifies how to iterate through all possible values for our problems. It is done using the Phase method. The first arguemnt is an array of our decision variables. Second argument is how we choose the next value to try for our decision variable. Last argument is how we start assigning value to our variable (from minimum or maximum). We will go with the defauls although for larger problems, we could use some sort of heuristics to search only interesting portions of a search space. You can refer to &lt;a href=&quot;http://www.lia.disi.unibo.it/Staff/MicheleLombardi/or-tools-doc/reference_manual/or-tools/src/constraint_solver/classoperations__research_1_1Solver.html#8bda7ed6e7e533cca4c44eba6efffc8b&quot;&gt;or-tools documentation&lt;/a&gt; for other search strategies.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Phase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rooster_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hen_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chick_set_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; 
                  &lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHOOSE_FIRST_UNBOUND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                  &lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ASSIGN_MIN_VALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;solving-the-model&quot;&gt;Solving the model&lt;/h3&gt;
&lt;p&gt;Finally we solve our model and iterate through our solutions.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NextSolution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{0} Roosters, {1} Hen and {2} Chicks&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rooster_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hen_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chick_set_count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Number of unique solutions found - {0}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This produces 3 solutions to the puzzle.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Rooster(4) Roosters, Hen(18) Hen and 78 Chicks
Rooster(8) Roosters, Hen(11) Hen and 81 Chicks
Rooster(12) Roosters, Hen(4) Hen and 84 Chicks
Number of unique solutions found - 3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h2&gt;

&lt;p&gt;or-tools manual on &lt;a href=&quot;https://acrogenesis.com/or-tools/documentation/user_manual/manual/introduction/what_is_cp.html&quot;&gt;Constraint Programming&lt;/a&gt; is quite comprehensive. As always, best way to learn is to study existing code and implementations. In this regards, the &lt;a href=&quot;https://github.com/google/or-tools/tree/master/examples&quot;&gt;example scripts&lt;/a&gt; from or-tools public repo is quite indispensable for learning. There is a good amount of example scripts for some of the most popular OR challenges.&lt;/p&gt;</content><author><name>thamizh85</name></author><category term="or-tools" /><category term="python" /><category term="puzzle" /><category term="operations research" /><category term="constraint programming" /><summary type="html">Introduction Constraint programming (CP) is a subset of Operations Research (OR) where our task is to identify all feasible solutions to a given problem that satisfies a set of constraints. This is different from an optimization problem, where an objective function is defined and we arrive at solutions that either maximizes or minimizes an objective function. CP is mostly well suited for solving logic puzzles, since most logic puzzles are based on constraints and enumerating feasible solutions. But apart from recreational maths, CP also has a lot of practical applications in Scheduling, Resource allocation, Manufacturing etc., Recently I came across or-tools from Google github repo. It is a suite of libraries for solving Operations Research problems. I wanted to give it a try by solving a simple logic puzzle. The puzzle I chose is called Hundred Fowls Problem. Let us see how it goes. Hundred Fowls problem This puzzle found in the sixth-century work of mathematician Chang Chiu-chen called the “hundred fowls” problem asks: If a rooster is worth five coins, a hen three coins, and three chickens together are worth one coin, how many roosters, hens, and chicks totalling 100 can be bought for 100 coins? This translates to solving a set of 2 algebraic equations with 3 variables. In real numbers, there are infinite solutions to this puzzle since we are short by one non-equivalent equation to bind values to 3 variables. However, buying non-integer number of fowls can get tricky, so we can safely assume that we are dealing with 3 integer valued variables here. This reduces the solution space to a finite count, but still there are more than one feasible solution. This is a perfect candidate for constraint programming since we need to identify all feasible solutions and not maximize/minimize an objective function. Components of an OR model A model for an optimization problem can be thought to have 3 components: Decision variables Constraints Objectives Decision variables are the answer an OR problem tries to solve. In our case, it is the valid number of fowls of each type that we can buy. Constraints are the limits imposed on the problem. Here we have total cost and total bird count imposed as limits. An objective is the goal of an OR problem such as maximize profit or minimize project time etc., Most often in Constraint Programming, we don’t need to work with objectives and we don’t have one for our problem as well. Setting up the code Let us first import the necessary modules and create a Solver and define our parameters. from ortools.constraint_solver import pywrapcp solver = pywrapcp.Solver(&quot;hundred_fowls&quot;) ROOSTER_COST = 5 HEN_COST = 3 THREE_CHICK_COST = 1 total_cost = 100 total_fowls = 100 Decision Variables Let us first try to define the limits our decision variables can take i.e., the maximum number of roosters, hens or chicks that we need to consider. One can enumerate each fowl type up to the total count (100) but this increases the search domain unnecessarily. For e.g, we cannot buy more than 20 roosters since we would exceed 100 coins nor can we buy 300 chicks for 100 coins. So, we try to establish the upper limit for each of our decision variables as below: from math import floor max_rooster = min(total_fowls, floor(total_cost/ROOSTER_COST)) max_hen = min(total_fowls, floor(total_cost/HEN_COST)) max_chick_set = min(total_fowls, floor(total_cost/THREE_CHICK_COST)) # a set of 3 chickens Notice that for chick count, we are grouping them in sets of three. This is because the unit cost of a chick is a fraction (1/3) and the solver doesn’t allow us to multiply float numbers with IntVar object (which we will come to know later). This is perfectly acceptable for our scenario since chick count always needs to be a multiple of 3 or else the total cost will never be an integer (100 in this case). Besides, this also reduces the search space for chick count by a factor of 3, eliminating obvious non-solutions. We now have to spec out our decision variables. OR-Tools supports different types of decision variables such as Integers, Intervals etc., In our current challenge the decision variable is an integer so we assign it by using IntVar method. The first two values gives the lower and upper bounds for the variables. The last value is an arbitrary string handle for output representation. I am not sure under which scenarios the last variable will come to use, but likely it is an object name required for the underlying C++ code. The python module we use for or-tools is actually a wrapper for the core C++ code. For our problem the decision variables can be defined as below: # since the puzzle requires us to buy atleast one fowl # of each type we will start enumerating from one rooster_count = solver.IntVar(1, max_rooster, &quot;Rooster&quot;) hen_count = solver.IntVar(1, max_hen, &quot;Hen&quot;) chick_set_count = solver.IntVar(1, max_chick_set, &quot;Chick&quot;) Constraints Next we add the constraints for our model. It is done using the “Add” method of Solver object. solver.Add(rooster_count + hen_count + chick_set_count*3 == total_fowls) solver.Add(rooster_count*ROOSTER_COST + hen_count*HEN_COST + chick_set_count*THREE_CHICK_COST == total_cost) Navigating the search space Next we create a decision builder which specifies how to iterate through all possible values for our problems. It is done using the Phase method. The first arguemnt is an array of our decision variables. Second argument is how we choose the next value to try for our decision variable. Last argument is how we start assigning value to our variable (from minimum or maximum). We will go with the defauls although for larger problems, we could use some sort of heuristics to search only interesting portions of a search space. You can refer to or-tools documentation for other search strategies. db = solver.Phase([rooster_count, hen_count, chick_set_count], solver.CHOOSE_FIRST_UNBOUND, solver.ASSIGN_MIN_VALUE) Solving the model Finally we solve our model and iterate through our solutions. solver.Solve(db) count = 0 while solver.NextSolution(): count += 1 print(&quot;{0} Roosters, {1} Hen and {2} Chicks&quot;.format(rooster_count, hen_count, chick_set_count.Value()*3)) print(&quot;Number of unique solutions found - {0}&quot;.format(count)) This produces 3 solutions to the puzzle. Rooster(4) Roosters, Hen(18) Hen and 78 Chicks Rooster(8) Roosters, Hen(11) Hen and 81 Chicks Rooster(12) Roosters, Hen(4) Hen and 84 Chicks Number of unique solutions found - 3 Further Reading or-tools manual on Constraint Programming is quite comprehensive. As always, best way to learn is to study existing code and implementations. In this regards, the example scripts from or-tools public repo is quite indispensable for learning. There is a good amount of example scripts for some of the most popular OR challenges.</summary></entry><entry><title type="html">Jumbo Ping Fallacy- Using Monte-Carlo Simulation to model ping loss behavior</title><link href="http://localhost:4000/modelling/2017/11/24/jumbo-ping-fallacy-using-monte-carlo-simulation-to-model-ping-loss-behavior/" rel="alternate" type="text/html" title="Jumbo Ping Fallacy- Using Monte-Carlo Simulation to model ping loss behavior" /><published>2017-11-24T08:01:28+08:00</published><updated>2017-11-24T08:01:28+08:00</updated><id>http://localhost:4000/modelling/2017/11/24/jumbo-ping-fallacy-using-monte-carlo-simulation-to-model-ping-loss-behavior</id><content type="html" xml:base="http://localhost:4000/modelling/2017/11/24/jumbo-ping-fallacy-using-monte-carlo-simulation-to-model-ping-loss-behavior/">&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;
&lt;p&gt;Recently we had a cabling issue in our core infrastructure which caused around 3 to 12% packet loss across few IP streams. One of my colleagues made an interesting observation that when he tried to ping with large packet size (5000 bytes) the packet loss rose up to 40%. In his opinion, that meant some applications were experiencing up to 40% packet loss. I seldom do large packet ping tests unless I am troubleshooting MTU issues, so to me this observation was interesting.&lt;/p&gt;

&lt;p&gt;At the outset, it may look like an aggravated problem. But you know that your network path MTU doesn’t support jumbo frames end-to-end. If so why is there a difference in packet loss rate when you ping with large datagams? Once you reason that the ping test results only represent ICMP datagram loss and not ethernet frame loss, you will realize that both tests results represent the same network performane but in different metrics. Interpreting them as two separate test cases is fallacious. Let us explore why.&lt;/p&gt;

&lt;h2 id=&quot;normal-ping-vs-large-ping&quot;&gt;Normal ping vs Large ping&lt;/h2&gt;
&lt;p&gt;In windows a normal ping packet size is 32 bytes and in most environments, the default MTU is 1500 bytes. So a single frame is sufficient to transmit a ping packet. Things get weirder when we ping with large packets. In windows, you can specify the ping packet size using -l option. Note that this size doesn’t include the packet header (20 bytes for IP header + 8 bytes for ICMP header). Which means with a 1500 MTU size, we can send only up to 1472 bytes in a single frame. Any length above this must be fragmented.&lt;/p&gt;

&lt;p&gt;We can test this easily. Below is the result when pinging with 1472 as the ping size (&lt;code class=&quot;highlighter-rouge&quot;&gt;ping 8.8.8.8 -n 2 -l 1472&lt;/code&gt;)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Capturing on 'Ethernet 2'
    1   0.000000     10.1.1.1 → 8.8.8.8      ICMP 1514 Echo (ping) request  id=0x0001, seq=8/2048, ttl=128
    2   0.015698      8.8.8.8 → 10.1.1.1     ICMP 106 Echo (ping) reply    id=0x0001, seq=8/2048, ttl=45
2 packets captured
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When we ping with just one more byte, you can see that 2 packets are sent in place of 1 ((&lt;code class=&quot;highlighter-rouge&quot;&gt;ping 8.8.8.8 -n 2 -l 1473&lt;/code&gt;)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Capturing on 'Ethernet 2'
    1   0.000000     10.1.1.1 → 8.8.8.8      IPv4 1514 Fragmented IP protocol (proto=ICMP 1, off=0, ID=4fab)
    2   0.000016     10.1.1.1 → 8.8.8.8      ICMP 35 Echo (ping) request  id=0x0001, seq=10/2560, ttl=128
2 packets captured
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So when we ping with 5000 bytes, 4 packets are sent. And ICMP protocol considers a datagram to be lost even when one of them fails. So the probability of the ICMP datagram loss is higher than the probability of single frame loss.&lt;/p&gt;

&lt;p&gt;But is this what is happening in the ping test result? We can calculate the probability of datagram loss using probability theory but let us defer to it later on and do a numerical simulation first using Monte Carlo simulation.&lt;/p&gt;

&lt;h2 id=&quot;monte-carlo-simulation&quot;&gt;Monte Carlo Simulation&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.wikiwand.com/en/Monte_Carlo_method&quot;&gt;Monte carlo simulation&lt;/a&gt; is a rather fancy title for a simple simulation using random event generator, but it is quite handy and widely used. Usually Monte Carlo simulation is useful for simulating events that are truly random in nature. In a chaotic backbone network, that handles traffic stream of different kinds, we can assume the frame loss to happen approximately in a random fashion.&lt;/p&gt;

&lt;p&gt;Let us write a short program to simulate random packet loss.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;np&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sampleCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100000&lt;/span&gt;                               &lt;span class=&quot;c&quot;&gt;# total events in our simulation&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.03&lt;/span&gt;                                           &lt;span class=&quot;c&quot;&gt;# ethernet frame loss probability&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;grpSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;                                        &lt;span class=&quot;c&quot;&gt;# packet count per datagram, 5000 bytes = 4 packets&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;grpEventCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sampleCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grpSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;# datagram count&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# generate random packets with p% packet loss&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                          &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sampleCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# group discrete packets into a datagram&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;grpEvents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grpEventCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grpSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 

&lt;span class=&quot;c&quot;&gt;# function to determine datagram loss&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkFailure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grpEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count_nonzero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grpEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grpSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# Return 1 if the success count is less than 3&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# count the result&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;failCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grpEvent&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grpEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;failCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checkFailure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grpEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The probability of a group failure is {:.2f}&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;failCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grpEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;The probability of a group failure is 11.78%
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There you see! Even a 3% ethernet frame loss translates to 12% packet loss for jumbo ping test. This is same as what we observed. Now this is just a simulation with random input. But does the math agree?&lt;/p&gt;

&lt;h2 id=&quot;using-probability-theory&quot;&gt;Using Probability Theory&lt;/h2&gt;
&lt;p&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt; is the probability of a single frame loss, &lt;code class=&quot;highlighter-rouge&quot;&gt;(1-p)&lt;/code&gt; is the probability of a successful transfer. And a datagram is successful only if all of its frames are successful. So an ICMP datagram which is 4 frame long, will have &lt;code class=&quot;highlighter-rouge&quot;&gt;(1-p)**4&lt;/code&gt; probability of succesful delivery. To calculate the failure rate, just take its inverse.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0.11470719000000007
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As expected the simulation is slightly off from the calculated probability. But it will get closer to the real figure when we increase the simulation count.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The exactness of our calculation hinges on the assumption of random nature of packet loss. While it happened to be close to true in my case, it need not be all the time. The link may be loaded in a bursty manner and since our ping streams are evenly spaced over time, their chances of failure may not be truly random.&lt;/p&gt;

&lt;p&gt;Nevertheless, we should be wary of the difference between a datagram loss and ethernet loss while interpreting results. Consider the MTU of the network path while testing with different packet sizes.&lt;/p&gt;

&lt;h6 id=&quot;jupyter-notebook-version-of-this-post-can-be-viewed-here&quot;&gt;Jupyter notebook version of this post can be viewed &lt;a href=&quot;https://goo.gl/DYxpCo&quot;&gt;here&lt;/a&gt;&lt;/h6&gt;</content><author><name>thamizh85</name></author><category term="network" /><category term="python" /><category term="numpy" /><category term="probability" /><category term="scripting" /><summary type="html">Background Recently we had a cabling issue in our core infrastructure which caused around 3 to 12% packet loss across few IP streams. One of my colleagues made an interesting observation that when he tried to ping with large packet size (5000 bytes) the packet loss rose up to 40%. In his opinion, that meant some applications were experiencing up to 40% packet loss. I seldom do large packet ping tests unless I am troubleshooting MTU issues, so to me this observation was interesting. At the outset, it may look like an aggravated problem. But you know that your network path MTU doesn’t support jumbo frames end-to-end. If so why is there a difference in packet loss rate when you ping with large datagams? Once you reason that the ping test results only represent ICMP datagram loss and not ethernet frame loss, you will realize that both tests results represent the same network performane but in different metrics. Interpreting them as two separate test cases is fallacious. Let us explore why. Normal ping vs Large ping In windows a normal ping packet size is 32 bytes and in most environments, the default MTU is 1500 bytes. So a single frame is sufficient to transmit a ping packet. Things get weirder when we ping with large packets. In windows, you can specify the ping packet size using -l option. Note that this size doesn’t include the packet header (20 bytes for IP header + 8 bytes for ICMP header). Which means with a 1500 MTU size, we can send only up to 1472 bytes in a single frame. Any length above this must be fragmented. We can test this easily. Below is the result when pinging with 1472 as the ping size (ping 8.8.8.8 -n 2 -l 1472) Capturing on 'Ethernet 2' 1 0.000000 10.1.1.1 → 8.8.8.8 ICMP 1514 Echo (ping) request id=0x0001, seq=8/2048, ttl=128 2 0.015698 8.8.8.8 → 10.1.1.1 ICMP 106 Echo (ping) reply id=0x0001, seq=8/2048, ttl=45 2 packets captured When we ping with just one more byte, you can see that 2 packets are sent in place of 1 ((ping 8.8.8.8 -n 2 -l 1473) Capturing on 'Ethernet 2' 1 0.000000 10.1.1.1 → 8.8.8.8 IPv4 1514 Fragmented IP protocol (proto=ICMP 1, off=0, ID=4fab) 2 0.000016 10.1.1.1 → 8.8.8.8 ICMP 35 Echo (ping) request id=0x0001, seq=10/2560, ttl=128 2 packets captured So when we ping with 5000 bytes, 4 packets are sent. And ICMP protocol considers a datagram to be lost even when one of them fails. So the probability of the ICMP datagram loss is higher than the probability of single frame loss. But is this what is happening in the ping test result? We can calculate the probability of datagram loss using probability theory but let us defer to it later on and do a numerical simulation first using Monte Carlo simulation. Monte Carlo Simulation Monte carlo simulation is a rather fancy title for a simple simulation using random event generator, but it is quite handy and widely used. Usually Monte Carlo simulation is useful for simulating events that are truly random in nature. In a chaotic backbone network, that handles traffic stream of different kinds, we can assume the frame loss to happen approximately in a random fashion. Let us write a short program to simulate random packet loss. import random import numpy as np sampleCount = 100000 # total events in our simulation p = 0.03 # ethernet frame loss probability grpSize = 4 # packet count per datagram, 5000 bytes = 4 packets grpEventCount = int(sampleCount/grpSize) # datagram count # generate random packets with p% packet loss events = np.random.choice([0,1], size=sampleCount, p=[p,1-p]) # group discrete packets into a datagram grpEvents = events.reshape(grpEventCount,grpSize) # function to determine datagram loss def checkFailure(grpEvent): return (np.count_nonzero(grpEvent) &amp;lt; grpSize) # Return 1 if the success count is less than 3 # count the result failCount = 0 for grpEvent in grpEvents: failCount += checkFailure(grpEvent) print(&quot;The probability of a group failure is {:.2f}%&quot;.format(failCount/len(grpEvents)*100)) The probability of a group failure is 11.78% There you see! Even a 3% ethernet frame loss translates to 12% packet loss for jumbo ping test. This is same as what we observed. Now this is just a simulation with random input. But does the math agree? Using Probability Theory If p is the probability of a single frame loss, (1-p) is the probability of a successful transfer. And a datagram is successful only if all of its frames are successful. So an ICMP datagram which is 4 frame long, will have (1-p)**4 probability of succesful delivery. To calculate the failure rate, just take its inverse. 1- (1-p)**4 0.11470719000000007 As expected the simulation is slightly off from the calculated probability. But it will get closer to the real figure when we increase the simulation count. Conclusion The exactness of our calculation hinges on the assumption of random nature of packet loss. While it happened to be close to true in my case, it need not be all the time. The link may be loaded in a bursty manner and since our ping streams are evenly spaced over time, their chances of failure may not be truly random. Nevertheless, we should be wary of the difference between a datagram loss and ethernet loss while interpreting results. Consider the MTU of the network path while testing with different packet sizes. Jupyter notebook version of this post can be viewed here</summary></entry><entry><title type="html">Emulating Angry IP Scanner with nmap scripting engine - A lua scripting primer</title><link href="http://localhost:4000/scripting/2017/10/29/emulating-angryip-scanner-with-nmap-scripting-engine-a-lua-scripting-primer/" rel="alternate" type="text/html" title="Emulating Angry IP Scanner with nmap scripting engine - A lua scripting primer" /><published>2017-10-29T12:08:28+08:00</published><updated>2017-10-29T12:08:28+08:00</updated><id>http://localhost:4000/scripting/2017/10/29/emulating-angryip-scanner-with-nmap-scripting-engine-a-lua-scripting-primer</id><content type="html" xml:base="http://localhost:4000/scripting/2017/10/29/emulating-angryip-scanner-with-nmap-scripting-engine-a-lua-scripting-primer/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Often we have to discover the devices on a network. I use a very simple nmap command for performing a pingsweep.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo nmap -sn &amp;lt;subnet or ip range&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;On my Windows PC, I wrap it around in a batch script and place it in the search PATH. On Linux, it can be dropped in as an alias in bashrc.&lt;/p&gt;

&lt;p&gt;It is handy, but not complete. I would like to have some extra information such as hostnames (collected by various means not just DNS reverse lookup), platform info etc., Such details are available in tools such as AngryIP scanner, but I don’t prefer to launch a GUI tool for single task and keep it running until the task is done.&lt;/p&gt;

&lt;p&gt;So let us try to implement a similar function using nmap script. There are existing scripts in nmap which performs advanced discovery and reconnaissance, but we want something lightweight, more generic and customizable to support more protocols. Nmap scripts run on top of Nmap Scripting Engine which runs on Lua. Learning it would expand the scope of these tools from just being a capable tool to a powerful tool with limitless possibilities.&lt;/p&gt;

&lt;p&gt;Although this was my first attempt at Lua scripting, the endeavour turned out to be fairly simple. True it was not without its share of frustrations, most of which were related to wrapping my head around the way NSE (Nmap Scripting Engine) tosses the data around and lua data structures. But once you get the hang of it, it is really simple. So without much ado, let us get started.&lt;/p&gt;

&lt;h2 id=&quot;nse-script-structure&quot;&gt;NSE Script structure&lt;/h2&gt;
&lt;p&gt;A basic NSE script will have the following 3 sections:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The Head section is for meta information about the script. We need not worry about it for primer purpose but it is a good habit to put documentation info here while packaging the script for production. This section also feeds in to the NSE Documentation module (&lt;a href=&quot;https://nmap.org/book/nsedoc.html&quot;&gt;NSEDoc&lt;/a&gt;) which provides a consistent way to represent the meta information about our script.&lt;/li&gt;
  &lt;li&gt;The RULE section determines the scope of the script. It basically acts as a filter of nmap port-scan results that gets filtered to the Action section. The rule section should contain one of the following functions:
    &lt;ul&gt;
      &lt;li&gt;prerule()&lt;/li&gt;
      &lt;li&gt;hostrule(host)&lt;/li&gt;
      &lt;li&gt;portrule(host, port)&lt;/li&gt;
      &lt;li&gt;postrule()&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The Action section is mostly the brain of the script (although rule section can also contain some of the script logic). This section contains an Action section which reads data from the nmap scanning engine and carries out the script logic. The value returned by this function is also printed on the screen and captured by other nmap output methods. Note that this script is executed iteratively over either list of hosts or a list of (host, port) tuples. The ACTION section is indicated by the presence of a function named &lt;code class=&quot;highlighter-rouge&quot;&gt;action&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;diving-in&quot;&gt;Diving In&lt;/h2&gt;
&lt;p&gt;So let us go ahead and create a basic script. Our script will scan the target network and fetch the hostname from NETBIOS. Create a script file with .nse (I used host-discover.nse) extension as follows:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;netbios&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;netbios&quot;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shortport&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;shortport&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- The Rule Section --&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;portrule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shortport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;portnumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;137&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;udp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- The Action Section --&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nbt_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;netbios_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;netbios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_server_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;netbios_name&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Now run this script against your local network as below:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap --script host-discover.nse 10.1.1.0/24 -sU -p 137&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now take a minute or two to let this sink in… we just created our very own NETBIOS scanner, all in just 7 lines of functional code. There are dedicated standalone &lt;a href=&quot;http://unixwiz.net/tools/nbtscan.html&quot;&gt;tools&lt;/a&gt; that performs this singular task and we managed to do it using nmap. With just a little more effort, we can add more bells and whistles to this.&lt;/p&gt;

&lt;p&gt;The magic that enables this are the excellent inbuilt scanning mechanisms of nmap and hot-pluggable libraries that carry out much of the grunt. By scripting in NSE, we can tap in to this massive capabilities of nmap and automate to our needs. Let us now see how this script works.&lt;/p&gt;

&lt;h2 id=&quot;code-walkthrough&quot;&gt;Code Walkthrough&lt;/h2&gt;
&lt;p&gt;In this script there is no HEAD section. So we start by importing the libraries needed for our script. In Lua, modules are included using &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; function. And we assign the module to a local variable in order to access its namespace (i.e, call the methods that belong to the module).&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;netbios&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;netbios&quot;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shortport&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;shortport&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The purpose of these libraries will be evident in the later section.&lt;/p&gt;

&lt;h3 id=&quot;rule-section&quot;&gt;RULE section&lt;/h3&gt;
&lt;p&gt;Next we move to the RULE section. Notice that in Lua, comments are prepended by &lt;code class=&quot;highlighter-rouge&quot;&gt;--&lt;/code&gt; sequence.&lt;/p&gt;

&lt;p&gt;As mentioned earlier, RULE section acts as filter to identify hosts or ports relevant to our script. Since our script is only interested with NETBIOS query, we have to pick only the hosts that are listening on port UDP/137.&lt;/p&gt;

&lt;p&gt;Since this is a common check, nmap includes a ‘shortport’ module that provides shorthand functions to check port states. &lt;code class=&quot;highlighter-rouge&quot;&gt;shortport.portnumber&lt;/code&gt; is one such function which will return true only for those ports and protocols listed in its arguements. Refer to online &lt;a href=&quot;https://nmap.org/nsedoc/lib/shortport.html&quot;&gt;documentation&lt;/a&gt; for exact syntax of this function.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- The Rule Section --&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;portrule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shortport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;portnumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;137&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;udp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;NOTE: The Rule section only filters port numbers passed on from the upper layer i.e, the original nmap scan. It doesn’t trigger a port scan on its own. That is why when we launch the script, we had to specify port number explicitly (&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -sU -p U:137 &amp;lt;host&amp;gt;&lt;/code&gt;). It is still possible to launch a port scan in this section, by calling nmap socket libraries but those are advanced scripting scenarios.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;action-section&quot;&gt;ACTION Section&lt;/h3&gt;
&lt;p&gt;Next comes the ACTION section. Our action section here is a function that takes (host, port) as argument. It means the host object and port object are available to this function for evaluating logic. If we need other variables, they have to be declared outside this function.&lt;/p&gt;

&lt;p&gt;Since for NETBIOS query we only need the host our action function will take only ‘host’ as argument. We call the get_server_name function of &lt;a href=&quot;https://nmap.org/nsedoc/lib/netbios.html#get_server_name&quot;&gt;netbios&lt;/a&gt; module. From the documentation we can see that this function returns two values, query status and query result which we capture under two local variables. For our simple task, we need not check the result status and go ahead to return the name variable directly. In Lua, if a variable doesn’t exist it returns nil which is acceptable for our scenario.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- The Action Section --&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nbt_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;netbios_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;netbios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_server_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;netbios_name&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This returned value is processed by nmap scripting engine and printed in the output window.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;NOTE: In Lua functions are assigned to a variable like how we assign a string or integer value to a variable. In this case, code block defining the ACTION logic is assigned to a variable called action. 
Lua functions are of the format &lt;code class=&quot;highlighter-rouge&quot;&gt;foo = function ( args ) body end&lt;/code&gt;. It can be defined in a single line. To call the function, call the variable with argument such as &lt;code class=&quot;highlighter-rouge&quot;&gt;foo('bar')&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;where-to-go-next&quot;&gt;Where to go next&lt;/h2&gt;
&lt;p&gt;Since this is only a basic script, we have not customized the output format at all. The hostnames when available gets printed below each host-discovered. If you notice, the print action is executed within the ACTION function whose scope is limited to one host at a time. If we need our output to be consolidated in a tabular form, we can write a postrule function, store and retrieve our findings from nmap registry. Refer to my &lt;a href=&quot;https://raw.githubusercontent.com/thamizh85/Nmap-scripts/master/hostinfo-discover.nse&quot;&gt;script&lt;/a&gt; (work in progress) to see one way of doing it.&lt;/p&gt;

&lt;p&gt;I strongly recommend to try this &lt;a href=&quot;https://thesprawl.org/research/writing-nse-scripts-for-vulnerability-scanning/&quot;&gt;walkthrough&lt;/a&gt; as well. It greatly helped me to get started with NMAP scripting and understanding the way a NSE script is structured.&lt;/p&gt;

&lt;p&gt;It won’t hurt to improve your understanding of Lua programming language as well. I found this 15 minute &lt;a href=&quot;http://tylerneylon.com/a/learn-lua/&quot;&gt;primer&lt;/a&gt; to be very useful.&lt;/p&gt;

&lt;p&gt;Lastly the best resource for advanced nmap script writing is the existing script library. There are hundreds of scripts and libraries available, study and explore them to see different ways of tackling a challenge. Good luck scripting!&lt;/p&gt;</content><author><name>thamizh85</name></author><category term="lua" /><category term="nmap" /><category term="network-discovery" /><summary type="html">Introduction Often we have to discover the devices on a network. I use a very simple nmap command for performing a pingsweep. sudo nmap -sn &amp;lt;subnet or ip range&amp;gt; On my Windows PC, I wrap it around in a batch script and place it in the search PATH. On Linux, it can be dropped in as an alias in bashrc. It is handy, but not complete. I would like to have some extra information such as hostnames (collected by various means not just DNS reverse lookup), platform info etc., Such details are available in tools such as AngryIP scanner, but I don’t prefer to launch a GUI tool for single task and keep it running until the task is done. So let us try to implement a similar function using nmap script. There are existing scripts in nmap which performs advanced discovery and reconnaissance, but we want something lightweight, more generic and customizable to support more protocols. Nmap scripts run on top of Nmap Scripting Engine which runs on Lua. Learning it would expand the scope of these tools from just being a capable tool to a powerful tool with limitless possibilities. Although this was my first attempt at Lua scripting, the endeavour turned out to be fairly simple. True it was not without its share of frustrations, most of which were related to wrapping my head around the way NSE (Nmap Scripting Engine) tosses the data around and lua data structures. But once you get the hang of it, it is really simple. So without much ado, let us get started. NSE Script structure A basic NSE script will have the following 3 sections: The Head section is for meta information about the script. We need not worry about it for primer purpose but it is a good habit to put documentation info here while packaging the script for production. This section also feeds in to the NSE Documentation module (NSEDoc) which provides a consistent way to represent the meta information about our script. The RULE section determines the scope of the script. It basically acts as a filter of nmap port-scan results that gets filtered to the Action section. The rule section should contain one of the following functions: prerule() hostrule(host) portrule(host, port) postrule() The Action section is mostly the brain of the script (although rule section can also contain some of the script logic). This section contains an Action section which reads data from the nmap scanning engine and carries out the script logic. The value returned by this function is also printed on the screen and captured by other nmap output methods. Note that this script is executed iteratively over either list of hosts or a list of (host, port) tuples. The ACTION section is indicated by the presence of a function named action. Diving In So let us go ahead and create a basic script. Our script will scan the target network and fetch the hostname from NETBIOS. Create a script file with .nse (I used host-discover.nse) extension as follows: local netbios = require &quot;netbios&quot; local shortport = require &quot;shortport&quot; -- The Rule Section -- portrule = shortport.portnumber({137}, &quot;udp&quot;) -- The Action Section -- action = function(host,port) local nbt_status, netbios_name = netbios.get_server_name(host) return netbios_name end Now run this script against your local network as below: nmap --script host-discover.nse 10.1.1.0/24 -sU -p 137 Now take a minute or two to let this sink in… we just created our very own NETBIOS scanner, all in just 7 lines of functional code. There are dedicated standalone tools that performs this singular task and we managed to do it using nmap. With just a little more effort, we can add more bells and whistles to this. The magic that enables this are the excellent inbuilt scanning mechanisms of nmap and hot-pluggable libraries that carry out much of the grunt. By scripting in NSE, we can tap in to this massive capabilities of nmap and automate to our needs. Let us now see how this script works. Code Walkthrough In this script there is no HEAD section. So we start by importing the libraries needed for our script. In Lua, modules are included using require function. And we assign the module to a local variable in order to access its namespace (i.e, call the methods that belong to the module). local netbios = require &quot;netbios&quot; local shortport = require &quot;shortport&quot; The purpose of these libraries will be evident in the later section. RULE section Next we move to the RULE section. Notice that in Lua, comments are prepended by -- sequence. As mentioned earlier, RULE section acts as filter to identify hosts or ports relevant to our script. Since our script is only interested with NETBIOS query, we have to pick only the hosts that are listening on port UDP/137. Since this is a common check, nmap includes a ‘shortport’ module that provides shorthand functions to check port states. shortport.portnumber is one such function which will return true only for those ports and protocols listed in its arguements. Refer to online documentation for exact syntax of this function. -- The Rule Section -- portrule = shortport.portnumber({137}, &quot;udp&quot;) NOTE: The Rule section only filters port numbers passed on from the upper layer i.e, the original nmap scan. It doesn’t trigger a port scan on its own. That is why when we launch the script, we had to specify port number explicitly (nmap -sU -p U:137 &amp;lt;host&amp;gt;). It is still possible to launch a port scan in this section, by calling nmap socket libraries but those are advanced scripting scenarios. ACTION Section Next comes the ACTION section. Our action section here is a function that takes (host, port) as argument. It means the host object and port object are available to this function for evaluating logic. If we need other variables, they have to be declared outside this function. Since for NETBIOS query we only need the host our action function will take only ‘host’ as argument. We call the get_server_name function of netbios module. From the documentation we can see that this function returns two values, query status and query result which we capture under two local variables. For our simple task, we need not check the result status and go ahead to return the name variable directly. In Lua, if a variable doesn’t exist it returns nil which is acceptable for our scenario. -- The Action Section -- action = function(host,port) local nbt_status, netbios_name = netbios.get_server_name(host) return netbios_name end This returned value is processed by nmap scripting engine and printed in the output window. NOTE: In Lua functions are assigned to a variable like how we assign a string or integer value to a variable. In this case, code block defining the ACTION logic is assigned to a variable called action. Lua functions are of the format foo = function ( args ) body end. It can be defined in a single line. To call the function, call the variable with argument such as foo('bar') Where to go next Since this is only a basic script, we have not customized the output format at all. The hostnames when available gets printed below each host-discovered. If you notice, the print action is executed within the ACTION function whose scope is limited to one host at a time. If we need our output to be consolidated in a tabular form, we can write a postrule function, store and retrieve our findings from nmap registry. Refer to my script (work in progress) to see one way of doing it. I strongly recommend to try this walkthrough as well. It greatly helped me to get started with NMAP scripting and understanding the way a NSE script is structured. It won’t hurt to improve your understanding of Lua programming language as well. I found this 15 minute primer to be very useful. Lastly the best resource for advanced nmap script writing is the existing script library. There are hundreds of scripts and libraries available, study and explore them to see different ways of tackling a challenge. Good luck scripting!</summary></entry><entry><title type="html">Using a bluetooth serial console with linux</title><link href="http://localhost:4000/notes/2017/08/24/using-a-bluetooth-serial-console-with-linux/" rel="alternate" type="text/html" title="Using a bluetooth serial console with linux" /><published>2017-08-24T23:41:28+08:00</published><updated>2017-08-24T23:41:28+08:00</updated><id>http://localhost:4000/notes/2017/08/24/using-a-bluetooth-serial-console-with-linux</id><content type="html" xml:base="http://localhost:4000/notes/2017/08/24/using-a-bluetooth-serial-console-with-linux/">&lt;p&gt;Recently I bought a &lt;a href=&quot;https://www.aliexpress.com/store/product/FREE-SHIPPING-Bt578-rs232-wireless-male-female-general-serial-port-bluetooth-adapter-bluetooth-module/719457_1271204185.html&quot;&gt;bluetooth RS232 serial convertor&lt;/a&gt;. I wasn’t sure whether it would work with my Linux laptop. But it turned out to be quite simple to setup.&lt;/p&gt;

&lt;h2 id=&quot;pre-requisites&quot;&gt;Pre-requisites&lt;/h2&gt;

&lt;p&gt;The following packages are required:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;bluez&lt;/li&gt;
  &lt;li&gt;bluez-utils&lt;/li&gt;
  &lt;li&gt;byobu (optional)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bluez provides the bluetooth protocol stack (most likely shipped with the OS), bluez-utils provides the bluetoothctl utility and byobu is a wrapper around screen terminal emulator. You can also use ‘screen’ directly. Install these using your distributions recommended procedure.&lt;/p&gt;

&lt;h2 id=&quot;steps&quot;&gt;Steps&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Start daemon:
    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Swanky:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;systemctl start bluetooth
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Discover using bluetoothctl:
    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Swanky:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bluetoothctl
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;NEW] Controller &amp;lt;controller-mac-address&amp;gt; xkgt-Swanky &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;default]
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;bluetooth]# power on
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;bluetooth]# scan on
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Once you can see your device, turn off the scan and pair
    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;bluetooth]# scan off
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;bluetooth]# pair &amp;lt;device-mac-address&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Exit blutoothctl and create serial device (Note that root privileges are required):
    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;bluetooth]# &lt;span class=&quot;nb&quot;&gt;exit
 &lt;/span&gt;Swanky:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo rfcomm &lt;span class=&quot;nb&quot;&gt;bind &lt;/span&gt;0 &amp;lt;device-mac-address&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;You should now have /dev/rfcomm0. Connect to it using byobu-screen utility:
    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Swanky:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;byobu-screen /dev/rfcomm0
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Enjoy your wireless console connection!&lt;/p&gt;</content><author><name>thamizh85</name></author><category term="bluetooth" /><category term="Linux" /><summary type="html">Recently I bought a bluetooth RS232 serial convertor. I wasn’t sure whether it would work with my Linux laptop. But it turned out to be quite simple to setup. Pre-requisites The following packages are required: bluez bluez-utils byobu (optional) Bluez provides the bluetooth protocol stack (most likely shipped with the OS), bluez-utils provides the bluetoothctl utility and byobu is a wrapper around screen terminal emulator. You can also use ‘screen’ directly. Install these using your distributions recommended procedure. Steps Start daemon: Swanky:~$ systemctl start bluetooth Discover using bluetoothctl: Swanky:~$ bluetoothctl [NEW] Controller &amp;lt;controller-mac-address&amp;gt; xkgt-Swanky [default] [bluetooth]# power on [bluetooth]# scan on Once you can see your device, turn off the scan and pair [bluetooth]# scan off [bluetooth]# pair &amp;lt;device-mac-address&amp;gt; Exit blutoothctl and create serial device (Note that root privileges are required): [bluetooth]# exit Swanky:~$ sudo rfcomm bind 0 &amp;lt;device-mac-address&amp;gt; You should now have /dev/rfcomm0. Connect to it using byobu-screen utility: Swanky:~$ byobu-screen /dev/rfcomm0 Enjoy your wireless console connection!</summary></entry><entry><title type="html">Self-signed certificate chain using OpenSSL X509 module</title><link href="http://localhost:4000/notes/sysadmin/2017/08/20/self-signed-certificate-chain-using-openssl-x509-module/" rel="alternate" type="text/html" title="Self-signed certificate chain using OpenSSL X509 module" /><published>2017-08-20T17:55:20+08:00</published><updated>2017-08-20T17:55:20+08:00</updated><id>http://localhost:4000/notes/sysadmin/2017/08/20/self-signed-certificate-chain-using-openssl-x509-module</id><content type="html" xml:base="http://localhost:4000/notes/sysadmin/2017/08/20/self-signed-certificate-chain-using-openssl-x509-module/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Generating a self-signed CA certificate or signing a web server certificate using openssl is very easy. There are tons of resources out there in the web. But creating a certificate, which works without any warning on most modern browsers is a challenge. This challenge is compounded by ever-growing stringent requirements from the popular browsers (See footnote 1).&lt;/p&gt;

&lt;p&gt;There are two ways to use openssl to mimic a CA. The first option is to use ‘openssl ca’ module, for which there are many guides in the internet. This module mimics a full-fledged CA and useful when you are setting up something for long term requiring features such as CRL and OCSP.&lt;/p&gt;

&lt;p&gt;The other option is to use ‘openssl x509’ module which is what we will be focusing on. I chose this because I just needed a certificate pair for one-off use and didn’t want to be bothered in setting up an elaborate CA configuration. The guide will be useful for someone with a similar objective.&lt;/p&gt;

&lt;p&gt;As always, let us start with the requirement:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Create a certificate chain with as little configuration and minimum number of hosts, which means no intermediate CA.&lt;/li&gt;
  &lt;li&gt;The CA cert would be imported manually in to Trusted Root Authorities on the client machines.&lt;/li&gt;
  &lt;li&gt;The certificate should work on modern browsers. We will use latest versions of Chrome and Mozilla as benchmarks.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;steps&quot;&gt;Steps:&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Generate private key &amp;amp; self-signed cert for the CA in a single statement:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;```bash 
root@EARWA:openssl req -new -x509 -sha256 -newkey rsa:2048 -nodes -keyout ca.key -days 1000 -out ca.pem
root@EARWA:~/ca2# ls -ltr
total 8
-rw-r--r-- 1 root root 1704 Jul 30 20:01 ca.key
-rw-r--r-- 1 root root 1261 Jul 30 20:01 ca.pem
```
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: Always use SHA256 as highlighted above. SHA-1 has been deprecated since Jan 2017 (See footnote 2)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;Preparing a config file for CSR: We need to generate a CSR (Certificate Signing Request). This process involves generating a private key and a PEM encoded CSR file. The contents of our Web cert are determined by the information we provide in the CSR.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Modern browsers expect a field called sAN(subjectAltName) (See footnote 3). This field should hold all possible URI’s from which our webserver may get accessed.&lt;/p&gt;

&lt;p&gt;Since OpenSSL’s default interactive process of CSR generation doesn’t support this field, we need to specify it in a config file and generate the CSR. based on this file Create a config file for Web server request. The highlighted sections are the reason we are using a config file. Otherwise rest of the attributes can be passed interactively.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  root@EARWA:~/ca2# more web.earwa.com.conf
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; subject &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  countryName             &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Country Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2 letter code&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  countryName_default     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; HK
  
  organizationName            &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Organization Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;eg, company&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  organizationName_default    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Scarlet Spires
  
  basicConstraints    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; CA:FALSE
  keyUsage            &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; digitalSignature, keyEncipherment
  subjectAltName      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; @alternate_names
  nsComment           &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;OpenSSL Generated Certificate&quot;&lt;/span&gt;
  
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; alternate_names &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  DNS.1       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; web.earwa.com
  DNS.2       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; www.web.earwa.com
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Submit a request based on the config file&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  openssl req -config web.earwa.com.conf -new -sha256 -newkey rsa:2048 -nodes -keyout web.earwa.com.key -days 1000 -out web.earwa.com.csr
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Check the generated request file before signing. You can see our extension fields in the Attributes section&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  root@EARWA:~/ca2# openssl req -in web.earwa.com.csr -text -noout
  

          Attributes:
          Requested Extensions:
              X509v3 Subject Key Identifier:
                  30:47:85:A6:4E:9C:E0:D4:F7:CC:9F:FF:FF:38:03:FC:E7:0E:87:00
              X509v3 Basic Constraints:
                  CA:FALSE
              X509v3 Key Usage:
                  Digital Signature, Key Encipherment
              X509v3 Subject Alternative Name:
                  DNS:web.earwa.com, DNS:www.web.earwa.com
              Netscape Comment:
                  OpenSSL Generated Certificate
  
      Signature Algorithm: sha256WithRSAEncryption
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;This is the portion that tripped me up for a while. Note that earlier I said that the info provided in CSR will be used for certificate generation. It is only partially true, the x509 module cannot copy the extensions info directly from CSR. We need to manually add extensions by using the options -extensions and -extfile. So let us create the V3 extension file first.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  root@EARWA:~/ca2# more v3.ext
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; v3_req &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;authorityKeyIdentifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;keyid,issuer
  &lt;span class=&quot;nv&quot;&gt;basicConstraints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;CA:FALSE
  keyUsage &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
  subjectAltName      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; @alternate_names
  
  
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; alternate_names &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  DNS.1       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; web.earwa.com
  DNS.2       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; www.web.earwa.com
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Sign the cert. The highlighted portions refers back to the extension file and the section mentioned above.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  openssl x509 -extensions v3_req -extfile v3.ext -req -sha256 -days 1000 -in web.earwa.com.csr -CA ca.pem -CAcreateserial -CAkey ca.key -out web.earwa.com.pem
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Verify the cert&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  root@EARWA:~/ca2# openssl x509 -in web.earwa.com.pem -text -noout
  
  Certificate:
      Data:
          Version: 3 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0x2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          Serial Number: 14178612693219512833 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0xc4c48d1f7b319201&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      Signature Algorithm: sha256WithRSAEncryption
          Issuer: &lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;HK, &lt;span class=&quot;nv&quot;&gt;ST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Some-State, &lt;span class=&quot;nv&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Scarlet Spires
          Validity
              Not Before: Jul 31 16:36:03 2017 GMT
              Not After : Apr 26 16:36:03 2020 GMT
          Subject: &lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;HK, &lt;span class=&quot;nv&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Scarlet Spires
          Subject Public Key Info:
              Public Key Algorithm: rsaEncryption
                  Public-Key: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2048 bit&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                 Modulus:
                      00:c6:f9:32:79:11:20:ff:97:da:38:a0:61:b9:41:
                      1f:51:c0:1f:a1:48:05:74:54:81:23:9b:22:24:8d:
                      35:f2:25:83:15:f2:9b:30:a5:43:2d:4d:08:2f:c7:
                      9e:42:1d:f7:66:68:07:8f:da:0b:f9:5c:51:97:b1:
                      0e:dc:44:d1:a4:5c:a1:ef:35:43:84:52:99:34:9f:
                      7d:41:54:9f:65:21:4c:1c:21:6f:9c:73:d5:f2:3d:
                      3c:6d:da:fe:85:88:98:4d:02:42:52:ea:9c:61:fe:
                      e7:bc:c2:d6:44:9d:9f:f6:3d:cb:32:c6:e4:8d:d1:
                      74:47:80:87:ac:8d:8a:64:8a:4e:54:ce:54:4e:75:
                      3a:85:af:f5:96:9b:5f:a0:a0:6d:27:06:1c:8d:0b:
                      4b:c5:1e:15:ff:16:4a:87:1e:9b:cc:98:a9:c5:8f:
                      4f:f1:19:28:cd:90:6c:85:ab:58:37:14:d6:58:cb:
                      7d:ab:8b:34:62:2a:72:b4:17:96:0b:6f:84:31:54:
                      55:aa:06:56:00:04:5e:2d:d1:14:fa:7f:2d:b3:44:
                      d3:1d:95:c2:93:ec:4e:17:e8:30:fa:e7:f5:be:b1:
                      5f:9a:59:59:ac:0d:b7:04:4a:19:35:a2:a5:44:64:
                      d4:a0:93:f8:dc:9f:3a:20:7b:5c:d7:26:67:28:67:
                      87:73
                  Exponent: 65537 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0x10001&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          X509v3 extensions:
              X509v3 Authority Key Identifier:
                  keyid:32:33:41:52:11:5A:AE:F9:89:4E:8E:EE:26:E3:D2:7D:CA:C9:BC:63
  
               X509v3 Basic Constraints:
                  CA:FALSE
              X509v3 Key Usage:
                 Digital Signature, Non Repudiation, Key Encipherment, Data Encipherment
              X509v3 Subject Alternative Name:
                  DNS:web.earwa.com, DNS:www.web.earwa.com
      Signature Algorithm: sha256WithRSAEncryption
           59:d5:45:b3:ca:60:32:a8:37:85:3b:bf:6f:d1:b3:26:f6:4b:
           f2:26:2c:68:6f:cb:5c:3b:a8:6f:a9:32:53:71:98:74:26:be:
           4f:3e:a9:13:e6:ba:e4:3e:52:83:86:0d:9d:53:4a:1e:e8:a5:
            94:36:bf:c2:17:62:b9:8e:87:8d:32:f1:34:1a:e3:81:6b:0b:
           5a:b7:a8:55:c4:24:ca:b2:65:75:e2:4b:ac:c4:9b:9e:d1:94:
           45:31:92:1d:6b:30:6c:29:03:fd:1e:49:8e:8e:d5:30:6f:68:
           &lt;span class=&quot;nb&quot;&gt;fc&lt;/span&gt;:01:82:f8:57:83:85:47:15:e9:78:96:39:86:94:cb:96:29:
           5b:61:f0:d9:23:d1:25:ca:a0:ea:80:ce:42:bb:12:40:b9:64:
           c6:a5:4f:99:dc:f3:26:74:49:bc:b2:70:49:d2:22:f2:75:07:
           6e:8f:96:9b:e6:67:ad:21:01:23:57:46:ea:78:12:3b:c8:ba:
           dc:ae:39:ee:d6:30:6d:58:ab:f0:fe:c1:68:fb:0a:68:09:fc:
           93:28:84:27:2d:1d:c0:c2:06:53:1b:3b:ff:ec:d8:a1:90:1c:
           c4:59:c0:c3:d5:f4:bb:d4:79:35:dd:7f:05:60:3f:a9:ba:b0:
            5c:b3:66:13:03:4f:ac:31:0c:8a:e9:82:8d:36:c1:78:bf:d6:
           5e:6d:f9:13
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That is it! Now you have a web server cert which would be trusted by most browsers, provided you import the root CA public cert in to the browsers’ trust chain.&lt;/p&gt;

&lt;h4 id=&quot;footnote-1&quot;&gt;Footnote #1&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://cabforum.org/baseline-requirements-documents/&quot;&gt;https://cabforum.org/baseline-requirements-documents/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;footnote-2&quot;&gt;Footnote #2&lt;/h4&gt;

&lt;p&gt;SHA-1 disabled on Chrome 56 and FireFox (Jan 2017)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.chromestatus.com/features/6601657605423104&quot;&gt;https://www.chromestatus.com/features/6601657605423104&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://sites.google.com/a/chromium.org/dev/Home/chromium-security/education/tls/sha-1&quot;&gt;https://sites.google.com/a/chromium.org/dev/Home/chromium-security/education/tls/sha-1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.mozilla.org/security/2017/02/23/the-end-of-sha-1-on-the-public-web/&quot;&gt;https://blog.mozilla.org/security/2017/02/23/the-end-of-sha-1-on-the-public-web/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;footnote-3&quot;&gt;Footnote #3&lt;/h4&gt;

&lt;p&gt;SAN mandatory&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.chromestatus.com/features/4981025180483584&quot;&gt;https://www.chromestatus.com/features/4981025180483584&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1245280&quot;&gt;https://bugzilla.mozilla.org/show_bug.cgi?id=1245280&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc2818&quot;&gt;https://tools.ietf.org/html/rfc2818&lt;/a&gt;&lt;/p&gt;</content><author><name>thamizh85</name></author><category term="openssl" /><category term="pki" /><category term="web" /><summary type="html">Introduction Generating a self-signed CA certificate or signing a web server certificate using openssl is very easy. There are tons of resources out there in the web. But creating a certificate, which works without any warning on most modern browsers is a challenge. This challenge is compounded by ever-growing stringent requirements from the popular browsers (See footnote 1). There are two ways to use openssl to mimic a CA. The first option is to use ‘openssl ca’ module, for which there are many guides in the internet. This module mimics a full-fledged CA and useful when you are setting up something for long term requiring features such as CRL and OCSP. The other option is to use ‘openssl x509’ module which is what we will be focusing on. I chose this because I just needed a certificate pair for one-off use and didn’t want to be bothered in setting up an elaborate CA configuration. The guide will be useful for someone with a similar objective. As always, let us start with the requirement: Create a certificate chain with as little configuration and minimum number of hosts, which means no intermediate CA. The CA cert would be imported manually in to Trusted Root Authorities on the client machines. The certificate should work on modern browsers. We will use latest versions of Chrome and Mozilla as benchmarks. Steps: Generate private key &amp;amp; self-signed cert for the CA in a single statement: ```bash root@EARWA:openssl req -new -x509 -sha256 -newkey rsa:2048 -nodes -keyout ca.key -days 1000 -out ca.pem root@EARWA:~/ca2# ls -ltr total 8 -rw-r--r-- 1 root root 1704 Jul 30 20:01 ca.key -rw-r--r-- 1 root root 1261 Jul 30 20:01 ca.pem ``` Note: Always use SHA256 as highlighted above. SHA-1 has been deprecated since Jan 2017 (See footnote 2) Preparing a config file for CSR: We need to generate a CSR (Certificate Signing Request). This process involves generating a private key and a PEM encoded CSR file. The contents of our Web cert are determined by the information we provide in the CSR. Modern browsers expect a field called sAN(subjectAltName) (See footnote 3). This field should hold all possible URI’s from which our webserver may get accessed. Since OpenSSL’s default interactive process of CSR generation doesn’t support this field, we need to specify it in a config file and generate the CSR. based on this file Create a config file for Web server request. The highlighted sections are the reason we are using a config file. Otherwise rest of the attributes can be passed interactively. root@EARWA:~/ca2# more web.earwa.com.conf [ subject ] countryName             = Country Name (2 letter code) countryName_default     = HK organizationName            = Organization Name (eg, company) organizationName_default    = Scarlet Spires basicConstraints    = CA:FALSE keyUsage            = digitalSignature, keyEncipherment subjectAltName      = @alternate_names nsComment           = &quot;OpenSSL Generated Certificate&quot; [ alternate_names ] DNS.1       = web.earwa.com DNS.2       = www.web.earwa.com Submit a request based on the config file openssl req -config web.earwa.com.conf -new -sha256 -newkey rsa:2048 -nodes -keyout web.earwa.com.key -days 1000 -out web.earwa.com.csr Check the generated request file before signing. You can see our extension fields in the Attributes section root@EARWA:~/ca2# openssl req -in web.earwa.com.csr -text -noout         Attributes:         Requested Extensions:             X509v3 Subject Key Identifier:                 30:47:85:A6:4E:9C:E0:D4:F7:CC:9F:FF:FF:38:03:FC:E7:0E:87:00             X509v3 Basic Constraints:                 CA:FALSE             X509v3 Key Usage:                 Digital Signature, Key Encipherment             X509v3 Subject Alternative Name:                 DNS:web.earwa.com, DNS:www.web.earwa.com             Netscape Comment:                 OpenSSL Generated Certificate     Signature Algorithm: sha256WithRSAEncryption This is the portion that tripped me up for a while. Note that earlier I said that the info provided in CSR will be used for certificate generation. It is only partially true, the x509 module cannot copy the extensions info directly from CSR. We need to manually add extensions by using the options -extensions and -extfile. So let us create the V3 extension file first. root@EARWA:~/ca2# more v3.ext [ v3_req ] authorityKeyIdentifier=keyid,issuer basicConstraints=CA:FALSE keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment subjectAltName      = @alternate_names [ alternate_names ] DNS.1       = web.earwa.com DNS.2       = www.web.earwa.com Sign the cert. The highlighted portions refers back to the extension file and the section mentioned above. openssl x509 -extensions v3_req -extfile v3.ext -req -sha256 -days 1000 -in web.earwa.com.csr -CA ca.pem -CAcreateserial -CAkey ca.key -out web.earwa.com.pem Verify the cert root@EARWA:~/ca2# openssl x509 -in web.earwa.com.pem -text -noout Certificate:     Data:         Version: 3 (0x2)         Serial Number: 14178612693219512833 (0xc4c48d1f7b319201)     Signature Algorithm: sha256WithRSAEncryption         Issuer: C=HK, ST=Some-State, O=Scarlet Spires         Validity             Not Before: Jul 31 16:36:03 2017 GMT             Not After : Apr 26 16:36:03 2020 GMT         Subject: C=HK, O=Scarlet Spires         Subject Public Key Info:             Public Key Algorithm: rsaEncryption                 Public-Key: (2048 bit)                Modulus:                     00:c6:f9:32:79:11:20:ff:97:da:38:a0:61:b9:41:                     1f:51:c0:1f:a1:48:05:74:54:81:23:9b:22:24:8d:                    35:f2:25:83:15:f2:9b:30:a5:43:2d:4d:08:2f:c7:                     9e:42:1d:f7:66:68:07:8f:da:0b:f9:5c:51:97:b1:                     0e:dc:44:d1:a4:5c:a1:ef:35:43:84:52:99:34:9f:                     7d:41:54:9f:65:21:4c:1c:21:6f:9c:73:d5:f2:3d:                     3c:6d:da:fe:85:88:98:4d:02:42:52:ea:9c:61:fe:                     e7:bc:c2:d6:44:9d:9f:f6:3d:cb:32:c6:e4:8d:d1:                     74:47:80:87:ac:8d:8a:64:8a:4e:54:ce:54:4e:75:                     3a:85:af:f5:96:9b:5f:a0:a0:6d:27:06:1c:8d:0b:                     4b:c5:1e:15:ff:16:4a:87:1e:9b:cc:98:a9:c5:8f:                     4f:f1:19:28:cd:90:6c:85:ab:58:37:14:d6:58:cb:                     7d:ab:8b:34:62:2a:72:b4:17:96:0b:6f:84:31:54:                     55:aa:06:56:00:04:5e:2d:d1:14:fa:7f:2d:b3:44:                     d3:1d:95:c2:93:ec:4e:17:e8:30:fa:e7:f5:be:b1:                     5f:9a:59:59:ac:0d:b7:04:4a:19:35:a2:a5:44:64:                     d4:a0:93:f8:dc:9f:3a:20:7b:5c:d7:26:67:28:67:                     87:73                 Exponent: 65537 (0x10001)         X509v3 extensions:             X509v3 Authority Key Identifier:                 keyid:32:33:41:52:11:5A:AE:F9:89:4E:8E:EE:26:E3:D2:7D:CA:C9:BC:63            X509v3 Basic Constraints:                 CA:FALSE             X509v3 Key Usage:                Digital Signature, Non Repudiation, Key Encipherment, Data Encipherment             X509v3 Subject Alternative Name:                 DNS:web.earwa.com, DNS:www.web.earwa.com     Signature Algorithm: sha256WithRSAEncryption          59:d5:45:b3:ca:60:32:a8:37:85:3b:bf:6f:d1:b3:26:f6:4b:          f2:26:2c:68:6f:cb:5c:3b:a8:6f:a9:32:53:71:98:74:26:be:          4f:3e:a9:13:e6:ba:e4:3e:52:83:86:0d:9d:53:4a:1e:e8:a5:         94:36:bf:c2:17:62:b9:8e:87:8d:32:f1:34:1a:e3:81:6b:0b:          5a:b7:a8:55:c4:24:ca:b2:65:75:e2:4b:ac:c4:9b:9e:d1:94:          45:31:92:1d:6b:30:6c:29:03:fd:1e:49:8e:8e:d5:30:6f:68:          fc:01:82:f8:57:83:85:47:15:e9:78:96:39:86:94:cb:96:29:          5b:61:f0:d9:23:d1:25:ca:a0:ea:80:ce:42:bb:12:40:b9:64:          c6:a5:4f:99:dc:f3:26:74:49:bc:b2:70:49:d2:22:f2:75:07:          6e:8f:96:9b:e6:67:ad:21:01:23:57:46:ea:78:12:3b:c8:ba:          dc:ae:39:ee:d6:30:6d:58:ab:f0:fe:c1:68:fb:0a:68:09:fc:          93:28:84:27:2d:1d:c0:c2:06:53:1b:3b:ff:ec:d8:a1:90:1c:          c4:59:c0:c3:d5:f4:bb:d4:79:35:dd:7f:05:60:3f:a9:ba:b0:         5c:b3:66:13:03:4f:ac:31:0c:8a:e9:82:8d:36:c1:78:bf:d6:          5e:6d:f9:13 That is it! Now you have a web server cert which would be trusted by most browsers, provided you import the root CA public cert in to the browsers’ trust chain. Footnote #1 https://cabforum.org/baseline-requirements-documents/ Footnote #2 SHA-1 disabled on Chrome 56 and FireFox (Jan 2017) https://www.chromestatus.com/features/6601657605423104 https://sites.google.com/a/chromium.org/dev/Home/chromium-security/education/tls/sha-1 https://blog.mozilla.org/security/2017/02/23/the-end-of-sha-1-on-the-public-web/ Footnote #3 SAN mandatory https://www.chromestatus.com/features/4981025180483584 https://bugzilla.mozilla.org/show_bug.cgi?id=1245280 https://tools.ietf.org/html/rfc2818</summary></entry><entry><title type="html">Dynamic registration of DNS for Linux devices in an Active Directory environment with Windows DNS server</title><link href="http://localhost:4000/sysadmin/2017/07/19/dynamic-registration-of-dns-for-linux-devices-in-an-active-directory-environment-with-windows-dns-server/" rel="alternate" type="text/html" title="Dynamic registration of DNS for Linux devices in an Active Directory environment with Windows DNS server" /><published>2017-07-19T23:43:13+08:00</published><updated>2017-07-19T23:43:13+08:00</updated><id>http://localhost:4000/sysadmin/2017/07/19/dynamic-registration-of-dns-for-linux-devices-in-an-active-directory-environment-with-windows-dns-server</id><content type="html" xml:base="http://localhost:4000/sysadmin/2017/07/19/dynamic-registration-of-dns-for-linux-devices-in-an-active-directory-environment-with-windows-dns-server/">&lt;p&gt;While Linux has proliferated extensively in the server arena in the recent past, client networks are still dominated by Windows devices. This means, things that we take for granted in a client environment such as DDNS are not as matured as they are in Windows environment. One may ask whether the recent surge in Linux based clients such as IoT devices has changed this equation. But the nature of these devices is different from Windows based clients that they mostly rely on outbound connection to internet. Since they seldom require other hosts to initiate connection to them, their operation doesn’t rely much on Dynamic DNS.&lt;/p&gt;

&lt;p&gt;So, what does it take to make a Linux client register dynamically in a Windows environment? At its basic, the entire process relies on Dynamic DNS as explained in &lt;a href=&quot;https://tools.ietf.org/html/rfc2136&quot;&gt;RFC2136&lt;/a&gt;. In a traditional windows environment with AD, this process is taken care by client OS. Every time a Windows PC gets an IP address from DHCP server, it would send a DNS Update (Opcode = 5) request to its registered DNS server. Performed manually, this is same as typing “ipconfig /registerdns” at an elevated command prompt. This behaviour can be modified by accessing DNS section of Advanced TCP/IP settings of a network adapter.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/1-dns-properties.png&quot; alt=&quot;1 - DNS Properties.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When we ask a Linux client to do the same (later I will explain how it can be configured to ask), it won’t work unless the DNS server is configured to accept “Insecure updates” (Which is a major security risk if you need to ask).&lt;/p&gt;

&lt;p&gt;Take a look at the capture of Linux client performing DNS update, you can see that the server comes back with a UPDATE REFUSED response.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/2-linux-dns-update-capture.png&quot; alt=&quot;2 - Linux DNS Update Capture.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is because our DNS server is enabled with secure updates which means only authenticated clients can send update.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/3-dns-secure-updates-option.png&quot; alt=&quot;3 - DNS Secure Updates option.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The client is expected to send a transaction signature along with the update request. There are different types of signatures such as a TSIG resource or the SIG(0) or GSS-TSIG signatures. In Windows world however, only GSS-TSIG signatures as described in &lt;a href=&quot;https://tools.ietf.org/html/rfc3645&quot;&gt;RFC3645&lt;/a&gt; are understood and accepted.&lt;/p&gt;

&lt;p&gt;Looking at a capture from a Windows PC joined to domain, one can see the Windows Device sending Update request with GSS-TSIG resource.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/2-windows-dns-update-capture.png&quot; alt=&quot;2 - Windows DNS Update Capture.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Given this background, let us explore some of the options available to setup DDNS for Linux based clients. In this series of posts, I will explore 3 options:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Configure DHCP server to perform DNS registration on behalf of the clients&lt;/li&gt;
  &lt;li&gt;Join the Linux devices to AD domain and configure them to dynamically update&lt;/li&gt;
  &lt;li&gt;Setup a new sub-domain running a dedicated Linux BIND server and configure DNS forwarding on Microsoft DNS server.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Our environment has the following setup:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Microsoft Active Directory environment with DNS server installed in Domain controller and a DHCP server running separately on a different host. All are running on Windows Server 2008 R2.&lt;/li&gt;
  &lt;li&gt;DNS is configured to accept only Secure updates.&lt;/li&gt;
  &lt;li&gt;Two Linux devices running Debian Stretch operating system. One of them will act as DNS server in one of the scenarios.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/4-lab-topology.png&quot; alt=&quot;4 - Lab Topology.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The solutions we discuss should meet the following objectives:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Update DNS when the device gets an IP address&lt;/li&gt;
  &lt;li&gt;Perform periodic update to DNS server to protect against expiry&lt;/li&gt;
  &lt;li&gt;Fully automated with very little or no hand-coding on client devices, assume no automation tools like Puppet or Chef&lt;/li&gt;
  &lt;li&gt;Scalable to hundreds or thousands of devices&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Point 3 is important to me since I had to work out a solution at work where we are using hundreds of Raspberry Pi’s, all booting the same image cloned on to flash disks. So, editing config files on each of them is not an option (we will come to this later).&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;configuring-dhcp-server-to-perform-dns-registration-on-behalf-of-the-clients&quot;&gt;Configuring DHCP server to perform DNS registration on behalf of the clients&lt;/h2&gt;

&lt;p&gt;This is the simplest and most reliable solution of the available options. This method makes use of DHCP option 81 as defined in &lt;a href=&quot;https://tools.ietf.org/html/rfc4702&quot;&gt;RFC4702&lt;/a&gt;, which is used to convey a client’s FQDN to a DHCP server as part of DHCP process.&lt;/p&gt;

&lt;blockquote&gt;An aside: RFC doesn’t mandate whether a DHCP server should register client’s DNS or not. It is left to site-specific policies, which may differ per the security context of the site.&lt;/blockquote&gt;

&lt;p&gt;The default setting in a Microsoft DHCP server scope is as follows (Right click on scope name -&amp;gt; Properties to reach here):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/5-default-scope-properties.png&quot; alt=&quot;5 - Default scope properties.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Understandably, this only updates to DNS server if requested by the client. What happens if we select the option to “Always dynamically update DNS A and PTR records”? Is that what we want?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/6-always-dynamically-update1.png&quot; alt=&quot;6 - Always dynamically update.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you trigger a DHCP request from the client, you will notice that this doesn’t work.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/7-no-dns-update.png&quot; alt=&quot;7 - No DNS Update.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This setting merely controls whether a DHCP server should update ‘A’ record or not.  The label “Always dynamically update DNS A and PTR records” is misleading since it applies only for the clients that request a DNS update. By default, a client is responsible for updating the A record and DHCP server is responsible for updating the PTR record. Selecting the second option forces DHCP server to update A record as well. But the prerequisite is that the client should request for DNS update.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/8-dns-update-options.png&quot; alt=&quot;8 - DNS Update options.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The two options above correspond to the two cases discussed in &lt;a href=&quot;https://tools.ietf.org/html/rfc4702&quot;&gt;RFC4702&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/9-rfc-4702.png&quot; alt=&quot;9 - RFC 4702.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For our Linux clients, the option we need is the last check box. Let us turn this on and trigger a DHCP request from our client.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/10-dynamically-update-for-linux-clients.png&quot; alt=&quot;10 - Dynamically update for Linux clients.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When we check the DNS server, we can see that the A record successfully is created.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/11-successful-registration.png&quot; alt=&quot;11 - Successful Registration.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the capture, we can see secure DNS update message being sent from the DHCP server (Note that the DNS clients always tries insecure updates first and gets rejected by the server).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/12-successful-registration-packets.png&quot; alt=&quot;12 - Successful Registration Packets.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For a home environment, this is almost enough. But for production environments, with multiple DHCP servers, this is not enough. The problem is that, in such setup the DHCP server becomes the owner of the A and PTR records (see below). It is fine as long as the DHCP server is alive to create and remove records. But when it goes down, its peer DHCP server won’t be able to do anything about those records.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/13-a-record-owner.png&quot; alt=&quot;13 - A record owner.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This &lt;a href=&quot;https://technet.microsoft.com/en-us/library/dd334715(v=ws.10).aspx&quot;&gt;link&lt;/a&gt; explains the issue in more detail. Let us follow the advice, create a dedicated user account for updating DNS and delete the old record with DHCP server as owner. Do not grant any extra privilege to this account. Just adding to DNSUpdateProxy group should be sufficient (Right click on IPv4 -&amp;gt; Properties -&amp;gt; Advanced).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/14-dynamic-update-credentials.png&quot; alt=&quot;14 - Dynamic update credentials.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As usual, let us go ahead to trigger an update.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017/07/dynamic-registration-of-dns-for-linux-devices-in-an-active-directory-environment-with-windows-dns-server/15-dhcp-request.png&quot; alt=&quot;15 - DHCP Request.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As expected, new A and PTR record gets created.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/16-successful-registration.png&quot; alt=&quot;16 - Successful Registration.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we check the ownership, we can find that the record is owned by DNSProxyUpdate group.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/16-dynamic-update-credentials1.png&quot; alt=&quot;16 - Dynamic update credentials.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Finally, let us discuss the option called “Name Protection” at the bottom of the dialog box.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/17-name-protection.png&quot; alt=&quot;17 - Name Protection.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This forces DHCP server to manage the entire lifecycle of your client’s A and PTR records. If you are going to let your DHCP server manage client’s A record, I don’t see any reason to keep this disabled. It will also protect you from “&lt;a href=&quot;https://technet.microsoft.com/en-us/library/dd759188(v=ws.11).aspx&quot;&gt;Name Squatting&lt;/a&gt;” by offline clients. &lt;a href=&quot;https://tools.ietf.org/html/rfc4701&quot;&gt;RFC4701 &lt;/a&gt;describes the problem as:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/18-rfc4701.png&quot; alt=&quot;18 - RFC4701.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let us see what it means to turn on this option. First, we keep it disabled and bring two clients online with same hostname, one after other. All is well when the first client comes online and gets an IP address 192.168.179.50.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/19-dhcp-request.png&quot; alt=&quot;19 - DHCP Request.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;DNS also gets updated accordingly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/20-dns-update.png&quot; alt=&quot;20 - DNS Update.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let us bring another Linux client online and change the hostname to same as this host. Then perform a DHCP request from this host.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/21-hostname-change.png&quot; alt=&quot;21 - Hostname change.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/22-dhcp-request.png&quot; alt=&quot;22 - DHCP Request.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;DHCP server assigns IP address 192.168.179.51 and sends an update to DNS server. Note that the DHCP server makes no fuss about two hosts sharing the same hostname. For all it knows, it could be the same host with multiple interfaces.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/23-dhcp-update.png&quot; alt=&quot;23 - DHCP Update.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the DNS sever side, we see that it accepts this update without any hesitation. The only problem is that this overwrites the existing record, while the client is still online. So, anyone trying to talk the first node ends up talking to the second node.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/24-dns-overwritten.png&quot; alt=&quot;24 - DNS overwritten.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Clearly, DHCP server is not a reliable source of identity. RFC4703 briefly mentions the inability of DHCP server to provide any sort of assurance.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/25-rfc4703.png&quot; alt=&quot;25 - RFC4703.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let us see what happens when we enable “Name Protection”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/26-enable-name-protection.png&quot; alt=&quot;26 - Enable Name Protection.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As soon as we enable this option, first thing we notice is that all other options are greyed out. This is because, with Name Protection enabled, it is always the responsibility of DHCP server to perform both A record and PTR record updates.&lt;/p&gt;

&lt;p&gt;Let us wipe the slate clean, by releasing IP address from both the clients and deleting the existing DNS &amp;amp; DHCP records.&lt;/p&gt;

&lt;p&gt;Now when you bring the first Linux client online, you can see that the DHCP server performs a new type of record registration called DHCID.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/27-successful-dhcid-capture.png&quot; alt=&quot;27 - Successful DHCID Capture.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A new record type DHCID appears in the DNS server.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/28-successful-dhcid-registered.png&quot; alt=&quot;28 - Successful DHCID registered.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let us bring up the impostor and request DHCP address. It gets an IP address of 192.168.179.51.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/29-dns-impersonation.png&quot; alt=&quot;29 - DNS Impersonation.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As usual, DHCP server is very generous about having two hosts sharing the same hostname.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/30-duplicate-dhcp-update.png&quot; alt=&quot;30 - Duplicate DHCP Update.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But no new DNS entry is created.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/31-name-protection-success.png&quot; alt=&quot;31 - Name protection success.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looking at the capture, we can see that the DNS registration fails with a response that RRset does not exist.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/32-dns-update-refused-capture.png&quot; alt=&quot;32 - DNS Update refused capture.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This message means that DHCID value calculated from the new update packet doesn’t match with any DHCID RR’s stored in the server. This behaviour is described in &lt;a href=&quot;https://tools.ietf.org/html/rfc4701&quot;&gt;RFC4701&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/33-rfc4701.png&quot; alt=&quot;33 - RFC4701.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is as much as we need to know about configuring a Microsoft DHCP server to perform Dynamic DNS for Linux clients. In the upcoming posts, let us explore the other two options.&lt;/p&gt;</content><author><name>thamizh85</name></author><category term="DHCP" /><category term="DNS" /><category term="Dynamic DNS" /><category term="Linux" /><summary type="html">While Linux has proliferated extensively in the server arena in the recent past, client networks are still dominated by Windows devices. This means, things that we take for granted in a client environment such as DDNS are not as matured as they are in Windows environment. One may ask whether the recent surge in Linux based clients such as IoT devices has changed this equation. But the nature of these devices is different from Windows based clients that they mostly rely on outbound connection to internet. Since they seldom require other hosts to initiate connection to them, their operation doesn’t rely much on Dynamic DNS. So, what does it take to make a Linux client register dynamically in a Windows environment? At its basic, the entire process relies on Dynamic DNS as explained in RFC2136. In a traditional windows environment with AD, this process is taken care by client OS. Every time a Windows PC gets an IP address from DHCP server, it would send a DNS Update (Opcode = 5) request to its registered DNS server. Performed manually, this is same as typing “ipconfig /registerdns” at an elevated command prompt. This behaviour can be modified by accessing DNS section of Advanced TCP/IP settings of a network adapter. When we ask a Linux client to do the same (later I will explain how it can be configured to ask), it won’t work unless the DNS server is configured to accept “Insecure updates” (Which is a major security risk if you need to ask). Take a look at the capture of Linux client performing DNS update, you can see that the server comes back with a UPDATE REFUSED response. This is because our DNS server is enabled with secure updates which means only authenticated clients can send update. The client is expected to send a transaction signature along with the update request. There are different types of signatures such as a TSIG resource or the SIG(0) or GSS-TSIG signatures. In Windows world however, only GSS-TSIG signatures as described in RFC3645 are understood and accepted. Looking at a capture from a Windows PC joined to domain, one can see the Windows Device sending Update request with GSS-TSIG resource. Given this background, let us explore some of the options available to setup DDNS for Linux based clients. In this series of posts, I will explore 3 options: Configure DHCP server to perform DNS registration on behalf of the clients Join the Linux devices to AD domain and configure them to dynamically update Setup a new sub-domain running a dedicated Linux BIND server and configure DNS forwarding on Microsoft DNS server. Our environment has the following setup: Microsoft Active Directory environment with DNS server installed in Domain controller and a DHCP server running separately on a different host. All are running on Windows Server 2008 R2. DNS is configured to accept only Secure updates. Two Linux devices running Debian Stretch operating system. One of them will act as DNS server in one of the scenarios. The solutions we discuss should meet the following objectives: Update DNS when the device gets an IP address Perform periodic update to DNS server to protect against expiry Fully automated with very little or no hand-coding on client devices, assume no automation tools like Puppet or Chef Scalable to hundreds or thousands of devices Point 3 is important to me since I had to work out a solution at work where we are using hundreds of Raspberry Pi’s, all booting the same image cloned on to flash disks. So, editing config files on each of them is not an option (we will come to this later). Configuring DHCP server to perform DNS registration on behalf of the clients This is the simplest and most reliable solution of the available options. This method makes use of DHCP option 81 as defined in RFC4702, which is used to convey a client’s FQDN to a DHCP server as part of DHCP process. An aside: RFC doesn’t mandate whether a DHCP server should register client’s DNS or not. It is left to site-specific policies, which may differ per the security context of the site. The default setting in a Microsoft DHCP server scope is as follows (Right click on scope name -&amp;gt; Properties to reach here): Understandably, this only updates to DNS server if requested by the client. What happens if we select the option to “Always dynamically update DNS A and PTR records”? Is that what we want? If you trigger a DHCP request from the client, you will notice that this doesn’t work. This setting merely controls whether a DHCP server should update ‘A’ record or not.  The label “Always dynamically update DNS A and PTR records” is misleading since it applies only for the clients that request a DNS update. By default, a client is responsible for updating the A record and DHCP server is responsible for updating the PTR record. Selecting the second option forces DHCP server to update A record as well. But the prerequisite is that the client should request for DNS update. The two options above correspond to the two cases discussed in RFC4702 For our Linux clients, the option we need is the last check box. Let us turn this on and trigger a DHCP request from our client. When we check the DNS server, we can see that the A record successfully is created. On the capture, we can see secure DNS update message being sent from the DHCP server (Note that the DNS clients always tries insecure updates first and gets rejected by the server). For a home environment, this is almost enough. But for production environments, with multiple DHCP servers, this is not enough. The problem is that, in such setup the DHCP server becomes the owner of the A and PTR records (see below). It is fine as long as the DHCP server is alive to create and remove records. But when it goes down, its peer DHCP server won’t be able to do anything about those records. This link explains the issue in more detail. Let us follow the advice, create a dedicated user account for updating DNS and delete the old record with DHCP server as owner. Do not grant any extra privilege to this account. Just adding to DNSUpdateProxy group should be sufficient (Right click on IPv4 -&amp;gt; Properties -&amp;gt; Advanced). As usual, let us go ahead to trigger an update. As expected, new A and PTR record gets created. If we check the ownership, we can find that the record is owned by DNSProxyUpdate group. Finally, let us discuss the option called “Name Protection” at the bottom of the dialog box. This forces DHCP server to manage the entire lifecycle of your client’s A and PTR records. If you are going to let your DHCP server manage client’s A record, I don’t see any reason to keep this disabled. It will also protect you from “Name Squatting” by offline clients. RFC4701 describes the problem as: Let us see what it means to turn on this option. First, we keep it disabled and bring two clients online with same hostname, one after other. All is well when the first client comes online and gets an IP address 192.168.179.50. DNS also gets updated accordingly. Let us bring another Linux client online and change the hostname to same as this host. Then perform a DHCP request from this host. DHCP server assigns IP address 192.168.179.51 and sends an update to DNS server. Note that the DHCP server makes no fuss about two hosts sharing the same hostname. For all it knows, it could be the same host with multiple interfaces. On the DNS sever side, we see that it accepts this update without any hesitation. The only problem is that this overwrites the existing record, while the client is still online. So, anyone trying to talk the first node ends up talking to the second node. Clearly, DHCP server is not a reliable source of identity. RFC4703 briefly mentions the inability of DHCP server to provide any sort of assurance. Let us see what happens when we enable “Name Protection”. As soon as we enable this option, first thing we notice is that all other options are greyed out. This is because, with Name Protection enabled, it is always the responsibility of DHCP server to perform both A record and PTR record updates. Let us wipe the slate clean, by releasing IP address from both the clients and deleting the existing DNS &amp;amp; DHCP records. Now when you bring the first Linux client online, you can see that the DHCP server performs a new type of record registration called DHCID. A new record type DHCID appears in the DNS server. Let us bring up the impostor and request DHCP address. It gets an IP address of 192.168.179.51. As usual, DHCP server is very generous about having two hosts sharing the same hostname. But no new DNS entry is created. Looking at the capture, we can see that the DNS registration fails with a response that RRset does not exist. This message means that DHCID value calculated from the new update packet doesn’t match with any DHCID RR’s stored in the server. This behaviour is described in RFC4701. This is as much as we need to know about configuring a Microsoft DHCP server to perform Dynamic DNS for Linux clients. In the upcoming posts, let us explore the other two options.</summary></entry></feed>