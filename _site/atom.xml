<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.2">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-02-12T22:49:22+08:00</updated><id>http://localhost:4000/</id><title type="html">Ephemeral Electrons</title><author><name>Tamizh</name></author><entry><title type="html">Solving an ancient Chinese math puzzle with Constraint Programming using Google’s OR-Tools</title><link href="http://localhost:4000/modelling/2017/12/09/2017-12-09-solving-an-ancient-chinese-math-puzzle-with-constraint-programming-using-googles-or-tools/" rel="alternate" type="text/html" title="Solving an ancient Chinese math puzzle with Constraint Programming using Google's OR-Tools" /><published>2017-12-09T12:00:00+08:00</published><updated>2017-12-09T12:00:00+08:00</updated><id>http://localhost:4000/modelling/2017/12/09/2017-12-09-solving-an-ancient-chinese-math-puzzle-with-constraint-programming-using-googles-or-tools</id><content type="html" xml:base="http://localhost:4000/modelling/2017/12/09/2017-12-09-solving-an-ancient-chinese-math-puzzle-with-constraint-programming-using-googles-or-tools/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.wikiwand.com/en/Constraint_programming&quot;&gt;Constraint programming (CP)&lt;/a&gt; is a subset of Operations Research (OR) where our task is to identify all feasible solutions to a given problem that satisfies a set of constraints. This is different from an optimization problem, where an objective function is defined and we arrive at solutions that either maximizes or minimizes an objective function.&lt;/p&gt;

&lt;p&gt;CP is mostly well suited for solving logic puzzles, since most logic puzzles are based on constraints and enumerating feasible solutions. But apart from recreational maths, CP also has a lot of practical applications in Scheduling, Resource allocation, Manufacturing etc.,&lt;/p&gt;

&lt;p&gt;Recently I came across &lt;a href=&quot;https://developers.google.com/optimization/&quot;&gt;or-tools&lt;/a&gt; from Google github repo. It is a suite of libraries for solving Operations Research problems. I wanted to give it a try by solving a simple logic puzzle. The puzzle I chose is called &lt;a href=&quot;https://www.wikiwand.com/en/Hundred_Fowls_Problem&quot;&gt;Hundred Fowls Problem&lt;/a&gt;. Let us see how it goes.&lt;/p&gt;

&lt;h2 id=&quot;hundred-fowls-problem&quot;&gt;Hundred Fowls problem&lt;/h2&gt;
&lt;p&gt;This puzzle found in the sixth-century work of mathematician Chang Chiu-chen called the “hundred fowls” problem asks:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If a rooster is worth five coins, a hen three coins, and three chickens together are worth one coin, how many roosters, hens, and chicks totalling 100 can be bought for 100 coins?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This translates to solving a set of 2 algebraic equations with 3 variables. In real numbers, there are infinite solutions to this puzzle since we are short by one non-equivalent equation to bind values to 3 variables. However, buying non-integer number of fowls can get tricky, so we can safely assume that we are dealing with 3 integer valued variables here. This reduces the solution space to a finite count, but still there are more than one feasible solution. This is a perfect candidate for constraint programming since we need to identify all feasible solutions and not maximize/minimize an objective function.&lt;/p&gt;

&lt;h3 id=&quot;components-of-an-or-model&quot;&gt;Components of an OR model&lt;/h3&gt;
&lt;p&gt;A model for an optimization problem can be thought to have 3 components:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Decision variables&lt;/li&gt;
  &lt;li&gt;Constraints&lt;/li&gt;
  &lt;li&gt;Objectives&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Decision variables are the answer an OR problem tries to solve. In our case, it is the valid number of fowls of each type that we can buy. Constraints are the limits imposed on the problem. Here we have total cost and total bird count imposed as limits. An objective is the goal of an OR problem such as maximize profit or minimize project time etc., Most often in Constraint Programming, we don’t need to work with objectives and we don’t have one for our problem as well.&lt;/p&gt;

&lt;h3 id=&quot;setting-up-the-code&quot;&gt;Setting up the code&lt;/h3&gt;
&lt;p&gt;Let us first import the necessary modules and create a Solver and define our parameters.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ortools.constraint_solver&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pywrapcp&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pywrapcp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Solver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hundred_fowls&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ROOSTER_COST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;HEN_COST&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;THREE_CHICK_COST&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;total_cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;total_fowls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;decision-variables&quot;&gt;Decision Variables&lt;/h4&gt;
&lt;p&gt;Let us first try to define the limits our decision variables can take i.e., the maximum number of roosters, hens or chicks that we need to consider. One can enumerate each fowl type up to the total count (100) but this increases the search domain unnecessarily. For e.g, we cannot buy more than 20 roosters since we would exceed 100 coins nor can we buy 300 chicks for 100 coins. So, we try to establish the upper limit for each of our decision variables as below:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;math&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;floor&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;max_rooster&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total_fowls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total_cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ROOSTER_COST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;max_hen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total_fowls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total_cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HEN_COST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;max_chick_set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total_fowls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total_cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;THREE_CHICK_COST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# a set of 3 chickens &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Notice that for chick count, we are grouping them in sets of three. This is because the unit cost of a chick is a fraction (1/3) and the solver doesn’t allow us to multiply float numbers with IntVar object (which we will come to know later). This is perfectly acceptable for our scenario since chick count always needs to be a multiple of 3 or else the total cost will never be an integer (100 in this case). Besides, this also reduces the search space for chick count by a factor of 3, eliminating obvious non-solutions.&lt;/p&gt;

&lt;p&gt;We now have to spec out our decision variables. OR-Tools supports different types of decision variables such as Integers, Intervals etc., In our current challenge the decision variable is an integer so we assign it by using IntVar method. The first two values gives the lower and upper bounds for the variables. The last value is an arbitrary string handle for output representation. I am not sure under which scenarios the last variable will come to use, but likely it is an object name required for the underlying C++ code. The python module we use for or-tools is actually a wrapper for the core C++ code.&lt;/p&gt;

&lt;p&gt;For our problem the decision variables can be defined as below:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# since the puzzle requires us to buy atleast one fowl &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# of each type we will start enumerating from one&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rooster_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IntVar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_rooster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Rooster&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hen_count&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IntVar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_hen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hen&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;chick_set_count&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IntVar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_chick_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Chick&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;constraints&quot;&gt;Constraints&lt;/h4&gt;
&lt;p&gt;Next we add the constraints for our model. It is done using the “Add” method of Solver object.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rooster_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; 
           &lt;span class=&quot;n&quot;&gt;hen_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; 
           &lt;span class=&quot;n&quot;&gt;chick_set_count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total_fowls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rooster_count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ROOSTER_COST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; 
           &lt;span class=&quot;n&quot;&gt;hen_count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HEN_COST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; 
           &lt;span class=&quot;n&quot;&gt;chick_set_count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;THREE_CHICK_COST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total_cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;navigating-the-search-space&quot;&gt;Navigating the search space&lt;/h4&gt;
&lt;p&gt;Next we create a decision builder which specifies how to iterate through all possible values for our problems. It is done using the Phase method. The first arguemnt is an array of our decision variables. Second argument is how we choose the next value to try for our decision variable. Last argument is how we start assigning value to our variable (from minimum or maximum). We will go with the defauls although for larger problems, we could use some sort of heuristics to search only interesting portions of a search space. You can refer to &lt;a href=&quot;http://www.lia.disi.unibo.it/Staff/MicheleLombardi/or-tools-doc/reference_manual/or-tools/src/constraint_solver/classoperations__research_1_1Solver.html#8bda7ed6e7e533cca4c44eba6efffc8b&quot;&gt;or-tools documentation&lt;/a&gt; for other search strategies.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Phase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rooster_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hen_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chick_set_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; 
                  &lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHOOSE_FIRST_UNBOUND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                  &lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ASSIGN_MIN_VALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;solving-the-model&quot;&gt;Solving the model&lt;/h3&gt;
&lt;p&gt;Finally we solve our model and iterate through our solutions.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NextSolution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{0} Roosters, {1} Hen and {2} Chicks&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rooster_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hen_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chick_set_count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Number of unique solutions found - {0}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This produces 3 solutions to the puzzle.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Rooster(4) Roosters, Hen(18) Hen and 78 Chicks
Rooster(8) Roosters, Hen(11) Hen and 81 Chicks
Rooster(12) Roosters, Hen(4) Hen and 84 Chicks
Number of unique solutions found - 3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h2&gt;

&lt;p&gt;or-tools manual on &lt;a href=&quot;https://acrogenesis.com/or-tools/documentation/user_manual/manual/introduction/what_is_cp.html&quot;&gt;Constraint Programming&lt;/a&gt; is quite comprehensive. As always, best way to learn is to study existing code and implementations. In this regards, the &lt;a href=&quot;https://github.com/google/or-tools/tree/master/examples&quot;&gt;example scripts&lt;/a&gt; from or-tools public repo is quite indispensable for learning. There is a good amount of example scripts for some of the most popular OR challenges.&lt;/p&gt;</content><author><name>thamizh85</name></author><category term="or-tools" /><category term="python" /><category term="puzzle" /><category term="operations research" /><category term="constraint programming" /><summary type="html">Introduction Constraint programming (CP) is a subset of Operations Research (OR) where our task is to identify all feasible solutions to a given problem that satisfies a set of constraints. This is different from an optimization problem, where an objective function is defined and we arrive at solutions that either maximizes or minimizes an objective function. CP is mostly well suited for solving logic puzzles, since most logic puzzles are based on constraints and enumerating feasible solutions. But apart from recreational maths, CP also has a lot of practical applications in Scheduling, Resource allocation, Manufacturing etc., Recently I came across or-tools from Google github repo. It is a suite of libraries for solving Operations Research problems. I wanted to give it a try by solving a simple logic puzzle. The puzzle I chose is called Hundred Fowls Problem. Let us see how it goes. Hundred Fowls problem This puzzle found in the sixth-century work of mathematician Chang Chiu-chen called the “hundred fowls” problem asks: If a rooster is worth five coins, a hen three coins, and three chickens together are worth one coin, how many roosters, hens, and chicks totalling 100 can be bought for 100 coins? This translates to solving a set of 2 algebraic equations with 3 variables. In real numbers, there are infinite solutions to this puzzle since we are short by one non-equivalent equation to bind values to 3 variables. However, buying non-integer number of fowls can get tricky, so we can safely assume that we are dealing with 3 integer valued variables here. This reduces the solution space to a finite count, but still there are more than one feasible solution. This is a perfect candidate for constraint programming since we need to identify all feasible solutions and not maximize/minimize an objective function. Components of an OR model A model for an optimization problem can be thought to have 3 components: Decision variables Constraints Objectives Decision variables are the answer an OR problem tries to solve. In our case, it is the valid number of fowls of each type that we can buy. Constraints are the limits imposed on the problem. Here we have total cost and total bird count imposed as limits. An objective is the goal of an OR problem such as maximize profit or minimize project time etc., Most often in Constraint Programming, we don’t need to work with objectives and we don’t have one for our problem as well. Setting up the code Let us first import the necessary modules and create a Solver and define our parameters. from ortools.constraint_solver import pywrapcp solver = pywrapcp.Solver(&quot;hundred_fowls&quot;) ROOSTER_COST = 5 HEN_COST = 3 THREE_CHICK_COST = 1 total_cost = 100 total_fowls = 100 Decision Variables Let us first try to define the limits our decision variables can take i.e., the maximum number of roosters, hens or chicks that we need to consider. One can enumerate each fowl type up to the total count (100) but this increases the search domain unnecessarily. For e.g, we cannot buy more than 20 roosters since we would exceed 100 coins nor can we buy 300 chicks for 100 coins. So, we try to establish the upper limit for each of our decision variables as below: from math import floor max_rooster = min(total_fowls, floor(total_cost/ROOSTER_COST)) max_hen = min(total_fowls, floor(total_cost/HEN_COST)) max_chick_set = min(total_fowls, floor(total_cost/THREE_CHICK_COST)) # a set of 3 chickens Notice that for chick count, we are grouping them in sets of three. This is because the unit cost of a chick is a fraction (1/3) and the solver doesn’t allow us to multiply float numbers with IntVar object (which we will come to know later). This is perfectly acceptable for our scenario since chick count always needs to be a multiple of 3 or else the total cost will never be an integer (100 in this case). Besides, this also reduces the search space for chick count by a factor of 3, eliminating obvious non-solutions. We now have to spec out our decision variables. OR-Tools supports different types of decision variables such as Integers, Intervals etc., In our current challenge the decision variable is an integer so we assign it by using IntVar method. The first two values gives the lower and upper bounds for the variables. The last value is an arbitrary string handle for output representation. I am not sure under which scenarios the last variable will come to use, but likely it is an object name required for the underlying C++ code. The python module we use for or-tools is actually a wrapper for the core C++ code. For our problem the decision variables can be defined as below: # since the puzzle requires us to buy atleast one fowl # of each type we will start enumerating from one rooster_count = solver.IntVar(1, max_rooster, &quot;Rooster&quot;) hen_count = solver.IntVar(1, max_hen, &quot;Hen&quot;) chick_set_count = solver.IntVar(1, max_chick_set, &quot;Chick&quot;) Constraints Next we add the constraints for our model. It is done using the “Add” method of Solver object. solver.Add(rooster_count + hen_count + chick_set_count*3 == total_fowls) solver.Add(rooster_count*ROOSTER_COST + hen_count*HEN_COST + chick_set_count*THREE_CHICK_COST == total_cost) Navigating the search space Next we create a decision builder which specifies how to iterate through all possible values for our problems. It is done using the Phase method. The first arguemnt is an array of our decision variables. Second argument is how we choose the next value to try for our decision variable. Last argument is how we start assigning value to our variable (from minimum or maximum). We will go with the defauls although for larger problems, we could use some sort of heuristics to search only interesting portions of a search space. You can refer to or-tools documentation for other search strategies. db = solver.Phase([rooster_count, hen_count, chick_set_count], solver.CHOOSE_FIRST_UNBOUND, solver.ASSIGN_MIN_VALUE) Solving the model Finally we solve our model and iterate through our solutions. solver.Solve(db) count = 0 while solver.NextSolution(): count += 1 print(&quot;{0} Roosters, {1} Hen and {2} Chicks&quot;.format(rooster_count, hen_count, chick_set_count.Value()*3)) print(&quot;Number of unique solutions found - {0}&quot;.format(count)) This produces 3 solutions to the puzzle. Rooster(4) Roosters, Hen(18) Hen and 78 Chicks Rooster(8) Roosters, Hen(11) Hen and 81 Chicks Rooster(12) Roosters, Hen(4) Hen and 84 Chicks Number of unique solutions found - 3 Further Reading or-tools manual on Constraint Programming is quite comprehensive. As always, best way to learn is to study existing code and implementations. In this regards, the example scripts from or-tools public repo is quite indispensable for learning. There is a good amount of example scripts for some of the most popular OR challenges.</summary></entry><entry><title type="html">Jumbo Ping Fallacy- Using Monte-Carlo Simulation to model ping loss behavior</title><link href="http://localhost:4000/modelling/2017/11/24/jumbo-ping-fallacy-using-monte-carlo-simulation-to-model-ping-loss-behavior/" rel="alternate" type="text/html" title="Jumbo Ping Fallacy- Using Monte-Carlo Simulation to model ping loss behavior" /><published>2017-11-24T08:01:28+08:00</published><updated>2017-11-24T08:01:28+08:00</updated><id>http://localhost:4000/modelling/2017/11/24/jumbo-ping-fallacy-using-monte-carlo-simulation-to-model-ping-loss-behavior</id><content type="html" xml:base="http://localhost:4000/modelling/2017/11/24/jumbo-ping-fallacy-using-monte-carlo-simulation-to-model-ping-loss-behavior/">&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;
&lt;p&gt;Recently we had a cabling issue in our core infrastructure which caused around 3 to 12% packet loss across few IP streams. One of my colleagues made an interesting observation that when he tried to ping with large packet size (5000 bytes) the packet loss rose up to 40%. In his opinion, that meant some applications were experiencing up to 40% packet loss. I seldom do large packet ping tests unless I am troubleshooting MTU issues, so to me this observation was interesting.&lt;/p&gt;

&lt;p&gt;At the outset, it may look like an aggravated problem that some applications relying on large packet sizes experience high packet loss. But you know that your path MTU doesn’t support jumbo frames end-to-end. Once you reason that the ping test results only represent ICMP datagram loss and not ethernet frame loss, you will realize that both tests results represent the same network performane but in different units. Interpreting them as two separate test cases is fallacious. Let us explore why.&lt;/p&gt;

&lt;h2 id=&quot;normal-ping-vs-large-ping&quot;&gt;Normal ping vs Large ping&lt;/h2&gt;
&lt;p&gt;In windows a normal ping packet size is 32 bytes and in most environments, the default MTU is 1500 bytes. So a single frame is sufficient to transmit a ping packet. Things get weirder when we ping with large packets. In windows, you can specify the ping packet size using -l option. Note that this size doesn’t include the packet header (20 bytes for IP header + 8 bytes for ICMP header). Which means with a 1500 MTU size, we can send only up to 1472 bytes in a single frame. Any length above this must be fragmented.&lt;/p&gt;

&lt;p&gt;We can test this easily. Below is the result when pinging with 1472 as the ping size (&lt;code class=&quot;highlighter-rouge&quot;&gt;ping 8.8.8.8 -n 2 -l 1472&lt;/code&gt;)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Capturing on 'Ethernet 2'
    1   0.000000     10.1.1.1 → 8.8.8.8      ICMP 1514 Echo (ping) request  id=0x0001, seq=8/2048, ttl=128
    2   0.015698      8.8.8.8 → 10.1.1.1     ICMP 106 Echo (ping) reply    id=0x0001, seq=8/2048, ttl=45
2 packets captured
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When we ping with just one more byte, you can see that 2 packets are sent in place of 1 ((&lt;code class=&quot;highlighter-rouge&quot;&gt;ping 8.8.8.8 -n 2 -l 1473&lt;/code&gt;)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Capturing on 'Ethernet 2'
    1   0.000000     10.1.1.1 → 8.8.8.8      IPv4 1514 Fragmented IP protocol (proto=ICMP 1, off=0, ID=4fab)
    2   0.000016     10.1.1.1 → 8.8.8.8      ICMP 35 Echo (ping) request  id=0x0001, seq=10/2560, ttl=128
2 packets captured
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So when we ping with 5000 bytes, 4 packets are sent. And ICMP protocol considers a datagram to be lost even when one of them fails. So the probability of the ICMP datagram loss is higher than the probability of single frame loss.&lt;/p&gt;

&lt;p&gt;But is this what is happening in the ping test result? We can calculate the probability of datagram loss using probability theory but let us defer to it later on and do a numerical simulation first using Monte Carlo simulation.&lt;/p&gt;

&lt;h2 id=&quot;monte-carlo-simulation&quot;&gt;Monte Carlo Simulation&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.wikiwand.com/en/Monte_Carlo_method&quot;&gt;Monte carlo simulation&lt;/a&gt; is a rather fancy title for a simple simulation using random event generator, but it is quite handy and widely used. Usually Monte Carlo simulation is useful for simulating events that are truly random in nature. In a chaotic backbone network, that handles traffic stream of different kinds, we can assume the frame loss to happen approximately in a random fashion.&lt;/p&gt;

&lt;p&gt;Let us write a short program to simulate random packet loss.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;np&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sampleCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100000&lt;/span&gt;                               &lt;span class=&quot;c&quot;&gt;# total events in our simulation&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.03&lt;/span&gt;                                           &lt;span class=&quot;c&quot;&gt;# ethernet frame loss probability&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;grpSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;                                        &lt;span class=&quot;c&quot;&gt;# packet count per datagram, 5000 bytes = 4 packets&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;grpEventCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sampleCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grpSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;# datagram count&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# generate random packets with p% packet loss&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                          &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sampleCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# group discrete packets into a datagram&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;grpEvents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grpEventCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grpSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 

&lt;span class=&quot;c&quot;&gt;# function to determine datagram loss&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkFailure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grpEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count_nonzero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grpEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grpSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# Return 1 if the success count is less than 3&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# count the result&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;failCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grpEvent&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grpEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;failCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checkFailure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grpEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The probability of a group failure is {:.2f}&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;failCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grpEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;The probability of a group failure is 11.78%
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There you see! Even a 3% ethernet frame loss translates to 12% packet loss for jumbo ping test. This is same as what we observed. Now this is just a simulation with random input. But does the math agree?&lt;/p&gt;

&lt;h2 id=&quot;using-probability-theory&quot;&gt;Using Probability Theory&lt;/h2&gt;
&lt;p&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt; is the probability of a single frame loss, &lt;code class=&quot;highlighter-rouge&quot;&gt;(1-p)&lt;/code&gt; is the probability of a successful transfer. And a datagram is successful only if all of its frames are successful. So an ICMP datagram which is 4 frame long, will have &lt;code class=&quot;highlighter-rouge&quot;&gt;(1-p)**4&lt;/code&gt; probability of succesful delivery. To calculate the failure rate, just take its inverse.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0.11470719000000007
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As expected the simulation is slightly off from the calculated probability. But it will get closer to the real figure when we increase the simulation count.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The exactness of our calculation hinges on the assumption of random nature of packet loss. While it happened to be close to true in my case, it need not be all the time. The link may be loaded in a bursty manner and since our ping streams are evenly spaced over time, their chances of failure may not be truly random.&lt;/p&gt;

&lt;p&gt;Nevertheless, we should be wary of the difference between a datagram loss and ethernet loss while interpreting results. Consider the MTU of the network path while testing with different packet sizes.&lt;/p&gt;

&lt;h6 id=&quot;jupyter-notebook-version-of-this-post-can-be-viewed-here&quot;&gt;Jupyter notebook version of this post can be viewed &lt;a href=&quot;https://goo.gl/DYxpCo&quot;&gt;here&lt;/a&gt;&lt;/h6&gt;</content><author><name>thamizh85</name></author><category term="network" /><category term="python" /><category term="numpy" /><category term="probability" /><category term="scripting" /><summary type="html">Background Recently we had a cabling issue in our core infrastructure which caused around 3 to 12% packet loss across few IP streams. One of my colleagues made an interesting observation that when he tried to ping with large packet size (5000 bytes) the packet loss rose up to 40%. In his opinion, that meant some applications were experiencing up to 40% packet loss. I seldom do large packet ping tests unless I am troubleshooting MTU issues, so to me this observation was interesting. At the outset, it may look like an aggravated problem that some applications relying on large packet sizes experience high packet loss. But you know that your path MTU doesn’t support jumbo frames end-to-end. Once you reason that the ping test results only represent ICMP datagram loss and not ethernet frame loss, you will realize that both tests results represent the same network performane but in different units. Interpreting them as two separate test cases is fallacious. Let us explore why. Normal ping vs Large ping In windows a normal ping packet size is 32 bytes and in most environments, the default MTU is 1500 bytes. So a single frame is sufficient to transmit a ping packet. Things get weirder when we ping with large packets. In windows, you can specify the ping packet size using -l option. Note that this size doesn’t include the packet header (20 bytes for IP header + 8 bytes for ICMP header). Which means with a 1500 MTU size, we can send only up to 1472 bytes in a single frame. Any length above this must be fragmented. We can test this easily. Below is the result when pinging with 1472 as the ping size (ping 8.8.8.8 -n 2 -l 1472) Capturing on 'Ethernet 2' 1 0.000000 10.1.1.1 → 8.8.8.8 ICMP 1514 Echo (ping) request id=0x0001, seq=8/2048, ttl=128 2 0.015698 8.8.8.8 → 10.1.1.1 ICMP 106 Echo (ping) reply id=0x0001, seq=8/2048, ttl=45 2 packets captured When we ping with just one more byte, you can see that 2 packets are sent in place of 1 ((ping 8.8.8.8 -n 2 -l 1473) Capturing on 'Ethernet 2' 1 0.000000 10.1.1.1 → 8.8.8.8 IPv4 1514 Fragmented IP protocol (proto=ICMP 1, off=0, ID=4fab) 2 0.000016 10.1.1.1 → 8.8.8.8 ICMP 35 Echo (ping) request id=0x0001, seq=10/2560, ttl=128 2 packets captured So when we ping with 5000 bytes, 4 packets are sent. And ICMP protocol considers a datagram to be lost even when one of them fails. So the probability of the ICMP datagram loss is higher than the probability of single frame loss. But is this what is happening in the ping test result? We can calculate the probability of datagram loss using probability theory but let us defer to it later on and do a numerical simulation first using Monte Carlo simulation. Monte Carlo Simulation Monte carlo simulation is a rather fancy title for a simple simulation using random event generator, but it is quite handy and widely used. Usually Monte Carlo simulation is useful for simulating events that are truly random in nature. In a chaotic backbone network, that handles traffic stream of different kinds, we can assume the frame loss to happen approximately in a random fashion. Let us write a short program to simulate random packet loss. import random import numpy as np sampleCount = 100000 # total events in our simulation p = 0.03 # ethernet frame loss probability grpSize = 4 # packet count per datagram, 5000 bytes = 4 packets grpEventCount = int(sampleCount/grpSize) # datagram count # generate random packets with p% packet loss events = np.random.choice([0,1], size=sampleCount, p=[p,1-p]) # group discrete packets into a datagram grpEvents = events.reshape(grpEventCount,grpSize) # function to determine datagram loss def checkFailure(grpEvent): return (np.count_nonzero(grpEvent) &amp;lt; grpSize) # Return 1 if the success count is less than 3 # count the result failCount = 0 for grpEvent in grpEvents: failCount += checkFailure(grpEvent) print(&quot;The probability of a group failure is {:.2f}%&quot;.format(failCount/len(grpEvents)*100)) The probability of a group failure is 11.78% There you see! Even a 3% ethernet frame loss translates to 12% packet loss for jumbo ping test. This is same as what we observed. Now this is just a simulation with random input. But does the math agree? Using Probability Theory If p is the probability of a single frame loss, (1-p) is the probability of a successful transfer. And a datagram is successful only if all of its frames are successful. So an ICMP datagram which is 4 frame long, will have (1-p)**4 probability of succesful delivery. To calculate the failure rate, just take its inverse. 1- (1-p)**4 0.11470719000000007 As expected the simulation is slightly off from the calculated probability. But it will get closer to the real figure when we increase the simulation count. Conclusion The exactness of our calculation hinges on the assumption of random nature of packet loss. While it happened to be close to true in my case, it need not be all the time. The link may be loaded in a bursty manner and since our ping streams are evenly spaced over time, their chances of failure may not be truly random. Nevertheless, we should be wary of the difference between a datagram loss and ethernet loss while interpreting results. Consider the MTU of the network path while testing with different packet sizes. Jupyter notebook version of this post can be viewed here</summary></entry><entry><title type="html">Emulating Angry IP Scanner with nmap scripting engine - A lua scripting primer</title><link href="http://localhost:4000/scripting/2017/10/29/emulating-angryip-scanner-with-nmap-scripting-engine-a-lua-scripting-primer/" rel="alternate" type="text/html" title="Emulating Angry IP Scanner with nmap scripting engine - A lua scripting primer" /><published>2017-10-29T12:08:28+08:00</published><updated>2017-10-29T12:08:28+08:00</updated><id>http://localhost:4000/scripting/2017/10/29/emulating-angryip-scanner-with-nmap-scripting-engine-a-lua-scripting-primer</id><content type="html" xml:base="http://localhost:4000/scripting/2017/10/29/emulating-angryip-scanner-with-nmap-scripting-engine-a-lua-scripting-primer/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Often we have to discover the devices on a network. I use a very simple nmap command for performing a pingsweep.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo nmap -sn &amp;lt;subnet or ip range&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;On my Windows PC, I wrap it around in a batch script and place it in the search PATH. On Linux, it can be dropped in as an alias in bashrc.&lt;/p&gt;

&lt;p&gt;It is handy, but not complete. I would like to have some extra information such as hostnames (collected by various means not just DNS reverse lookup), platform info etc., Such details are available in tools such as AngryIP scanner, but I don’t prefer to launch a GUI tool for single task and keep it running until the task is done.&lt;/p&gt;

&lt;p&gt;So let us try to implement a similar function using nmap script. There are existing scripts in nmap which performs advanced discovery and reconnaissance, but we want something lightweight, more generic and customizable to support more protocols. Nmap scripts run on top of Nmap Scripting Engine which runs on Lua. Learning it would expand the scope of these tools from just being a capable tool to a powerful tool with limitless possibilities.&lt;/p&gt;

&lt;p&gt;Although this was my first attempt at Lua scripting, the endeavour turned out to be fairly simple. True it was not without its share of frustrations, most of which were related to wrapping my head around the way NSE (Nmap Scripting Engine) tosses the data around and lua data structures. But once you get the hang of it, it is really simple. So without much ado, let us get started.&lt;/p&gt;

&lt;h2 id=&quot;nse-script-structure&quot;&gt;NSE Script structure&lt;/h2&gt;
&lt;p&gt;A basic NSE script will have the following 3 sections:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The Head section is for meta information about the script. We need not worry about it for primer purpose but it is a good habit to put documentation info here while packaging the script for production. This section also feeds in to the NSE Documentation module (&lt;a href=&quot;https://nmap.org/book/nsedoc.html&quot;&gt;NSEDoc&lt;/a&gt;) which provides a consistent way to represent the meta information about our script.&lt;/li&gt;
  &lt;li&gt;The RULE section determines the scope of the script. It basically acts as a filter of nmap port-scan results that gets filtered to the Action section. The rule section should contain one of the following functions:
    &lt;ul&gt;
      &lt;li&gt;prerule()&lt;/li&gt;
      &lt;li&gt;hostrule(host)&lt;/li&gt;
      &lt;li&gt;portrule(host, port)&lt;/li&gt;
      &lt;li&gt;postrule()&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The Action section is mostly the brain of the script (although rule section can also contain some of the script logic). This section contains an Action section which reads data from the nmap scanning engine and carries out the script logic. The value returned by this function is also printed on the screen and captured by other nmap output methods. Note that this script is executed iteratively over either list of hosts or a list of (host, port) tuples. The ACTION section is indicated by the presence of a function named &lt;code class=&quot;highlighter-rouge&quot;&gt;action&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;diving-in&quot;&gt;Diving In&lt;/h2&gt;
&lt;p&gt;So let us go ahead and create a basic script. Our script will scan the target network and fetch the hostname from NETBIOS. Create a script file with .nse (I used host-discover.nse) extension as follows:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;netbios&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;netbios&quot;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shortport&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;shortport&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- The Rule Section --&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;portrule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shortport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;portnumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;137&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;udp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- The Action Section --&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nbt_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;netbios_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;netbios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_server_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;netbios_name&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Now run this script against your local network as below:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap --script host-discover.nse 10.1.1.0/24 -sU -p 137&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now take a minute or two to let this sink in… we just created our very own NETBIOS scanner, all in just 7 lines of functional code. There are dedicated standalone &lt;a href=&quot;http://unixwiz.net/tools/nbtscan.html&quot;&gt;tools&lt;/a&gt; that performs this singular task and we managed to do it using nmap. With just a little more effort, we can add more bells and whistles to this.&lt;/p&gt;

&lt;p&gt;The magic that enables this are the excellent inbuilt scanning mechanisms of nmap and hot-pluggable libraries that carry out much of the grunt. By scripting in NSE, we can tap in to this massive capabilities of nmap and automate to our needs. Let us now see how this script works.&lt;/p&gt;

&lt;h2 id=&quot;code-walkthrough&quot;&gt;Code Walkthrough&lt;/h2&gt;
&lt;p&gt;In this script there is no HEAD section. So we start by importing the libraries needed for our script. In Lua, modules are included using &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; function. And we assign the module to a local variable in order to access its namespace (i.e, call the methods that belong to the module).&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;netbios&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;netbios&quot;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shortport&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;shortport&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The purpose of these libraries will be evident in the later section.&lt;/p&gt;

&lt;h3 id=&quot;rule-section&quot;&gt;RULE section&lt;/h3&gt;
&lt;p&gt;Next we move to the RULE section. Notice that in Lua, comments are prepended by &lt;code class=&quot;highlighter-rouge&quot;&gt;--&lt;/code&gt; sequence.&lt;/p&gt;

&lt;p&gt;As mentioned earlier, RULE section acts as filter to identify hosts or ports relevant to our script. Since our script is only interested with NETBIOS query, we have to pick only the hosts that are listening on port UDP/137.&lt;/p&gt;

&lt;p&gt;Since this is a common check, nmap includes a ‘shortport’ module that provides shorthand functions to check port states. &lt;code class=&quot;highlighter-rouge&quot;&gt;shortport.portnumber&lt;/code&gt; is one such function which will return true only for those ports and protocols listed in its arguements. Refer to online &lt;a href=&quot;https://nmap.org/nsedoc/lib/shortport.html&quot;&gt;documentation&lt;/a&gt; for exact syntax of this function.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- The Rule Section --&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;portrule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shortport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;portnumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;137&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;udp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;NOTE: The Rule section only filters port numbers passed on from the upper layer i.e, the original nmap scan. It doesn’t trigger a port scan on its own. That is why when we launch the script, we had to specify port number explicitly (&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -sU -p U:137 &amp;lt;host&amp;gt;&lt;/code&gt;). It is still possible to launch a port scan in this section, by calling nmap socket libraries but those are advanced scripting scenarios.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;action-section&quot;&gt;ACTION Section&lt;/h3&gt;
&lt;p&gt;Next comes the ACTION section. Our action section here is a function that takes (host, port) as argument. It means the host object and port object are available to this function for evaluating logic. If we need other variables, they have to be declared outside this function.&lt;/p&gt;

&lt;p&gt;Since for NETBIOS query we only need the host our action function will take only ‘host’ as argument. We call the get_server_name function of &lt;a href=&quot;https://nmap.org/nsedoc/lib/netbios.html#get_server_name&quot;&gt;netbios&lt;/a&gt; module. From the documentation we can see that this function returns two values, query status and query result which we capture under two local variables. For our simple task, we need not check the result status and go ahead to return the name variable directly. In Lua, if a variable doesn’t exist it returns nil which is acceptable for our scenario.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- The Action Section --&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nbt_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;netbios_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;netbios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_server_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;netbios_name&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This returned value is processed by nmap scripting engine and printed in the output window.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;NOTE: In Lua functions are assigned to a variable like how we assign a string or integer value to a variable. In this case, code block defining the ACTION logic is assigned to a variable called action. 
Lua functions are of the format &lt;code class=&quot;highlighter-rouge&quot;&gt;foo = function ( args ) body end&lt;/code&gt;. It can be defined in a single line. To call the function, call the variable with argument such as &lt;code class=&quot;highlighter-rouge&quot;&gt;foo('bar')&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;where-to-go-next&quot;&gt;Where to go next&lt;/h2&gt;
&lt;p&gt;Since this is only a basic script, we have not customized the output format at all. The hostnames when available gets printed below each host-discovered. If you notice, the print action is executed within the ACTION function whose scope is limited to one host at a time. If we need our output to be consolidated in a tabular form, we can write a postrule function, store and retrieve our findings from nmap registry. Refer to my &lt;a href=&quot;https://raw.githubusercontent.com/thamizh85/Nmap-scripts/master/hostinfo-discover.nse&quot;&gt;script&lt;/a&gt; (work in progress) to see one way of doing it.&lt;/p&gt;

&lt;p&gt;I strongly recommend to try this &lt;a href=&quot;https://thesprawl.org/research/writing-nse-scripts-for-vulnerability-scanning/&quot;&gt;walkthrough&lt;/a&gt; as well. It greatly helped me to get started with NMAP scripting and understanding the way a NSE script is structured.&lt;/p&gt;

&lt;p&gt;It won’t hurt to improve your understanding of Lua programming language as well. I found this 15 minute &lt;a href=&quot;http://tylerneylon.com/a/learn-lua/&quot;&gt;primer&lt;/a&gt; to be very useful.&lt;/p&gt;

&lt;p&gt;Lastly the best resource for advanced nmap script writing is the existing script library. There are hundreds of scripts and libraries available, study and explore them to see different ways of tackling a challenge. Good luck scripting!&lt;/p&gt;</content><author><name>thamizh85</name></author><category term="lua" /><category term="nmap" /><category term="network-discovery" /><summary type="html">Introduction Often we have to discover the devices on a network. I use a very simple nmap command for performing a pingsweep. sudo nmap -sn &amp;lt;subnet or ip range&amp;gt; On my Windows PC, I wrap it around in a batch script and place it in the search PATH. On Linux, it can be dropped in as an alias in bashrc. It is handy, but not complete. I would like to have some extra information such as hostnames (collected by various means not just DNS reverse lookup), platform info etc., Such details are available in tools such as AngryIP scanner, but I don’t prefer to launch a GUI tool for single task and keep it running until the task is done. So let us try to implement a similar function using nmap script. There are existing scripts in nmap which performs advanced discovery and reconnaissance, but we want something lightweight, more generic and customizable to support more protocols. Nmap scripts run on top of Nmap Scripting Engine which runs on Lua. Learning it would expand the scope of these tools from just being a capable tool to a powerful tool with limitless possibilities. Although this was my first attempt at Lua scripting, the endeavour turned out to be fairly simple. True it was not without its share of frustrations, most of which were related to wrapping my head around the way NSE (Nmap Scripting Engine) tosses the data around and lua data structures. But once you get the hang of it, it is really simple. So without much ado, let us get started. NSE Script structure A basic NSE script will have the following 3 sections: The Head section is for meta information about the script. We need not worry about it for primer purpose but it is a good habit to put documentation info here while packaging the script for production. This section also feeds in to the NSE Documentation module (NSEDoc) which provides a consistent way to represent the meta information about our script. The RULE section determines the scope of the script. It basically acts as a filter of nmap port-scan results that gets filtered to the Action section. The rule section should contain one of the following functions: prerule() hostrule(host) portrule(host, port) postrule() The Action section is mostly the brain of the script (although rule section can also contain some of the script logic). This section contains an Action section which reads data from the nmap scanning engine and carries out the script logic. The value returned by this function is also printed on the screen and captured by other nmap output methods. Note that this script is executed iteratively over either list of hosts or a list of (host, port) tuples. The ACTION section is indicated by the presence of a function named action. Diving In So let us go ahead and create a basic script. Our script will scan the target network and fetch the hostname from NETBIOS. Create a script file with .nse (I used host-discover.nse) extension as follows: local netbios = require &quot;netbios&quot; local shortport = require &quot;shortport&quot; -- The Rule Section -- portrule = shortport.portnumber({137}, &quot;udp&quot;) -- The Action Section -- action = function(host,port) local nbt_status, netbios_name = netbios.get_server_name(host) return netbios_name end Now run this script against your local network as below: nmap --script host-discover.nse 10.1.1.0/24 -sU -p 137 Now take a minute or two to let this sink in… we just created our very own NETBIOS scanner, all in just 7 lines of functional code. There are dedicated standalone tools that performs this singular task and we managed to do it using nmap. With just a little more effort, we can add more bells and whistles to this. The magic that enables this are the excellent inbuilt scanning mechanisms of nmap and hot-pluggable libraries that carry out much of the grunt. By scripting in NSE, we can tap in to this massive capabilities of nmap and automate to our needs. Let us now see how this script works. Code Walkthrough In this script there is no HEAD section. So we start by importing the libraries needed for our script. In Lua, modules are included using require function. And we assign the module to a local variable in order to access its namespace (i.e, call the methods that belong to the module). local netbios = require &quot;netbios&quot; local shortport = require &quot;shortport&quot; The purpose of these libraries will be evident in the later section. RULE section Next we move to the RULE section. Notice that in Lua, comments are prepended by -- sequence. As mentioned earlier, RULE section acts as filter to identify hosts or ports relevant to our script. Since our script is only interested with NETBIOS query, we have to pick only the hosts that are listening on port UDP/137. Since this is a common check, nmap includes a ‘shortport’ module that provides shorthand functions to check port states. shortport.portnumber is one such function which will return true only for those ports and protocols listed in its arguements. Refer to online documentation for exact syntax of this function. -- The Rule Section -- portrule = shortport.portnumber({137}, &quot;udp&quot;) NOTE: The Rule section only filters port numbers passed on from the upper layer i.e, the original nmap scan. It doesn’t trigger a port scan on its own. That is why when we launch the script, we had to specify port number explicitly (nmap -sU -p U:137 &amp;lt;host&amp;gt;). It is still possible to launch a port scan in this section, by calling nmap socket libraries but those are advanced scripting scenarios. ACTION Section Next comes the ACTION section. Our action section here is a function that takes (host, port) as argument. It means the host object and port object are available to this function for evaluating logic. If we need other variables, they have to be declared outside this function. Since for NETBIOS query we only need the host our action function will take only ‘host’ as argument. We call the get_server_name function of netbios module. From the documentation we can see that this function returns two values, query status and query result which we capture under two local variables. For our simple task, we need not check the result status and go ahead to return the name variable directly. In Lua, if a variable doesn’t exist it returns nil which is acceptable for our scenario. -- The Action Section -- action = function(host,port) local nbt_status, netbios_name = netbios.get_server_name(host) return netbios_name end This returned value is processed by nmap scripting engine and printed in the output window. NOTE: In Lua functions are assigned to a variable like how we assign a string or integer value to a variable. In this case, code block defining the ACTION logic is assigned to a variable called action. Lua functions are of the format foo = function ( args ) body end. It can be defined in a single line. To call the function, call the variable with argument such as foo('bar') Where to go next Since this is only a basic script, we have not customized the output format at all. The hostnames when available gets printed below each host-discovered. If you notice, the print action is executed within the ACTION function whose scope is limited to one host at a time. If we need our output to be consolidated in a tabular form, we can write a postrule function, store and retrieve our findings from nmap registry. Refer to my script (work in progress) to see one way of doing it. I strongly recommend to try this walkthrough as well. It greatly helped me to get started with NMAP scripting and understanding the way a NSE script is structured. It won’t hurt to improve your understanding of Lua programming language as well. I found this 15 minute primer to be very useful. Lastly the best resource for advanced nmap script writing is the existing script library. There are hundreds of scripts and libraries available, study and explore them to see different ways of tackling a challenge. Good luck scripting!</summary></entry><entry><title type="html">Using a bluetooth serial console with linux</title><link href="http://localhost:4000/notes/2017/08/24/using-a-bluetooth-serial-console-with-linux/" rel="alternate" type="text/html" title="Using a bluetooth serial console with linux" /><published>2017-08-24T23:41:28+08:00</published><updated>2017-08-24T23:41:28+08:00</updated><id>http://localhost:4000/notes/2017/08/24/using-a-bluetooth-serial-console-with-linux</id><content type="html" xml:base="http://localhost:4000/notes/2017/08/24/using-a-bluetooth-serial-console-with-linux/">&lt;p&gt;Recently I bought a &lt;a href=&quot;https://www.aliexpress.com/store/product/FREE-SHIPPING-Bt578-rs232-wireless-male-female-general-serial-port-bluetooth-adapter-bluetooth-module/719457_1271204185.html&quot;&gt;bluetooth RS232 serial convertor&lt;/a&gt;. I wasn’t sure whether it would work with my Linux laptop. But it turned out to be quite simple to setup.&lt;/p&gt;

&lt;h2 id=&quot;pre-requisites&quot;&gt;Pre-requisites&lt;/h2&gt;

&lt;p&gt;The following packages are required:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;bluez&lt;/li&gt;
  &lt;li&gt;bluez-utils&lt;/li&gt;
  &lt;li&gt;byobu (optional)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bluez provides the bluetooth protocol stack (most likely shipped with the OS), bluez-utils provides the bluetoothctl utility and byobu is a wrapper around screen terminal emulator. You can also use ‘screen’ directly. Install these using your distributions recommended procedure.&lt;/p&gt;

&lt;h2 id=&quot;steps&quot;&gt;Steps&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Start daemon:
    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Swanky:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;systemctl start bluetooth
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Discover using bluetoothctl:
    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Swanky:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bluetoothctl
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;NEW] Controller &amp;lt;controller-mac-address&amp;gt; xkgt-Swanky &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;default]
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;bluetooth]# power on
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;bluetooth]# scan on
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Once you can see your device, turn off the scan and pair
    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;bluetooth]# scan off
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;bluetooth]# pair &amp;lt;device-mac-address&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Exit blutoothctl and create serial device (Note that root privileges are required):
    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;bluetooth]# &lt;span class=&quot;nb&quot;&gt;exit
 &lt;/span&gt;Swanky:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo rfcomm &lt;span class=&quot;nb&quot;&gt;bind &lt;/span&gt;0 &amp;lt;device-mac-address&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;You should now have /dev/rfcomm0. Connect to it using byobu-screen utility:
    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Swanky:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;byobu-screen /dev/rfcomm0
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Enjoy your wireless console connection!&lt;/p&gt;</content><author><name>thamizh85</name></author><category term="bluetooth" /><category term="Linux" /><summary type="html">Recently I bought a bluetooth RS232 serial convertor. I wasn’t sure whether it would work with my Linux laptop. But it turned out to be quite simple to setup. Pre-requisites The following packages are required: bluez bluez-utils byobu (optional) Bluez provides the bluetooth protocol stack (most likely shipped with the OS), bluez-utils provides the bluetoothctl utility and byobu is a wrapper around screen terminal emulator. You can also use ‘screen’ directly. Install these using your distributions recommended procedure. Steps Start daemon: Swanky:~$ systemctl start bluetooth Discover using bluetoothctl: Swanky:~$ bluetoothctl [NEW] Controller &amp;lt;controller-mac-address&amp;gt; xkgt-Swanky [default] [bluetooth]# power on [bluetooth]# scan on Once you can see your device, turn off the scan and pair [bluetooth]# scan off [bluetooth]# pair &amp;lt;device-mac-address&amp;gt; Exit blutoothctl and create serial device (Note that root privileges are required): [bluetooth]# exit Swanky:~$ sudo rfcomm bind 0 &amp;lt;device-mac-address&amp;gt; You should now have /dev/rfcomm0. Connect to it using byobu-screen utility: Swanky:~$ byobu-screen /dev/rfcomm0 Enjoy your wireless console connection!</summary></entry><entry><title type="html">Self-signed certificate chain using OpenSSL X509 module</title><link href="http://localhost:4000/notes/sysadmin/2017/08/20/self-signed-certificate-chain-using-openssl-x509-module/" rel="alternate" type="text/html" title="Self-signed certificate chain using OpenSSL X509 module" /><published>2017-08-20T17:55:20+08:00</published><updated>2017-08-20T17:55:20+08:00</updated><id>http://localhost:4000/notes/sysadmin/2017/08/20/self-signed-certificate-chain-using-openssl-x509-module</id><content type="html" xml:base="http://localhost:4000/notes/sysadmin/2017/08/20/self-signed-certificate-chain-using-openssl-x509-module/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Generating a self-signed CA certificate or signing a web server certificate using openssl is very easy. There are tons of resources out there in the web. But creating a certificate, which works without any warning on most modern browsers is a challenge. This challenge is compounded by ever-growing stringent requirements from the popular browsers (See footnote 1).&lt;/p&gt;

&lt;p&gt;There are two ways to use openssl to mimic a CA. The first option is to use ‘openssl ca’ module, for which there are many guides in the internet. This module mimics a full-fledged CA and useful when you are setting up something for long term requiring features such as CRL and OCSP.&lt;/p&gt;

&lt;p&gt;The other option is to use ‘openssl x509’ module which is what we will be focusing on. I chose this because I just needed a certificate pair for one-off use and didn’t want to be bothered in setting up an elaborate CA configuration. The guide will be useful for someone with a similar objective.&lt;/p&gt;

&lt;p&gt;As always, let us start with the requirement:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Create a certificate chain with as little configuration and minimum number of hosts, which means no intermediate CA.&lt;/li&gt;
  &lt;li&gt;The CA cert would be imported manually in to Trusted Root Authorities on the client machines.&lt;/li&gt;
  &lt;li&gt;The certificate should work on modern browsers. We will use latest versions of Chrome and Mozilla as benchmarks.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;steps&quot;&gt;Steps:&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Generate private key &amp;amp; self-signed cert for the CA in a single statement:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;```bash 
root@EARWA:openssl req -new -x509 -sha256 -newkey rsa:2048 -nodes -keyout ca.key -days 1000 -out ca.pem
root@EARWA:~/ca2# ls -ltr
total 8
-rw-r--r-- 1 root root 1704 Jul 30 20:01 ca.key
-rw-r--r-- 1 root root 1261 Jul 30 20:01 ca.pem
```
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: Always use SHA256 as highlighted above. SHA-1 has been deprecated since Jan 2017 (See footnote 2)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;Preparing a config file for CSR: We need to generate a CSR (Certificate Signing Request). This process involves generating a private key and a PEM encoded CSR file. The contents of our Web cert are determined by the information we provide in the CSR.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Modern browsers expect a field called sAN(subjectAltName) (See footnote 3). This field should hold all possible URI’s from which our webserver may get accessed.&lt;/p&gt;

&lt;p&gt;Since OpenSSL’s default interactive process of CSR generation doesn’t support this field, we need to specify it in a config file and generate the CSR. based on this file Create a config file for Web server request. The highlighted sections are the reason we are using a config file. Otherwise rest of the attributes can be passed interactively.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  root@EARWA:~/ca2# more web.earwa.com.conf
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; subject &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  countryName             &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Country Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2 letter code&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  countryName_default     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; HK
  
  organizationName            &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Organization Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;eg, company&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  organizationName_default    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Scarlet Spires
  
  basicConstraints    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; CA:FALSE
  keyUsage            &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; digitalSignature, keyEncipherment
  subjectAltName      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; @alternate_names
  nsComment           &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;OpenSSL Generated Certificate&quot;&lt;/span&gt;
  
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; alternate_names &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  DNS.1       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; web.earwa.com
  DNS.2       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; www.web.earwa.com
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Submit a request based on the config file&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  openssl req -config web.earwa.com.conf -new -sha256 -newkey rsa:2048 -nodes -keyout web.earwa.com.key -days 1000 -out web.earwa.com.csr
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Check the generated request file before signing. You can see our extension fields in the Attributes section&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  root@EARWA:~/ca2# openssl req -in web.earwa.com.csr -text -noout
  

          Attributes:
          Requested Extensions:
              X509v3 Subject Key Identifier:
                  30:47:85:A6:4E:9C:E0:D4:F7:CC:9F:FF:FF:38:03:FC:E7:0E:87:00
              X509v3 Basic Constraints:
                  CA:FALSE
              X509v3 Key Usage:
                  Digital Signature, Key Encipherment
              X509v3 Subject Alternative Name:
                  DNS:web.earwa.com, DNS:www.web.earwa.com
              Netscape Comment:
                  OpenSSL Generated Certificate
  
      Signature Algorithm: sha256WithRSAEncryption
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;This is the portion that tripped me up for a while. Note that earlier I said that the info provided in CSR will be used for certificate generation. It is only partially true, the x509 module cannot copy the extensions info directly from CSR. We need to manually add extensions by using the options -extensions and -extfile. So let us create the V3 extension file first.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  root@EARWA:~/ca2# more v3.ext
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; v3_req &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;authorityKeyIdentifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;keyid,issuer
  &lt;span class=&quot;nv&quot;&gt;basicConstraints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;CA:FALSE
  keyUsage &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
  subjectAltName      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; @alternate_names
  
  
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; alternate_names &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  DNS.1       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; web.earwa.com
  DNS.2       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; www.web.earwa.com
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Sign the cert. The highlighted portions refers back to the extension file and the section mentioned above.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  openssl x509 -extensions v3_req -extfile v3.ext -req -sha256 -days 1000 -in web.earwa.com.csr -CA ca.pem -CAcreateserial -CAkey ca.key -out web.earwa.com.pem
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Verify the cert&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  root@EARWA:~/ca2# openssl x509 -in web.earwa.com.pem -text -noout
  
  Certificate:
      Data:
          Version: 3 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0x2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          Serial Number: 14178612693219512833 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0xc4c48d1f7b319201&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      Signature Algorithm: sha256WithRSAEncryption
          Issuer: &lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;HK, &lt;span class=&quot;nv&quot;&gt;ST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Some-State, &lt;span class=&quot;nv&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Scarlet Spires
          Validity
              Not Before: Jul 31 16:36:03 2017 GMT
              Not After : Apr 26 16:36:03 2020 GMT
          Subject: &lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;HK, &lt;span class=&quot;nv&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Scarlet Spires
          Subject Public Key Info:
              Public Key Algorithm: rsaEncryption
                  Public-Key: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2048 bit&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                 Modulus:
                      00:c6:f9:32:79:11:20:ff:97:da:38:a0:61:b9:41:
                      1f:51:c0:1f:a1:48:05:74:54:81:23:9b:22:24:8d:
                      35:f2:25:83:15:f2:9b:30:a5:43:2d:4d:08:2f:c7:
                      9e:42:1d:f7:66:68:07:8f:da:0b:f9:5c:51:97:b1:
                      0e:dc:44:d1:a4:5c:a1:ef:35:43:84:52:99:34:9f:
                      7d:41:54:9f:65:21:4c:1c:21:6f:9c:73:d5:f2:3d:
                      3c:6d:da:fe:85:88:98:4d:02:42:52:ea:9c:61:fe:
                      e7:bc:c2:d6:44:9d:9f:f6:3d:cb:32:c6:e4:8d:d1:
                      74:47:80:87:ac:8d:8a:64:8a:4e:54:ce:54:4e:75:
                      3a:85:af:f5:96:9b:5f:a0:a0:6d:27:06:1c:8d:0b:
                      4b:c5:1e:15:ff:16:4a:87:1e:9b:cc:98:a9:c5:8f:
                      4f:f1:19:28:cd:90:6c:85:ab:58:37:14:d6:58:cb:
                      7d:ab:8b:34:62:2a:72:b4:17:96:0b:6f:84:31:54:
                      55:aa:06:56:00:04:5e:2d:d1:14:fa:7f:2d:b3:44:
                      d3:1d:95:c2:93:ec:4e:17:e8:30:fa:e7:f5:be:b1:
                      5f:9a:59:59:ac:0d:b7:04:4a:19:35:a2:a5:44:64:
                      d4:a0:93:f8:dc:9f:3a:20:7b:5c:d7:26:67:28:67:
                      87:73
                  Exponent: 65537 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0x10001&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          X509v3 extensions:
              X509v3 Authority Key Identifier:
                  keyid:32:33:41:52:11:5A:AE:F9:89:4E:8E:EE:26:E3:D2:7D:CA:C9:BC:63
  
               X509v3 Basic Constraints:
                  CA:FALSE
              X509v3 Key Usage:
                 Digital Signature, Non Repudiation, Key Encipherment, Data Encipherment
              X509v3 Subject Alternative Name:
                  DNS:web.earwa.com, DNS:www.web.earwa.com
      Signature Algorithm: sha256WithRSAEncryption
           59:d5:45:b3:ca:60:32:a8:37:85:3b:bf:6f:d1:b3:26:f6:4b:
           f2:26:2c:68:6f:cb:5c:3b:a8:6f:a9:32:53:71:98:74:26:be:
           4f:3e:a9:13:e6:ba:e4:3e:52:83:86:0d:9d:53:4a:1e:e8:a5:
            94:36:bf:c2:17:62:b9:8e:87:8d:32:f1:34:1a:e3:81:6b:0b:
           5a:b7:a8:55:c4:24:ca:b2:65:75:e2:4b:ac:c4:9b:9e:d1:94:
           45:31:92:1d:6b:30:6c:29:03:fd:1e:49:8e:8e:d5:30:6f:68:
           &lt;span class=&quot;nb&quot;&gt;fc&lt;/span&gt;:01:82:f8:57:83:85:47:15:e9:78:96:39:86:94:cb:96:29:
           5b:61:f0:d9:23:d1:25:ca:a0:ea:80:ce:42:bb:12:40:b9:64:
           c6:a5:4f:99:dc:f3:26:74:49:bc:b2:70:49:d2:22:f2:75:07:
           6e:8f:96:9b:e6:67:ad:21:01:23:57:46:ea:78:12:3b:c8:ba:
           dc:ae:39:ee:d6:30:6d:58:ab:f0:fe:c1:68:fb:0a:68:09:fc:
           93:28:84:27:2d:1d:c0:c2:06:53:1b:3b:ff:ec:d8:a1:90:1c:
           c4:59:c0:c3:d5:f4:bb:d4:79:35:dd:7f:05:60:3f:a9:ba:b0:
            5c:b3:66:13:03:4f:ac:31:0c:8a:e9:82:8d:36:c1:78:bf:d6:
           5e:6d:f9:13
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That is it! Now you have a web server cert which would be trusted by most browsers, provided you import the root CA public cert in to the browsers’ trust chain.&lt;/p&gt;

&lt;h4 id=&quot;footnote-1&quot;&gt;Footnote #1&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://cabforum.org/baseline-requirements-documents/&quot;&gt;https://cabforum.org/baseline-requirements-documents/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;footnote-2&quot;&gt;Footnote #2&lt;/h4&gt;

&lt;p&gt;SHA-1 disabled on Chrome 56 and FireFox (Jan 2017)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.chromestatus.com/features/6601657605423104&quot;&gt;https://www.chromestatus.com/features/6601657605423104&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://sites.google.com/a/chromium.org/dev/Home/chromium-security/education/tls/sha-1&quot;&gt;https://sites.google.com/a/chromium.org/dev/Home/chromium-security/education/tls/sha-1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.mozilla.org/security/2017/02/23/the-end-of-sha-1-on-the-public-web/&quot;&gt;https://blog.mozilla.org/security/2017/02/23/the-end-of-sha-1-on-the-public-web/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;footnote-3&quot;&gt;Footnote #3&lt;/h4&gt;

&lt;p&gt;SAN mandatory&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.chromestatus.com/features/4981025180483584&quot;&gt;https://www.chromestatus.com/features/4981025180483584&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1245280&quot;&gt;https://bugzilla.mozilla.org/show_bug.cgi?id=1245280&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc2818&quot;&gt;https://tools.ietf.org/html/rfc2818&lt;/a&gt;&lt;/p&gt;</content><author><name>thamizh85</name></author><category term="openssl" /><category term="pki" /><category term="web" /><summary type="html">Introduction Generating a self-signed CA certificate or signing a web server certificate using openssl is very easy. There are tons of resources out there in the web. But creating a certificate, which works without any warning on most modern browsers is a challenge. This challenge is compounded by ever-growing stringent requirements from the popular browsers (See footnote 1). There are two ways to use openssl to mimic a CA. The first option is to use ‘openssl ca’ module, for which there are many guides in the internet. This module mimics a full-fledged CA and useful when you are setting up something for long term requiring features such as CRL and OCSP. The other option is to use ‘openssl x509’ module which is what we will be focusing on. I chose this because I just needed a certificate pair for one-off use and didn’t want to be bothered in setting up an elaborate CA configuration. The guide will be useful for someone with a similar objective. As always, let us start with the requirement: Create a certificate chain with as little configuration and minimum number of hosts, which means no intermediate CA. The CA cert would be imported manually in to Trusted Root Authorities on the client machines. The certificate should work on modern browsers. We will use latest versions of Chrome and Mozilla as benchmarks. Steps: Generate private key &amp;amp; self-signed cert for the CA in a single statement: ```bash root@EARWA:openssl req -new -x509 -sha256 -newkey rsa:2048 -nodes -keyout ca.key -days 1000 -out ca.pem root@EARWA:~/ca2# ls -ltr total 8 -rw-r--r-- 1 root root 1704 Jul 30 20:01 ca.key -rw-r--r-- 1 root root 1261 Jul 30 20:01 ca.pem ``` Note: Always use SHA256 as highlighted above. SHA-1 has been deprecated since Jan 2017 (See footnote 2) Preparing a config file for CSR: We need to generate a CSR (Certificate Signing Request). This process involves generating a private key and a PEM encoded CSR file. The contents of our Web cert are determined by the information we provide in the CSR. Modern browsers expect a field called sAN(subjectAltName) (See footnote 3). This field should hold all possible URI’s from which our webserver may get accessed. Since OpenSSL’s default interactive process of CSR generation doesn’t support this field, we need to specify it in a config file and generate the CSR. based on this file Create a config file for Web server request. The highlighted sections are the reason we are using a config file. Otherwise rest of the attributes can be passed interactively. root@EARWA:~/ca2# more web.earwa.com.conf [ subject ] countryName             = Country Name (2 letter code) countryName_default     = HK organizationName            = Organization Name (eg, company) organizationName_default    = Scarlet Spires basicConstraints    = CA:FALSE keyUsage            = digitalSignature, keyEncipherment subjectAltName      = @alternate_names nsComment           = &quot;OpenSSL Generated Certificate&quot; [ alternate_names ] DNS.1       = web.earwa.com DNS.2       = www.web.earwa.com Submit a request based on the config file openssl req -config web.earwa.com.conf -new -sha256 -newkey rsa:2048 -nodes -keyout web.earwa.com.key -days 1000 -out web.earwa.com.csr Check the generated request file before signing. You can see our extension fields in the Attributes section root@EARWA:~/ca2# openssl req -in web.earwa.com.csr -text -noout         Attributes:         Requested Extensions:             X509v3 Subject Key Identifier:                 30:47:85:A6:4E:9C:E0:D4:F7:CC:9F:FF:FF:38:03:FC:E7:0E:87:00             X509v3 Basic Constraints:                 CA:FALSE             X509v3 Key Usage:                 Digital Signature, Key Encipherment             X509v3 Subject Alternative Name:                 DNS:web.earwa.com, DNS:www.web.earwa.com             Netscape Comment:                 OpenSSL Generated Certificate     Signature Algorithm: sha256WithRSAEncryption This is the portion that tripped me up for a while. Note that earlier I said that the info provided in CSR will be used for certificate generation. It is only partially true, the x509 module cannot copy the extensions info directly from CSR. We need to manually add extensions by using the options -extensions and -extfile. So let us create the V3 extension file first. root@EARWA:~/ca2# more v3.ext [ v3_req ] authorityKeyIdentifier=keyid,issuer basicConstraints=CA:FALSE keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment subjectAltName      = @alternate_names [ alternate_names ] DNS.1       = web.earwa.com DNS.2       = www.web.earwa.com Sign the cert. The highlighted portions refers back to the extension file and the section mentioned above. openssl x509 -extensions v3_req -extfile v3.ext -req -sha256 -days 1000 -in web.earwa.com.csr -CA ca.pem -CAcreateserial -CAkey ca.key -out web.earwa.com.pem Verify the cert root@EARWA:~/ca2# openssl x509 -in web.earwa.com.pem -text -noout Certificate:     Data:         Version: 3 (0x2)         Serial Number: 14178612693219512833 (0xc4c48d1f7b319201)     Signature Algorithm: sha256WithRSAEncryption         Issuer: C=HK, ST=Some-State, O=Scarlet Spires         Validity             Not Before: Jul 31 16:36:03 2017 GMT             Not After : Apr 26 16:36:03 2020 GMT         Subject: C=HK, O=Scarlet Spires         Subject Public Key Info:             Public Key Algorithm: rsaEncryption                 Public-Key: (2048 bit)                Modulus:                     00:c6:f9:32:79:11:20:ff:97:da:38:a0:61:b9:41:                     1f:51:c0:1f:a1:48:05:74:54:81:23:9b:22:24:8d:                    35:f2:25:83:15:f2:9b:30:a5:43:2d:4d:08:2f:c7:                     9e:42:1d:f7:66:68:07:8f:da:0b:f9:5c:51:97:b1:                     0e:dc:44:d1:a4:5c:a1:ef:35:43:84:52:99:34:9f:                     7d:41:54:9f:65:21:4c:1c:21:6f:9c:73:d5:f2:3d:                     3c:6d:da:fe:85:88:98:4d:02:42:52:ea:9c:61:fe:                     e7:bc:c2:d6:44:9d:9f:f6:3d:cb:32:c6:e4:8d:d1:                     74:47:80:87:ac:8d:8a:64:8a:4e:54:ce:54:4e:75:                     3a:85:af:f5:96:9b:5f:a0:a0:6d:27:06:1c:8d:0b:                     4b:c5:1e:15:ff:16:4a:87:1e:9b:cc:98:a9:c5:8f:                     4f:f1:19:28:cd:90:6c:85:ab:58:37:14:d6:58:cb:                     7d:ab:8b:34:62:2a:72:b4:17:96:0b:6f:84:31:54:                     55:aa:06:56:00:04:5e:2d:d1:14:fa:7f:2d:b3:44:                     d3:1d:95:c2:93:ec:4e:17:e8:30:fa:e7:f5:be:b1:                     5f:9a:59:59:ac:0d:b7:04:4a:19:35:a2:a5:44:64:                     d4:a0:93:f8:dc:9f:3a:20:7b:5c:d7:26:67:28:67:                     87:73                 Exponent: 65537 (0x10001)         X509v3 extensions:             X509v3 Authority Key Identifier:                 keyid:32:33:41:52:11:5A:AE:F9:89:4E:8E:EE:26:E3:D2:7D:CA:C9:BC:63            X509v3 Basic Constraints:                 CA:FALSE             X509v3 Key Usage:                Digital Signature, Non Repudiation, Key Encipherment, Data Encipherment             X509v3 Subject Alternative Name:                 DNS:web.earwa.com, DNS:www.web.earwa.com     Signature Algorithm: sha256WithRSAEncryption          59:d5:45:b3:ca:60:32:a8:37:85:3b:bf:6f:d1:b3:26:f6:4b:          f2:26:2c:68:6f:cb:5c:3b:a8:6f:a9:32:53:71:98:74:26:be:          4f:3e:a9:13:e6:ba:e4:3e:52:83:86:0d:9d:53:4a:1e:e8:a5:         94:36:bf:c2:17:62:b9:8e:87:8d:32:f1:34:1a:e3:81:6b:0b:          5a:b7:a8:55:c4:24:ca:b2:65:75:e2:4b:ac:c4:9b:9e:d1:94:          45:31:92:1d:6b:30:6c:29:03:fd:1e:49:8e:8e:d5:30:6f:68:          fc:01:82:f8:57:83:85:47:15:e9:78:96:39:86:94:cb:96:29:          5b:61:f0:d9:23:d1:25:ca:a0:ea:80:ce:42:bb:12:40:b9:64:          c6:a5:4f:99:dc:f3:26:74:49:bc:b2:70:49:d2:22:f2:75:07:          6e:8f:96:9b:e6:67:ad:21:01:23:57:46:ea:78:12:3b:c8:ba:          dc:ae:39:ee:d6:30:6d:58:ab:f0:fe:c1:68:fb:0a:68:09:fc:          93:28:84:27:2d:1d:c0:c2:06:53:1b:3b:ff:ec:d8:a1:90:1c:          c4:59:c0:c3:d5:f4:bb:d4:79:35:dd:7f:05:60:3f:a9:ba:b0:         5c:b3:66:13:03:4f:ac:31:0c:8a:e9:82:8d:36:c1:78:bf:d6:          5e:6d:f9:13 That is it! Now you have a web server cert which would be trusted by most browsers, provided you import the root CA public cert in to the browsers’ trust chain. Footnote #1 https://cabforum.org/baseline-requirements-documents/ Footnote #2 SHA-1 disabled on Chrome 56 and FireFox (Jan 2017) https://www.chromestatus.com/features/6601657605423104 https://sites.google.com/a/chromium.org/dev/Home/chromium-security/education/tls/sha-1 https://blog.mozilla.org/security/2017/02/23/the-end-of-sha-1-on-the-public-web/ Footnote #3 SAN mandatory https://www.chromestatus.com/features/4981025180483584 https://bugzilla.mozilla.org/show_bug.cgi?id=1245280 https://tools.ietf.org/html/rfc2818</summary></entry><entry><title type="html">Dynamic registration of DNS for Linux devices in an Active Directory environment with Windows DNS server</title><link href="http://localhost:4000/sysadmin/2017/07/19/dynamic-registration-of-dns-for-linux-devices-in-an-active-directory-environment-with-windows-dns-server/" rel="alternate" type="text/html" title="Dynamic registration of DNS for Linux devices in an Active Directory environment with Windows DNS server" /><published>2017-07-19T23:43:13+08:00</published><updated>2017-07-19T23:43:13+08:00</updated><id>http://localhost:4000/sysadmin/2017/07/19/dynamic-registration-of-dns-for-linux-devices-in-an-active-directory-environment-with-windows-dns-server</id><content type="html" xml:base="http://localhost:4000/sysadmin/2017/07/19/dynamic-registration-of-dns-for-linux-devices-in-an-active-directory-environment-with-windows-dns-server/">&lt;p&gt;While Linux has proliferated extensively in the server arena in the recent past, client networks are still dominated by Windows devices. This means, things that we take for granted in a client environment such as DDNS are not as matured as they are in Windows environment. One may ask whether the recent surge in Linux based clients such as IoT devices has changed this equation. But the nature of these devices is different from Windows based clients that they mostly rely on outbound connection to internet. Since they seldom require other hosts to initiate connection to them, their operation doesn’t rely much on Dynamic DNS.&lt;/p&gt;

&lt;p&gt;So, what does it take to make a Linux client register dynamically in a Windows environment? At its basic, the entire process relies on Dynamic DNS as explained in &lt;a href=&quot;https://tools.ietf.org/html/rfc2136&quot;&gt;RFC2136&lt;/a&gt;. In a traditional windows environment with AD, this process is taken care by client OS. Every time a Windows PC gets an IP address from DHCP server, it would send a DNS Update (Opcode = 5) request to its registered DNS server. Performed manually, this is same as typing “ipconfig /registerdns” at an elevated command prompt. This behaviour can be modified by accessing DNS section of Advanced TCP/IP settings of a network adapter.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/1-dns-properties.png&quot; alt=&quot;1 - DNS Properties.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When we ask a Linux client to do the same (later I will explain how it can be configured to ask), it won’t work unless the DNS server is configured to accept “Insecure updates” (Which is a major security risk if you need to ask).&lt;/p&gt;

&lt;p&gt;Take a look at the capture of Linux client performing DNS update, you can see that the server comes back with a UPDATE REFUSED response.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/2-linux-dns-update-capture.png&quot; alt=&quot;2 - Linux DNS Update Capture.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is because our DNS server is enabled with secure updates which means only authenticated clients can send update.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/3-dns-secure-updates-option.png&quot; alt=&quot;3 - DNS Secure Updates option.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The client is expected to send a transaction signature along with the update request. There are different types of signatures such as a TSIG resource or the SIG(0) or GSS-TSIG signatures. In Windows world however, only GSS-TSIG signatures as described in &lt;a href=&quot;https://tools.ietf.org/html/rfc3645&quot;&gt;RFC3645&lt;/a&gt; are understood and accepted.&lt;/p&gt;

&lt;p&gt;Looking at a capture from a Windows PC joined to domain, one can see the Windows Device sending Update request with GSS-TSIG resource.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/2-windows-dns-update-capture.png&quot; alt=&quot;2 - Windows DNS Update Capture.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Given this background, let us explore some of the options available to setup DDNS for Linux based clients. In this series of posts, I will explore 3 options:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Configure DHCP server to perform DNS registration on behalf of the clients&lt;/li&gt;
  &lt;li&gt;Join the Linux devices to AD domain and configure them to dynamically update&lt;/li&gt;
  &lt;li&gt;Setup a new sub-domain running a dedicated Linux BIND server and configure DNS forwarding on Microsoft DNS server.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Our environment has the following setup:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Microsoft Active Directory environment with DNS server installed in Domain controller and a DHCP server running separately on a different host. All are running on Windows Server 2008 R2.&lt;/li&gt;
  &lt;li&gt;DNS is configured to accept only Secure updates.&lt;/li&gt;
  &lt;li&gt;Two Linux devices running Debian Stretch operating system. One of them will act as DNS server in one of the scenarios.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/4-lab-topology.png&quot; alt=&quot;4 - Lab Topology.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The solutions we discuss should meet the following objectives:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Update DNS when the device gets an IP address&lt;/li&gt;
  &lt;li&gt;Perform periodic update to DNS server to protect against expiry&lt;/li&gt;
  &lt;li&gt;Fully automated with very little or no hand-coding on client devices, assume no automation tools like Puppet or Chef&lt;/li&gt;
  &lt;li&gt;Scalable to hundreds or thousands of devices&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Point 3 is important to me since I had to work out a solution at work where we are using hundreds of Raspberry Pi’s, all booting the same image cloned on to flash disks. So, editing config files on each of them is not an option (we will come to this later).&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;configuring-dhcp-server-to-perform-dns-registration-on-behalf-of-the-clients&quot;&gt;Configuring DHCP server to perform DNS registration on behalf of the clients&lt;/h2&gt;

&lt;p&gt;This is the simplest and most reliable solution of the available options. This method makes use of DHCP option 81 as defined in &lt;a href=&quot;https://tools.ietf.org/html/rfc4702&quot;&gt;RFC4702&lt;/a&gt;, which is used to convey a client’s FQDN to a DHCP server as part of DHCP process.&lt;/p&gt;

&lt;blockquote&gt;An aside: RFC doesn’t mandate whether a DHCP server should register client’s DNS or not. It is left to site-specific policies, which may differ per the security context of the site.&lt;/blockquote&gt;

&lt;p&gt;The default setting in a Microsoft DHCP server scope is as follows (Right click on scope name -&amp;gt; Properties to reach here):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/5-default-scope-properties.png&quot; alt=&quot;5 - Default scope properties.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Understandably, this only updates to DNS server if requested by the client. What happens if we select the option to “Always dynamically update DNS A and PTR records”? Is that what we want?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/6-always-dynamically-update1.png&quot; alt=&quot;6 - Always dynamically update.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you trigger a DHCP request from the client, you will notice that this doesn’t work.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/7-no-dns-update.png&quot; alt=&quot;7 - No DNS Update.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This setting merely controls whether a DHCP server should update ‘A’ record or not.  The label “Always dynamically update DNS A and PTR records” is misleading since it applies only for the clients that request a DNS update. By default, a client is responsible for updating the A record and DHCP server is responsible for updating the PTR record. Selecting the second option forces DHCP server to update A record as well. But the prerequisite is that the client should request for DNS update.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/8-dns-update-options.png&quot; alt=&quot;8 - DNS Update options.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The two options above correspond to the two cases discussed in &lt;a href=&quot;https://tools.ietf.org/html/rfc4702&quot;&gt;RFC4702&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/9-rfc-4702.png&quot; alt=&quot;9 - RFC 4702.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For our Linux clients, the option we need is the last check box. Let us turn this on and trigger a DHCP request from our client.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/10-dynamically-update-for-linux-clients.png&quot; alt=&quot;10 - Dynamically update for Linux clients.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When we check the DNS server, we can see that the A record successfully is created.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/11-successful-registration.png&quot; alt=&quot;11 - Successful Registration.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the capture, we can see secure DNS update message being sent from the DHCP server (Note that the DNS clients always tries insecure updates first and gets rejected by the server).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/12-successful-registration-packets.png&quot; alt=&quot;12 - Successful Registration Packets.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For a home environment, this is almost enough. But for production environments, with multiple DHCP servers, this is not enough. The problem is that, in such setup the DHCP server becomes the owner of the A and PTR records (see below). It is fine as long as the DHCP server is alive to create and remove records. But when it goes down, its peer DHCP server won’t be able to do anything about those records.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/13-a-record-owner.png&quot; alt=&quot;13 - A record owner.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This &lt;a href=&quot;https://technet.microsoft.com/en-us/library/dd334715(v=ws.10).aspx&quot;&gt;link&lt;/a&gt; explains the issue in more detail. Let us follow the advice, create a dedicated user account for updating DNS and delete the old record with DHCP server as owner. Do not grant any extra privilege to this account. Just adding to DNSUpdateProxy group should be sufficient (Right click on IPv4 -&amp;gt; Properties -&amp;gt; Advanced).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/14-dynamic-update-credentials.png&quot; alt=&quot;14 - Dynamic update credentials.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As usual, let us go ahead to trigger an update.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017-07-19-dynamic-registration-of-dns-for-linux-devices-in-an-active-directory-environment-with-windows-dns-server/15-dhcp-request.png&quot; alt=&quot;15 - DHCP Request.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As expected, new A and PTR record gets created.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/16-successful-registration.png&quot; alt=&quot;16 - Successful Registration.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we check the ownership, we can find that the record is owned by DNSProxyUpdate group.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/16-dynamic-update-credentials1.png&quot; alt=&quot;16 - Dynamic update credentials.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Finally, let us discuss the option called “Name Protection” at the bottom of the dialog box.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/17-name-protection.png&quot; alt=&quot;17 - Name Protection.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This forces DHCP server to manage the entire lifecycle of your client’s A and PTR records. If you are going to let your DHCP server manage client’s A record, I don’t see any reason to keep this disabled. It will also protect you from “&lt;a href=&quot;https://technet.microsoft.com/en-us/library/dd759188(v=ws.11).aspx&quot;&gt;Name Squatting&lt;/a&gt;” by offline clients. &lt;a href=&quot;https://tools.ietf.org/html/rfc4701&quot;&gt;RFC4701 &lt;/a&gt;describes the problem as:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/18-rfc4701.png&quot; alt=&quot;18 - RFC4701.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let us see what it means to turn on this option. First, we keep it disabled and bring two clients online with same hostname, one after other. All is well when the first client comes online and gets an IP address 192.168.179.50.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/19-dhcp-request.png&quot; alt=&quot;19 - DHCP Request.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;DNS also gets updated accordingly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/20-dns-update.png&quot; alt=&quot;20 - DNS Update.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let us bring another Linux client online and change the hostname to same as this host. Then perform a DHCP request from this host.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/21-hostname-change.png&quot; alt=&quot;21 - Hostname change.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/22-dhcp-request.png&quot; alt=&quot;22 - DHCP Request.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;DHCP server assigns IP address 192.168.179.51 and sends an update to DNS server. Note that the DHCP server makes no fuss about two hosts sharing the same hostname. For all it knows, it could be the same host with multiple interfaces.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/23-dhcp-update.png&quot; alt=&quot;23 - DHCP Update.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the DNS sever side, we see that it accepts this update without any hesitation. The only problem is that this overwrites the existing record, while the client is still online. So, anyone trying to talk the first node ends up talking to the second node.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/24-dns-overwritten.png&quot; alt=&quot;24 - DNS overwritten.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Clearly, DHCP server is not a reliable source of identity. RFC4703 briefly mentions the inability of DHCP server to provide any sort of assurance.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/25-rfc4703.png&quot; alt=&quot;25 - RFC4703.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let us see what happens when we enable “Name Protection”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/26-enable-name-protection.png&quot; alt=&quot;26 - Enable Name Protection.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As soon as we enable this option, first thing we notice is that all other options are greyed out. This is because, with Name Protection enabled, it is always the responsibility of DHCP server to perform both A record and PTR record updates.&lt;/p&gt;

&lt;p&gt;Let us wipe the slate clean, by releasing IP address from both the clients and deleting the existing DNS &amp;amp; DHCP records.&lt;/p&gt;

&lt;p&gt;Now when you bring the first Linux client online, you can see that the DHCP server performs a new type of record registration called DHCID.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/27-successful-dhcid-capture.png&quot; alt=&quot;27 - Successful DHCID Capture.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A new record type DHCID appears in the DNS server.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/28-successful-dhcid-registered.png&quot; alt=&quot;28 - Successful DHCID registered.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let us bring up the impostor and request DHCP address. It gets an IP address of 192.168.179.51.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/29-dns-impersonation.png&quot; alt=&quot;29 - DNS Impersonation.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As usual, DHCP server is very generous about having two hosts sharing the same hostname.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/30-duplicate-dhcp-update.png&quot; alt=&quot;30 - Duplicate DHCP Update.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But no new DNS entry is created.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/31-name-protection-success.png&quot; alt=&quot;31 - Name protection success.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looking at the capture, we can see that the DNS registration fails with a response that RRset does not exist.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/32-dns-update-refused-capture.png&quot; alt=&quot;32 - DNS Update refused capture.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This message means that DHCID value calculated from the new update packet doesn’t match with any DHCID RR’s stored in the server. This behaviour is described in &lt;a href=&quot;https://tools.ietf.org/html/rfc4701&quot;&gt;RFC4701&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ephemeralelectrons.files.wordpress.com/2017/07/33-rfc4701.png&quot; alt=&quot;33 - RFC4701.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is as much as we need to know about configuring a Microsoft DHCP server to perform Dynamic DNS for Linux clients. In the upcoming posts, let us explore the other two options.&lt;/p&gt;</content><author><name>thamizh85</name></author><category term="DHCP" /><category term="DNS" /><category term="Dynamic DNS" /><category term="Linux" /><summary type="html">While Linux has proliferated extensively in the server arena in the recent past, client networks are still dominated by Windows devices. This means, things that we take for granted in a client environment such as DDNS are not as matured as they are in Windows environment. One may ask whether the recent surge in Linux based clients such as IoT devices has changed this equation. But the nature of these devices is different from Windows based clients that they mostly rely on outbound connection to internet. Since they seldom require other hosts to initiate connection to them, their operation doesn’t rely much on Dynamic DNS. So, what does it take to make a Linux client register dynamically in a Windows environment? At its basic, the entire process relies on Dynamic DNS as explained in RFC2136. In a traditional windows environment with AD, this process is taken care by client OS. Every time a Windows PC gets an IP address from DHCP server, it would send a DNS Update (Opcode = 5) request to its registered DNS server. Performed manually, this is same as typing “ipconfig /registerdns” at an elevated command prompt. This behaviour can be modified by accessing DNS section of Advanced TCP/IP settings of a network adapter. When we ask a Linux client to do the same (later I will explain how it can be configured to ask), it won’t work unless the DNS server is configured to accept “Insecure updates” (Which is a major security risk if you need to ask). Take a look at the capture of Linux client performing DNS update, you can see that the server comes back with a UPDATE REFUSED response. This is because our DNS server is enabled with secure updates which means only authenticated clients can send update. The client is expected to send a transaction signature along with the update request. There are different types of signatures such as a TSIG resource or the SIG(0) or GSS-TSIG signatures. In Windows world however, only GSS-TSIG signatures as described in RFC3645 are understood and accepted. Looking at a capture from a Windows PC joined to domain, one can see the Windows Device sending Update request with GSS-TSIG resource. Given this background, let us explore some of the options available to setup DDNS for Linux based clients. In this series of posts, I will explore 3 options: Configure DHCP server to perform DNS registration on behalf of the clients Join the Linux devices to AD domain and configure them to dynamically update Setup a new sub-domain running a dedicated Linux BIND server and configure DNS forwarding on Microsoft DNS server. Our environment has the following setup: Microsoft Active Directory environment with DNS server installed in Domain controller and a DHCP server running separately on a different host. All are running on Windows Server 2008 R2. DNS is configured to accept only Secure updates. Two Linux devices running Debian Stretch operating system. One of them will act as DNS server in one of the scenarios. The solutions we discuss should meet the following objectives: Update DNS when the device gets an IP address Perform periodic update to DNS server to protect against expiry Fully automated with very little or no hand-coding on client devices, assume no automation tools like Puppet or Chef Scalable to hundreds or thousands of devices Point 3 is important to me since I had to work out a solution at work where we are using hundreds of Raspberry Pi’s, all booting the same image cloned on to flash disks. So, editing config files on each of them is not an option (we will come to this later). Configuring DHCP server to perform DNS registration on behalf of the clients This is the simplest and most reliable solution of the available options. This method makes use of DHCP option 81 as defined in RFC4702, which is used to convey a client’s FQDN to a DHCP server as part of DHCP process. An aside: RFC doesn’t mandate whether a DHCP server should register client’s DNS or not. It is left to site-specific policies, which may differ per the security context of the site. The default setting in a Microsoft DHCP server scope is as follows (Right click on scope name -&amp;gt; Properties to reach here): Understandably, this only updates to DNS server if requested by the client. What happens if we select the option to “Always dynamically update DNS A and PTR records”? Is that what we want? If you trigger a DHCP request from the client, you will notice that this doesn’t work. This setting merely controls whether a DHCP server should update ‘A’ record or not.  The label “Always dynamically update DNS A and PTR records” is misleading since it applies only for the clients that request a DNS update. By default, a client is responsible for updating the A record and DHCP server is responsible for updating the PTR record. Selecting the second option forces DHCP server to update A record as well. But the prerequisite is that the client should request for DNS update. The two options above correspond to the two cases discussed in RFC4702 For our Linux clients, the option we need is the last check box. Let us turn this on and trigger a DHCP request from our client. When we check the DNS server, we can see that the A record successfully is created. On the capture, we can see secure DNS update message being sent from the DHCP server (Note that the DNS clients always tries insecure updates first and gets rejected by the server). For a home environment, this is almost enough. But for production environments, with multiple DHCP servers, this is not enough. The problem is that, in such setup the DHCP server becomes the owner of the A and PTR records (see below). It is fine as long as the DHCP server is alive to create and remove records. But when it goes down, its peer DHCP server won’t be able to do anything about those records. This link explains the issue in more detail. Let us follow the advice, create a dedicated user account for updating DNS and delete the old record with DHCP server as owner. Do not grant any extra privilege to this account. Just adding to DNSUpdateProxy group should be sufficient (Right click on IPv4 -&amp;gt; Properties -&amp;gt; Advanced). As usual, let us go ahead to trigger an update. As expected, new A and PTR record gets created. If we check the ownership, we can find that the record is owned by DNSProxyUpdate group. Finally, let us discuss the option called “Name Protection” at the bottom of the dialog box. This forces DHCP server to manage the entire lifecycle of your client’s A and PTR records. If you are going to let your DHCP server manage client’s A record, I don’t see any reason to keep this disabled. It will also protect you from “Name Squatting” by offline clients. RFC4701 describes the problem as: Let us see what it means to turn on this option. First, we keep it disabled and bring two clients online with same hostname, one after other. All is well when the first client comes online and gets an IP address 192.168.179.50. DNS also gets updated accordingly. Let us bring another Linux client online and change the hostname to same as this host. Then perform a DHCP request from this host. DHCP server assigns IP address 192.168.179.51 and sends an update to DNS server. Note that the DHCP server makes no fuss about two hosts sharing the same hostname. For all it knows, it could be the same host with multiple interfaces. On the DNS sever side, we see that it accepts this update without any hesitation. The only problem is that this overwrites the existing record, while the client is still online. So, anyone trying to talk the first node ends up talking to the second node. Clearly, DHCP server is not a reliable source of identity. RFC4703 briefly mentions the inability of DHCP server to provide any sort of assurance. Let us see what happens when we enable “Name Protection”. As soon as we enable this option, first thing we notice is that all other options are greyed out. This is because, with Name Protection enabled, it is always the responsibility of DHCP server to perform both A record and PTR record updates. Let us wipe the slate clean, by releasing IP address from both the clients and deleting the existing DNS &amp;amp; DHCP records. Now when you bring the first Linux client online, you can see that the DHCP server performs a new type of record registration called DHCID. A new record type DHCID appears in the DNS server. Let us bring up the impostor and request DHCP address. It gets an IP address of 192.168.179.51. As usual, DHCP server is very generous about having two hosts sharing the same hostname. But no new DNS entry is created. Looking at the capture, we can see that the DNS registration fails with a response that RRset does not exist. This message means that DHCID value calculated from the new update packet doesn’t match with any DHCID RR’s stored in the server. This behaviour is described in RFC4701. This is as much as we need to know about configuring a Microsoft DHCP server to perform Dynamic DNS for Linux clients. In the upcoming posts, let us explore the other two options.</summary></entry></feed>